/** @file
 * IPRT / No-CRT - Minimal C++ iosfwd header.
 */

/*
 * Copyright (C) 2022-2024 Oracle and/or its affiliates.
 *
 * This file is part of VirtualBox base platform packages, as
 * available from https://www.virtualbox.org.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, in version 3 of the
 * License.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <https://www.gnu.org/licenses>.
 *
 * The contents of this file may alternatively be used under the terms
 * of the Common Development and Distribution License Version 1.0
 * (CDDL), a copy of it is provided in the "COPYING.CDDL" file included
 * in the VirtualBox distribution, in which case the provisions of the
 * CDDL are applicable instead of those of the GPL.
 *
 * You may elect to license modified versions of this file under the
 * terms and conditions of either the GPL or the CDDL or both.
 *
 * SPDX-License-Identifier: GPL-3.0-only OR CDDL-1.0
 */

#ifndef VBOX_INCLUDED_SRC_nocrt_iosfwd
#define VBOX_INCLUDED_SRC_nocrt_iosfwd
#ifndef RT_WITHOUT_PRAGMA_ONCE
# pragma once
#endif

#include <iprt/nocrt/memory>
#include <iprt/nocrt/string>

#ifdef _MSC_VER
# pragma warning(push)
# pragma warning(disable: 4643) /* warning C4643: Forward declaring 'ios_base' in namespace std is not permitted by the C++ Standard */
#endif

namespace std
{
    using streamoff = RTFOFF;

    class ios_base;

    template<typename a_CharType, typename a_CharTraits = std::char_traits<a_CharType> > class basic_ios;
    template<typename a_CharType, typename a_CharTraits = std::char_traits<a_CharType> > class basic_streambuf;
    template<typename a_CharType, typename a_CharTraits = std::char_traits<a_CharType> > class basic_istream;
    template<typename a_CharType, typename a_CharTraits = std::char_traits<a_CharType> > class basic_ostream;
    template<typename a_CharType, typename a_CharTraits = std::char_traits<a_CharType> > class basic_iostream;
    template<typename a_CharType, typename a_CharTraits = std::char_traits<a_CharType> > class basic_ifstream;
    template<typename a_CharType, typename a_CharTraits = std::char_traits<a_CharType> > class basic_ofstream;
    template<typename a_CharType, typename a_CharTraits = std::char_traits<a_CharType> > class basic_fstream;


    typedef basic_ios<char>             ios;
    typedef basic_streambuf<char>       streambuf;
    typedef basic_istream<char>         istream;
    typedef basic_ostream<char>         ostream;
    typedef basic_iostream<char>        iostream;
    typedef basic_ifstream<char>        ifstream;
    typedef basic_ofstream<char>        ofstream;
    typedef basic_fstream<char>         fstream;
}

#ifdef _MSC_VER
# pragma warning(pop)
#endif

#endif /* !VBOX_INCLUDED_SRC_nocrt_iosfwd */

