#line 2 "glsl/glsl_lexer.cpp"

#line 4 "glsl/glsl_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define _mesa_glsl_lexer__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer _mesa_glsl_lexer__create_buffer
#endif

#ifdef yy_delete_buffer
#define _mesa_glsl_lexer__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer _mesa_glsl_lexer__delete_buffer
#endif

#ifdef yy_scan_buffer
#define _mesa_glsl_lexer__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer _mesa_glsl_lexer__scan_buffer
#endif

#ifdef yy_scan_string
#define _mesa_glsl_lexer__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string _mesa_glsl_lexer__scan_string
#endif

#ifdef yy_scan_bytes
#define _mesa_glsl_lexer__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes _mesa_glsl_lexer__scan_bytes
#endif

#ifdef yy_init_buffer
#define _mesa_glsl_lexer__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer _mesa_glsl_lexer__init_buffer
#endif

#ifdef yy_flush_buffer
#define _mesa_glsl_lexer__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer _mesa_glsl_lexer__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define _mesa_glsl_lexer__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state _mesa_glsl_lexer__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define _mesa_glsl_lexer__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer _mesa_glsl_lexer__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define _mesa_glsl_lexer_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state _mesa_glsl_lexer_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define _mesa_glsl_lexer_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state _mesa_glsl_lexer_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define _mesa_glsl_lexer_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack _mesa_glsl_lexer_ensure_buffer_stack
#endif

#ifdef yylex
#define _mesa_glsl_lexer_lex_ALREADY_DEFINED
#else
#define yylex _mesa_glsl_lexer_lex
#endif

#ifdef yyrestart
#define _mesa_glsl_lexer_restart_ALREADY_DEFINED
#else
#define yyrestart _mesa_glsl_lexer_restart
#endif

#ifdef yylex_init
#define _mesa_glsl_lexer_lex_init_ALREADY_DEFINED
#else
#define yylex_init _mesa_glsl_lexer_lex_init
#endif

#ifdef yylex_init_extra
#define _mesa_glsl_lexer_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra _mesa_glsl_lexer_lex_init_extra
#endif

#ifdef yylex_destroy
#define _mesa_glsl_lexer_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy _mesa_glsl_lexer_lex_destroy
#endif

#ifdef yyget_debug
#define _mesa_glsl_lexer_get_debug_ALREADY_DEFINED
#else
#define yyget_debug _mesa_glsl_lexer_get_debug
#endif

#ifdef yyset_debug
#define _mesa_glsl_lexer_set_debug_ALREADY_DEFINED
#else
#define yyset_debug _mesa_glsl_lexer_set_debug
#endif

#ifdef yyget_extra
#define _mesa_glsl_lexer_get_extra_ALREADY_DEFINED
#else
#define yyget_extra _mesa_glsl_lexer_get_extra
#endif

#ifdef yyset_extra
#define _mesa_glsl_lexer_set_extra_ALREADY_DEFINED
#else
#define yyset_extra _mesa_glsl_lexer_set_extra
#endif

#ifdef yyget_in
#define _mesa_glsl_lexer_get_in_ALREADY_DEFINED
#else
#define yyget_in _mesa_glsl_lexer_get_in
#endif

#ifdef yyset_in
#define _mesa_glsl_lexer_set_in_ALREADY_DEFINED
#else
#define yyset_in _mesa_glsl_lexer_set_in
#endif

#ifdef yyget_out
#define _mesa_glsl_lexer_get_out_ALREADY_DEFINED
#else
#define yyget_out _mesa_glsl_lexer_get_out
#endif

#ifdef yyset_out
#define _mesa_glsl_lexer_set_out_ALREADY_DEFINED
#else
#define yyset_out _mesa_glsl_lexer_set_out
#endif

#ifdef yyget_leng
#define _mesa_glsl_lexer_get_leng_ALREADY_DEFINED
#else
#define yyget_leng _mesa_glsl_lexer_get_leng
#endif

#ifdef yyget_text
#define _mesa_glsl_lexer_get_text_ALREADY_DEFINED
#else
#define yyget_text _mesa_glsl_lexer_get_text
#endif

#ifdef yyget_lineno
#define _mesa_glsl_lexer_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno _mesa_glsl_lexer_get_lineno
#endif

#ifdef yyset_lineno
#define _mesa_glsl_lexer_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno _mesa_glsl_lexer_set_lineno
#endif

#ifdef yyget_column
#define _mesa_glsl_lexer_get_column_ALREADY_DEFINED
#else
#define yyget_column _mesa_glsl_lexer_get_column
#endif

#ifdef yyset_column
#define _mesa_glsl_lexer_set_column_ALREADY_DEFINED
#else
#define yyset_column _mesa_glsl_lexer_set_column
#endif

#ifdef yywrap
#define _mesa_glsl_lexer_wrap_ALREADY_DEFINED
#else
#define yywrap _mesa_glsl_lexer_wrap
#endif

#ifdef yyget_lval
#define _mesa_glsl_lexer_get_lval_ALREADY_DEFINED
#else
#define yyget_lval _mesa_glsl_lexer_get_lval
#endif

#ifdef yyset_lval
#define _mesa_glsl_lexer_set_lval_ALREADY_DEFINED
#else
#define yyset_lval _mesa_glsl_lexer_set_lval
#endif

#ifdef yyget_lloc
#define _mesa_glsl_lexer_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc _mesa_glsl_lexer_get_lloc
#endif

#ifdef yyset_lloc
#define _mesa_glsl_lexer_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc _mesa_glsl_lexer_set_lloc
#endif

#ifdef yyalloc
#define _mesa_glsl_lexer_alloc_ALREADY_DEFINED
#else
#define yyalloc _mesa_glsl_lexer_alloc
#endif

#ifdef yyrealloc
#define _mesa_glsl_lexer_realloc_ALREADY_DEFINED
#else
#define yyrealloc _mesa_glsl_lexer_realloc
#endif

#ifdef yyfree
#define _mesa_glsl_lexer_free_ALREADY_DEFINED
#else
#define yyfree _mesa_glsl_lexer_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _mesa_glsl_lexer_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 275
#define YY_END_OF_BUFFER 276
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1078] =
    {   0,
        0,    0,   16,   16,    0,    0,  276,  274,    1,   23,
      274,  274,  274,  274,  274,  274,  273,  274,  180,  178,
      274,  274,  274,  272,  274,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  274,    1,  274,   22,   16,
       21,   22,   20,   19,   17,   18,   14,   13,    1,  162,
      171,  163,  174,  168,  157,  170,  158,  177,  182,  169,
      183,  180,    0,    0,  180,  180,    0,  180,  178,  178,
      178,  178,  166,  159,  161,  160,  167,  272,  175,  165,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,   32,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,   36,
      272,  272,   63,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  176,  164,
        1,    0,    0,    2,    0,    0,    0,    0,   16,   15,
       19,   18,    0,  182,    0,    0,  181,    0,  183,    0,
        0,    0,  184,  179,  172,  173,  272,  191,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,   35,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,   28,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,   64,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,    0,    0,    0,    0,   15,
        0,  182,  186,    0,  181,    0,    0,    0,  183,  187,
      184,    0,    0,  179,  179,  179,  272,  272,  272,   26,

      272,  272,  272,  249,  242,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,   34,  194,  272,  272,
      272,  272,   71,  272,  272,  199,  212,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  209,  245,   51,   52,   53,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  197,  189,  272,  272,  272,   29,  272,  272,
      272,  272,  272,  272,  272,   48,   49,   50,  155,  272,
      272,  272,    0,    0,    0,    0,    0,  181,  185,  188,

      272,  272,  272,   30,  272,   39,   40,   41,  272,  192,
      272,  272,   25,  272,  272,  272,  223,  224,  225,  272,
      220,  221,  222,  272,  190,  272,  213,   27,  235,  236,
      237,  247,  217,  218,  219,  272,  272,  272,  272,   65,
      215,  272,  272,  272,  272,   42,   43,   44,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,   74,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  210,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  193,  272,  272,  244,   45,   46,   47,
      272,  272,   33,  272,    0,    0,    0,    0,  252,  272,

      272,   67,  272,  272,  250,  272,  272,  272,  272,  272,
      272,  211,  206,  255,  272,  272,  272,  272,  272,  272,
      272,  202,  272,  272,  272,  272,  156,   54,   55,   56,
       57,   58,   59,   60,   61,   62,  272,  272,  272,  272,
      216,  198,  272,  272,  204,  272,  272,  272,   38,  272,
      262,  153,  241,   72,  205,  154,  272,  253,  200,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
        0,    0,    0,    0,  272,  272,  272,  272,  272,  201,
       37,  226,  227,  228,  229,  230,  231,  232,  233,  234,
      272,  265,  266,  267,  272,  272,  272,  272,  272,  110,

      111,  112,  272,  272,  264,  272,  272,  272,  246,  272,
      272,  272,  272,  109,  272,  272,  272,  272,  272,  272,
      272,  272,  195,  269,  270,  271,  272,  272,  272,  272,
      272,  272,   66,  272,  272,   68,  272,  272,    0,    0,
        0,    0,    0,  272,  272,   69,  147,   31,  207,  121,
      122,  123,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  203,  272,  272,  272,
      150,  261,  149,  272,  272,  272,  272,  272,  272,  272,
      272,  196,  132,  133,  134,  272,  272,  268,  214,  272,
      148,  272,    0,    0,    6,    0,    0,    0,   12,    3,

      272,   24,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  119,  272,  272,  272,  114,  208,   70,  272,  272,
      272,  272,  272,  243,  272,  251,  248,  256,   75,   76,
       77,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  151,    0,    0,    0,
        0,    0,    0,    0,  272,  272,  272,  130,  272,  272,
      125,  272,  272,  272,  272,  272,  272,  272,  272,   86,
       87,   88,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  263,  272,  272,  141,  272,
      272,  136,   92,   93,   94,  272,  272,    4,    0,    5,

        0,    0,    0,    0,    0,    0,  152,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  113,  272,  115,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,   98,  272,  272,  272,  272,   78,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
        0,    0,    0,    0,  272,  272,  272,  124,  126,  272,
      116,  272,  117,  272,  272,  272,  272,  272,   99,  272,
      272,   89,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  135,  137,  272,
      272,  272,  100,  272,  272,   95,    0,    0,    0,  127,

      128,  272,  272,  272,  143,  272,  272,  144,  272,  272,
      272,  272,  272,  272,  272,   73,  272,  272,  272,  272,
      238,  272,  239,  254,  272,  272,  272,  138,  139,  272,
      272,  272,  272,  272,  272,  272,  272,    0,    0,    0,
      272,  272,  272,  272,  120,  118,  272,  272,  272,  257,
      259,  272,   79,  272,   80,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  258,  260,  272,    0,
        0,    0,    0,  131,  129,  272,  272,   90,   91,  272,
      272,  272,   81,  272,  272,  272,   82,  272,  272,  272,
      142,  140,   96,   97,  272,  272,    0,    0,    0,    0,

      272,  272,  272,  272,  272,  272,  101,  272,  104,  272,
      272,  272,  272,    0,    0,    0,    0,  272,  272,  102,
      105,  272,  272,  272,  272,   83,  272,  103,  106,    0,
        0,    0,    7,    0,    0,  145,  146,  272,  272,  272,
      272,  108,    0,    0,    8,    0,    0,  272,  272,  240,
      272,    0,    0,    0,   84,   85,  272,    0,    0,    0,
        9,  272,    0,    0,   10,  107,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   11,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    9,
       10,   11,   12,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   21,   23,   23,   24,    1,   25,
       26,   27,    1,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   35,   35,   35,   36,   37,   35,   38,   35,
       35,   39,   40,   41,   42,   35,   35,   43,   35,   35,
        1,    1,    1,   44,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   35,   62,   63,   64,   65,   66,   67,   68,
       69,   70,    1,   71,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    1,    5,    5,    5,    5,    5,
        5,    5,    6,    1,    1,    1,    1,    7,    7,    7,
        7,    8,    9,   10,   10,   11,   10,   10,   10,   10,
       10,   10,   12,    1,   10,    7,    7,    7,    7,    8,
        9,   10,   10,   10,   10,   10,   11,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   12,   10,   10,
        1
    } ;

static const flex_int16_t yy_base[1092] =
    {   0,
        0,   70,   76,    0, 1517, 1516, 1518, 1521,   71, 1521,
     1491, 1490,  140, 1489,  137,  138,  136, 1488,  153,  208,
      135, 1487,  151,    0,  124,  117,  122,  133,  147,  141,
      188, 1452,  140,  198,  156,  158,  173, 1446,  197,  186,
      214,  213,  217,  191,  161,  206,  282,  267, 1521,  213,
     1521, 1495, 1521,  273, 1521,    0, 1521, 1521,  251, 1521,
     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521,  318, 1521,
      360,  231,  271,  288, 1521, 1473,    0, 1451,    0, 1521,
     1471, 1449, 1479, 1521, 1521, 1521, 1478,    0, 1521, 1521,
     1439, 1444,  238, 1441, 1450, 1448, 1448, 1434, 1437, 1449,

      260, 1443, 1430, 1446, 1426, 1440, 1426, 1423, 1423, 1429,
      255,  269, 1423, 1434, 1419, 1425, 1429, 1430, 1459,    0,
     1420, 1431,  292, 1430, 1425, 1405,  132, 1409, 1423, 1413,
      266, 1406,  268, 1419, 1421,  279, 1400, 1408,  285, 1395,
     1404,  298,  300, 1409, 1404, 1407, 1395, 1398, 1438,  153,
      184,  268, 1407, 1394, 1407,  305, 1400, 1399, 1521, 1521,
      361,  368,  370, 1521, 1384, 1397, 1388, 1399,  344,    0,
      368,    0,  382, 1521, 1415, 1396,  390,  432, 1521, 1413,
     1394,  440,  373,  428, 1521, 1521, 1390,    0, 1385, 1380,
     1384, 1394, 1388, 1390,  357, 1373, 1373, 1385, 1376,  349,

     1387, 1384, 1367, 1383, 1381, 1378, 1369, 1376, 1362, 1360,
     1373, 1358, 1375,    0, 1372, 1359, 1367, 1364, 1368, 1349,
     1368, 1361, 1358, 1346, 1345,  392, 1363, 1350, 1359, 1346,
     1353, 1343,  419, 1349, 1352, 1342, 1350, 1338, 1342, 1333,
     1348, 1347, 1337, 1344,  355, 1327, 1346, 1329, 1327, 1326,
     1337, 1326, 1321, 1319, 1321, 1332, 1317, 1319, 1316, 1328,
     1327, 1310, 1329, 1310,  304, 1319, 1314, 1312, 1322, 1300,
      447, 1319, 1321, 1309, 1301, 1300, 1304, 1316, 1299,    0,
      455,  446, 1521,  488, 1521, 1327, 1308,  496,  487, 1521,
     1521, 1325, 1306, 1521, 1320, 1298, 1288, 1299, 1298,    0,

     1295, 1300,  468,    0,    0, 1287, 1285, 1285, 1286, 1281,
     1290, 1278, 1296,  471, 1284,  476,    0,    0, 1278, 1289,
     1288, 1288,    0, 1272,  506,    0,    0, 1274,  509, 1284,
     1281, 1282, 1272, 1266, 1265, 1308, 1265, 1264, 1264,  512,
     1259,    0,    0, 1255, 1254, 1253, 1255, 1256, 1261, 1255,
     1251, 1265, 1260, 1260, 1258, 1257, 1250, 1244, 1246, 1245,
     1248, 1248, 1254, 1239, 1242, 1237, 1246, 1251, 1238, 1235,
     1248, 1238,    0,    0, 1245, 1243, 1240, 1269, 1230, 1230,
     1236, 1226, 1234,  515, 1231,    0,    0,    0,    0, 1220,
     1233, 1232, 1231, 1230, 1227, 1215,  529,  503, 1521, 1521,

     1227, 1228, 1228,    0, 1212,    0,    0,    0, 1213,    0,
     1222, 1212,    0, 1211, 1212, 1206, 1199, 1198, 1197, 1214,
        0,    0,    0, 1204,    0, 1200,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1213, 1210,  538, 1209,    0,
        0, 1213, 1206, 1202, 1198,    0,    0,    0, 1190,  522,
      543,  546, 1195, 1191, 1197, 1187, 1185, 1199, 1183,    0,
     1183, 1197, 1185, 1181, 1188, 1182, 1194, 1189, 1189,    0,
     1186, 1183, 1187, 1170, 1168, 1171, 1178, 1184, 1179, 1180,
     1177, 1206, 1163,    0, 1165, 1166,    0,    0,    0,    0,
     1163, 1167,    0, 1160, 1160, 1216, 1159, 1162,    0, 1170,

     1149,    0, 1159, 1153,    0, 1146, 1146, 1160,  551,  554,
      557,    0, 1162,    0,  560,  564, 1176, 1175, 1174, 1139,
     1138,    0, 1138, 1155, 1154, 1149,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1137, 1151, 1137, 1134,
        0,    0, 1140,  378,    0, 1136, 1144, 1143,    0, 1135,
     1127,    0,    0,    0,    0,    0, 1124,    0,    0, 1123,
     1135,  566,  570, 1140, 1126, 1133, 1132, 1129, 1123, 1120,
     1115,  588, 1131, 1116, 1110, 1110, 1124, 1108, 1121,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1113,    0,    0,    0, 1138, 1137, 1136, 1101, 1100,  440,

      575,    0, 1113, 1116,    0, 1114, 1102, 1098,    0, 1111,
     1108, 1107, 1096,    0, 1095, 1085, 1103, 1088, 1091,  599,
     1096, 1099,    0,    0,    0,    0, 1117, 1116, 1115, 1080,
     1079, 1079,    0, 1093, 1079,    0, 1090, 1082, 1084,  589,
      617, 1135, 1077, 1081, 1084,    0,    0,    0,    0, 1105,
      585,    0, 1081, 1084, 1068, 1076, 1066, 1087, 1076, 1072,
     1073, 1073, 1072, 1057,  624, 1070,    0, 1071, 1059, 1058,
        0,    0,    0, 1054, 1084, 1083, 1082, 1047, 1046, 1042,
     1050,    0, 1080,  619,    0, 1056, 1059,    0,    0,  631,
        0, 1036, 1044,  649, 1521,  660,    0,  671,  657, 1521,

     1044,    0, 1040, 1039, 1060, 1049, 1047, 1047, 1034, 1049,
     1032, 1065, 1044, 1045, 1040, 1061,    0,    0, 1057, 1056,
     1055, 1020, 1019,    0, 1019,    0,    0,    0,  441,  668,
     1043, 1030, 1027, 1009, 1022, 1009, 1008, 1029, 1017, 1007,
     1007, 1025, 1024, 1023,  988,  986,    0,  988,  642,  709,
      481, 1004,  994,  979,  974,  975,  971, 1003,  982,  976,
      996,  977,  962,  956,  906,  903,  917,  903,  902,  935,
      647,    0,  911,  914,  906,  896,  904,  894,  915,  904,
      900,  902,  900,  900,  899,    0,  886,  885,  917,  896,
      893,  914,  911,  676,    0,  887,  890, 1521,  496, 1521,

      717,    0,  738,  905,  888,  870,    0,   28,  116,  130,
      171,  225,  235,  257,  297,  297,  312,    0,  337,    0,
      346,  354,  371,  395,  393,  395,  442,  436,  459,  476,
      475,  515,  505,  512,  511,  545,  655,  534,  551,  552,
      539,  538,  559,  561,  563,  564,  587,  580,  595,  605,
      696,  630,  635,  647,  633,  634,  647,    0,    0,  652,
      676,  651,  681,  676,  656,  678,  680,  681,  716,  697,
      696,  719,  698,  703,  701,  705,  690,  689,  713,  699,
      702,  703,  713,  708,  699,  700,  708,    0,    0,  709,
      710,  711,  746,  727,  726,  749,  742,  727,  722,    0,

        0,  735,  736,  730,    0,  731,  716,    0,  717,  741,
      742,  727,  726,  729,  730,    0,  724,  734,  726,  734,
      757,  738,    0,    0,  737,  754,  755,    0,    0,  756,
      757,  758,  759,  744,  743,  746,  747,  808,  809,  758,
      744,  745,  769,  770,    0,    0,  748,  750,  758,    0,
        0,  759,  782,  756,  784,  779,  773,  760,  782,  780,
      773,  762,  763,  764,  765,  773,    0,    0,  774,  835,
      836,  837,  770,    0,    0,  792,  793,    0,    0,  797,
      798,  793,    0,  794,  779,  803,    0,  781,  791,  814,
        0,    0,    0,    0,  807,  808,  796,  854,  806,  808,

      799,  800,  792,  793,  817,  818,    0,  817,  827,  801,
      837,  801,  802,  806,  822,  872,  874,  808,  810,    0,
        0,  829,  830,  820,  828,    0,  844,    0,    0,  839,
      884,  885, 1521,  889,  886,    0,    0,  830,  832,  826,
      850,    0,  837,  898, 1521,  899,  851,  836,  837,    0,
      856,  852,  856,  907,    0,    0,  851,  866,  911,  913,
     1521,  849,  859,  917, 1521,    0,  856,  920,  922,  923,
      924,  871,  873,  930,  931, 1521, 1521,  970,  978,  986,
      995,  999, 1008, 1016, 1023, 1030, 1037, 1047, 1055, 1063,
     1071

    } ;

static const flex_int16_t yy_def[1092] =
    {   0,
     1077,    1, 1077,    3, 1078, 1078, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1079, 1077, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1080, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077,   19, 1081, 1077, 1077, 1077, 1082, 1077,   20, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1079, 1077, 1077,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1083,
     1077, 1080, 1077, 1077, 1077, 1077,   71, 1077, 1077, 1077,
     1077, 1077, 1084, 1082, 1077, 1077, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1077, 1077, 1077, 1077, 1083,
     1077, 1085, 1077, 1077, 1077, 1077, 1077, 1077, 1086, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1077, 1077, 1077, 1077, 1077, 1087, 1077, 1077,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1077, 1077, 1077, 1077, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1077, 1077, 1077, 1077, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1077, 1088,
     1077, 1077, 1077, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1077, 1077, 1077, 1077, 1089, 1077, 1077, 1077,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1077, 1090, 1077,
     1089, 1077, 1077, 1077, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1077, 1077, 1077,

     1077, 1091, 1077, 1077, 1077, 1077, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1091, 1077, 1077, 1077, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1077, 1077, 1077, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1077, 1077, 1077,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1077,
     1077, 1077, 1077, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1077, 1077, 1077, 1077,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1077, 1077, 1077, 1077, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1077,
     1077, 1077, 1077, 1077, 1077, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1077, 1077, 1077, 1077, 1077, 1079, 1079, 1079,
     1079, 1077, 1077, 1077, 1079, 1079, 1079, 1077, 1077, 1077,
     1077, 1079, 1077, 1077, 1077, 1079, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077,    0, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077

    } ;

static const flex_int16_t yy_nxt[1593] =
    {   0,
        8,    9,   10,    9,   11,    8,   12,   13,    8,    8,
       14,   15,   16,   17,   18,   19,   20,   20,   20,   20,
       20,   20,   20,    8,   21,   22,   23,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   25,   24,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   24,   24,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   24,   24,   24,
       46,   47,   59,  855,   59,   48,   49,   50,   51,   50,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       52,   53,   54,   54,   54,   54,   54,   54,   54,   55,

       49,   49,   49,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   49,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   49,   62,   65,   89,
       67,   69,   69,   69,   69,   69,   69,   69,   69,   83,
       84,  856,   66,   68,   91,   63,   71,   90,   72,   72,
       72,   72,   72,   72,   72,   73,   86,   87,   98,   92,
       93,   94,   99,   95,   74,  116,   96,   97,   75,  100,
      231,  857,  101,  117,   76,   77,  102,  107,  232,  108,

      103,  126,   74,  128,  104,  118,  105,  129,  109,   75,
      263,  264,  106,  157,  169,  127,  169,   78,  130,  119,
       77,   71,  158,   79,   79,   79,   79,   79,   79,   79,
       79,  159,  131,  110,  858,  136,  154,  265,  149,   74,
      155,  111,  133,   80,  112,  137,  266,  113,  120,   81,
      156,  121,   59,  114,   59,  122,  123,   74,  134,  138,
      124,  135,  145,  125,   80,  146,  139,  140,  163,  164,
      150,  141,   82, 1077,  147,  151,  160,  142,  143,  152,
      144,  148,  153,  161,   71,   59,  859,  162,  171,  171,
      171,  171,  171,  171,  171,  171,  860,  189, 1077,  182,

      182,  190,   74,  183,  183,  183,  183,  183,  183,  183,
      183,  210,  198,  267,  212,  239,  165,  199,  200,  236,
       74,  268,  211,  166,  244,  861,  237,  167,  213,  240,
      249,  241,  168,   69,   69,   69,   69,   69,   69,   69,
       69,  245,  246,  253,  250,  169,  255,  169,  223,  173,
      174,  224,  225,  175,  379,  226,  862,  227,  272,  254,
      256,  273,  161,  380,   59,  863,  162,  173,  174,  163,
      164,  163,  164,  864,  176,  177,  177,  177,  177,  177,
      177,  177,  177,  171,  171,  171,  171,  171,  171,  171,
      171,  178,  179,  281,  281,  180,  865,  282,  282,  282,

      282,  282,  282,  282,  282,  291,  304,  866,  292,  178,
      179,  310,  311,  336,  358,  867,  181,  165,  359,  165,
      305,  284,  285,  291,  166,  286,  166,  614,  167,  293,
      167,  615,  868,  168,  869,  168,  344,  345,  346,  284,
      285,  337,  870,  288,  288,  871,  287,  289,  289,  289,
      289,  289,  289,  289,  289,  183,  183,  183,  183,  183,
      183,  183,  183,  294,  386,  387,  388,  655,  776,  295,
      282,  282,  282,  282,  282,  282,  282,  282,  174,  656,
      777,  175,  694,  695,  294,  406,  407,  408,  417,  418,
      419,  872,  296,  421,  422,  423,  174,  799,  800,  397,

      397,  873,  176,  398,  398,  398,  398,  398,  398,  398,
      398,  289,  289,  289,  289,  289,  289,  289,  289,  179,
      874,  875,  180,  429,  430,  431,  433,  434,  435,  446,
      447,  448,  488,  489,  490,  285,  876,  179,  286,  528,
      529,  530,  877,  181,  398,  398,  398,  398,  398,  398,
      398,  398,  878,  285,  517,  518,  519,  879,  880,  287,
      531,  532,  533,  534,  535,  536,  520,  521,  582,  583,
      584,  585,  586,  587,  588,  589,  590,  592,  593,  594,
      595,  596,  597,  624,  625,  626,  627,  628,  629,  572,
      694,  695,  598,  599,  881,  884,  885,  886,  630,  631,

      887,  888,  657,  640,  641,  641,  641,  641,  641,  641,
      641,  658,  704,  659,  660,  675,  676,  677,  694,  695,
      889,  705,  890,  706,  891,  892,  893,  678,  679,  894,
      680,  697,  698,  698,  698,  698,  698,  698,  698,  698,
      719,  720,  721,  799,  800,  895,  737,  742,  743,  744,
      694,  695,  722,  723,  896,  738,  697,  739,  699,  745,
      746,  694,  695,  897,  749,  750,  750,  750,  750,  750,
      750,  750,  694,  695,  823,  696,  696,  696,  696,  696,
      696,  696,  882,  824,  802,  825,  698,  698,  698,  698,
      698,  698,  698,  698,  883,  778,  752,  799,  800,  898,

      899,  900,  901,  846,  779,  753,  780,  781,  902,  802,
      799,  800,  847,  903,  848,  904,  754,  905,  799,  800,
      906,  907,  908,  909,  803,  803,  803,  803,  803,  803,
      803,  803,  801,  801,  801,  801,  801,  801,  801,  799,
      800,  910,  911,  912,  913,  914,  915,  916,  917,  918,
      919,  920,  921,  803,  803,  803,  803,  803,  803,  803,
      803,  922,  923,  924,  925,  926,  927,  928,  929,  930,
      931,  932,  933,  934,  935,  936,  937,  938,  939,  940,
      941,  942,  943,  944,  945,  946,  947,  948,  949,  950,
      951,  952,  953,  954,  955,  956,  957,  958,  959,  960,

      961,  962,  963,  964,  965,  966,  967,  968,  969,  970,
      971,  973,  974,  975,  976,  977,  978,  972,  979,  980,
      981,  982,  983,  984,  985,  986,  987,  988,  989,  990,
      991,  992,  993,  994,  995,  996,  970,  971,  998, 1000,
     1001, 1002, 1003, 1004,  972, 1005, 1006, 1007, 1008, 1009,
     1010, 1011, 1012, 1013, 1014,  998, 1015, 1017, 1018, 1019,
     1020, 1021, 1022, 1023, 1016, 1024, 1025, 1026, 1027, 1028,
     1029, 1030, 1031, 1032, 1036, 1034, 1037, 1038, 1039, 1040,
     1041, 1033, 1035, 1042, 1043, 1044, 1032, 1046,  997, 1048,
     1034, 1049, 1050, 1045, 1033, 1051,  999, 1035, 1052, 1044,

     1046, 1053, 1055, 1056, 1057, 1058, 1059, 1045, 1060, 1054,
     1062, 1063, 1064,  999, 1060, 1066, 1061, 1067, 1064, 1068,
     1065, 1069, 1061, 1069, 1071, 1071, 1065, 1073, 1070, 1074,
     1070, 1075, 1075,  854,  853,  852,  850,  849,  845, 1076,
     1076,  844,  843,  842,  841, 1047,  840,  839,  838,  837,
      836,  835,  834,  833,  832,  831,  830,  829, 1047,  828,
      827,  826,  822,  821,  820,  819,  818,  817, 1072, 1072,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   88,   88,   88,   88,   88,   88,   88,   88,
      172,  172,  172,  172,  172,  172,  172,  172,   73,   73,

       73,  816,   73,  184,  184,  184,  184,  184,  280,  280,
      815,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      183,  183,  814,  813,  183,  812,  183,  282,  282,  811,
      810,  282,  809,  282,  289,  289,  808,  807,  289,  806,
      289,  398,  398,  805,  804,  398,  798,  398,  696,  696,
      797,  696,  796,  795,  794,  793,  792,  791,  696,  751,
      751,  751,  751,  751,  801,  801,  790,  801,  789,  788,
      787,  786,  785,  784,  801,  851,  851,  851,  851,  851,
      783,  782,  775,  774,  773,  772,  771,  770,  769,  768,
      767,  766,  765,  764,  763,  762,  761,  760,  759,  758,

      757,  756,  755,  748,  747,  741,  740,  736,  735,  734,
      733,  732,  731,  730,  729,  728,  727,  726,  725,  724,
      718,  717,  716,  715,  714,  713,  712,  711,  710,  709,
      708,  707,  703,  702,  701,  700,  699,  693,  692,  691,
      690,  689,  688,  687,  686,  685,  684,  683,  682,  681,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,
      664,  663,  662,  661,  654,  653,  652,  651,  650,  649,
      648,  647,  646,  645,  644,  643,  642,  639,  638,  637,
      636,  635,  634,  633,  632,  623,  622,  621,  620,  619,
      618,  617,  616,  613,  612,  611,  610,  609,  608,  607,

      606,  605,  604,  603,  602,  601,  600,  591,  581,  580,
      579,  578,  577,  576,  575,  574,  573,  572,  571,  570,
      569,  568,  567,  566,  565,  564,  563,  562,  561,  560,
      559,  558,  557,  556,  555,  554,  553,  552,  551,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  527,  526,  525,  524,  523,  522,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,
      495,  494,  493,  492,  491,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  476,  475,  474,  473,

      472,  471,  470,  469,  468,  467,  466,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  445,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  432,  428,  427,  426,  425,  424,
      420,  416,  415,  414,  413,  412,  411,  410,  409,  405,
      404,  403,  402,  401,  294,  294,  400,  400,  399,  399,
      396,  395,  394,  393,  392,  391,  390,  389,  385,  384,
      383,  382,  381,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,
      361,  360,  357,  356,  355,  354,  353,  352,  351,  350,

      349,  348,  347,  343,  342,  341,  340,  339,  338,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  309,  308,  307,  306,  303,  302,  301,
      300,  299,  298,  297,  290,  290,  283,  283,  279,  278,
      277,  276,  275,  274,  271,  270,  269,  262,  261,  260,
      259,  258,  257,  252,  251,  248,  247,  243,  242,  238,
      235,  234,  233,  230,  229,  228,  222,  221,  220,  219,
      218,  217,  216,  215,  214,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  197,  196,  195,  194,  193,  192,

      191,  188,  187,  186,  185,   80,   80,   75,   75,  170,
      132,  115,   85,   70,   64,   61,   60, 1077,   58,   58,
        7, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077

    } ;

static const flex_int16_t yy_chk[1593] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    9,  808,    9,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,   13,   15,   25,
       16,   17,   17,   17,   17,   17,   17,   17,   17,   21,
       21,  809,   15,   16,   26,   13,   19,   25,   19,   19,
       19,   19,   19,   19,   19,   19,   23,   23,   28,   26,
       26,   27,   28,   27,   19,   33,   27,   27,   19,   28,
      127,  810,   28,   33,   19,   19,   29,   30,  127,   30,

       29,   35,   19,   36,   29,   33,   29,   36,   30,   19,
      150,  150,   29,   45,   50,   35,   50,   19,   37,   34,
       19,   20,   45,   20,   20,   20,   20,   20,   20,   20,
       20,   46,   37,   31,  811,   40,   44,  151,   43,   20,
       44,   31,   39,   20,   31,   40,  151,   31,   34,   20,
       44,   34,   59,   31,   59,   34,   34,   20,   39,   41,
       34,   39,   42,   34,   20,   42,   41,   41,   48,   48,
       43,   41,   20,   72,   42,   43,   46,   41,   41,   43,
       41,   42,   43,   47,   73,   47,  812,   47,   54,   54,
       54,   54,   54,   54,   54,   54,  813,   93,   72,   74,

       74,   93,   73,   74,   74,   74,   74,   74,   74,   74,
       74,  111,  101,  152,  112,  133,   48,  101,  101,  131,
       73,  152,  111,   48,  136,  814,  131,   48,  112,  133,
      139,  133,   48,   69,   69,   69,   69,   69,   69,   69,
       69,  136,  136,  142,  139,  169,  143,  169,  123,   69,
       69,  123,  123,   69,  265,  123,  815,  123,  156,  142,
      143,  156,  161,  265,  161,  816,  161,   69,   69,  162,
      162,  163,  163,  817,   69,   71,   71,   71,   71,   71,
       71,   71,   71,  171,  171,  171,  171,  171,  171,  171,
      171,   71,   71,  173,  173,   71,  819,  173,  173,  173,

      173,  173,  173,  173,  173,  183,  195,  821,  183,   71,
       71,  200,  200,  226,  245,  822,   71,  162,  245,  163,
      195,  177,  177,  183,  162,  177,  163,  544,  162,  183,
      163,  544,  823,  162,  824,  163,  233,  233,  233,  177,
      177,  226,  825,  178,  178,  826,  177,  178,  178,  178,
      178,  178,  178,  178,  178,  182,  182,  182,  182,  182,
      182,  182,  182,  184,  271,  271,  271,  600,  729,  184,
      281,  281,  281,  281,  281,  281,  281,  281,  282,  600,
      729,  282,  751,  751,  184,  303,  303,  303,  314,  314,
      314,  827,  184,  316,  316,  316,  282,  799,  799,  284,

      284,  828,  282,  284,  284,  284,  284,  284,  284,  284,
      284,  288,  288,  288,  288,  288,  288,  288,  288,  289,
      829,  830,  289,  325,  325,  325,  329,  329,  329,  340,
      340,  340,  384,  384,  384,  398,  831,  289,  398,  450,
      450,  450,  832,  289,  397,  397,  397,  397,  397,  397,
      397,  397,  833,  398,  438,  438,  438,  834,  835,  398,
      451,  451,  451,  452,  452,  452,  438,  438,  509,  509,
      509,  510,  510,  510,  511,  511,  511,  515,  515,  515,
      516,  516,  516,  562,  562,  562,  563,  563,  563,  572,
      640,  640,  516,  516,  836,  838,  839,  840,  563,  563,

      841,  842,  601,  572,  572,  572,  572,  572,  572,  572,
      572,  601,  651,  601,  601,  620,  620,  620,  641,  641,
      843,  651,  844,  651,  845,  846,  847,  620,  620,  848,
      620,  640,  641,  641,  641,  641,  641,  641,  641,  641,
      665,  665,  665,  749,  749,  849,  684,  690,  690,  690,
      694,  694,  665,  665,  850,  684,  640,  684,  699,  690,
      690,  696,  696,  852,  694,  694,  694,  694,  694,  694,
      694,  694,  698,  698,  771,  696,  696,  696,  696,  696,
      696,  696,  837,  771,  749,  771,  698,  698,  698,  698,
      698,  698,  698,  698,  837,  730,  699,  851,  851,  853,

      854,  855,  856,  794,  730,  699,  730,  730,  857,  749,
      750,  750,  794,  860,  794,  861,  699,  862,  801,  801,
      863,  864,  865,  866,  750,  750,  750,  750,  750,  750,
      750,  750,  801,  801,  801,  801,  801,  801,  801,  803,
      803,  867,  868,  869,  870,  871,  872,  873,  874,  875,
      876,  877,  878,  803,  803,  803,  803,  803,  803,  803,
      803,  879,  880,  881,  882,  883,  884,  885,  886,  887,
      890,  891,  892,  893,  894,  895,  896,  897,  898,  899,
      902,  903,  904,  906,  907,  909,  910,  911,  912,  913,
      914,  915,  917,  918,  919,  920,  921,  922,  925,  926,

      927,  930,  931,  932,  933,  934,  935,  936,  937,  938,
      939,  940,  941,  942,  943,  944,  947,  939,  948,  949,
      952,  953,  954,  955,  956,  957,  958,  959,  960,  961,
      962,  963,  964,  965,  966,  969,  970,  971,  972,  973,
      976,  977,  980,  981,  971,  982,  984,  985,  986,  988,
      989,  990,  995,  996,  997,  998,  999, 1000, 1001, 1002,
     1003, 1004, 1005, 1006,  999, 1008, 1009, 1010, 1011, 1012,
     1013, 1014, 1015, 1016, 1018, 1017, 1019, 1022, 1023, 1024,
     1025, 1016, 1017, 1027, 1030, 1031, 1032, 1035,  970, 1038,
     1034, 1039, 1040, 1031, 1032, 1041,  972, 1034, 1043, 1044,

     1046, 1047, 1048, 1049, 1051, 1052, 1053, 1044, 1054, 1047,
     1057, 1058, 1059,  998, 1060, 1062, 1054, 1063, 1064, 1067,
     1059, 1068, 1060, 1069, 1070, 1071, 1064, 1072, 1068, 1073,
     1069, 1074, 1075,  806,  805,  804,  797,  796,  793, 1074,
     1075,  792,  791,  790,  789, 1035,  788,  787,  785,  784,
      783,  782,  781,  780,  779,  778,  777,  776, 1046,  775,
      774,  773,  770,  769,  768,  767,  766,  765, 1070, 1071,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1081, 1081,

     1081,  764, 1081, 1082, 1082, 1082, 1082, 1082, 1083, 1083,
      763, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1084, 1084,  762,  761, 1084,  760, 1084, 1085, 1085,  759,
      758, 1085,  757, 1085, 1086, 1086,  756,  755, 1086,  754,
     1086, 1087, 1087,  753,  752, 1087,  748, 1087, 1088, 1088,
      746, 1088,  745,  744,  743,  742,  741,  740, 1088, 1089,
     1089, 1089, 1089, 1089, 1090, 1090,  739, 1090,  738,  737,
      736,  735,  734,  733, 1090, 1091, 1091, 1091, 1091, 1091,
      732,  731,  725,  723,  722,  721,  720,  719,  716,  715,
      714,  713,  712,  711,  710,  709,  708,  707,  706,  705,

      704,  703,  701,  693,  692,  687,  686,  683,  681,  680,
      679,  678,  677,  676,  675,  674,  670,  669,  668,  666,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  650,  645,  644,  643,  642,  639,  638,  637,
      635,  634,  632,  631,  630,  629,  628,  627,  622,  621,
      619,  618,  617,  616,  615,  613,  612,  611,  610,  608,
      607,  606,  604,  603,  599,  598,  597,  596,  595,  591,
      579,  578,  577,  576,  575,  574,  573,  571,  570,  569,
      568,  567,  566,  565,  564,  561,  560,  557,  551,  550,
      548,  547,  546,  543,  540,  539,  538,  537,  526,  525,

      524,  523,  521,  520,  519,  518,  517,  513,  508,  507,
      506,  504,  503,  501,  500,  498,  497,  496,  495,  494,
      492,  491,  486,  485,  483,  482,  481,  480,  479,  478,
      477,  476,  475,  474,  473,  472,  471,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  459,  458,  457,  456,
      455,  454,  453,  449,  445,  444,  443,  442,  439,  437,
      436,  426,  424,  420,  419,  418,  417,  416,  415,  414,
      412,  411,  409,  405,  403,  402,  401,  396,  395,  394,
      393,  392,  391,  390,  385,  383,  382,  381,  380,  379,
      378,  377,  376,  375,  372,  371,  370,  369,  368,  367,

      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  341,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  328,  324,  322,  321,  320,  319,
      315,  313,  312,  311,  310,  309,  308,  307,  306,  302,
      301,  299,  298,  297,  296,  295,  293,  292,  287,  286,
      279,  278,  277,  276,  275,  274,  273,  272,  270,  269,
      268,  267,  266,  264,  263,  262,  261,  260,  259,  258,
      257,  256,  255,  254,  253,  252,  251,  250,  249,  248,
      247,  246,  244,  243,  242,  241,  240,  239,  238,  237,

      236,  235,  234,  232,  231,  230,  229,  228,  227,  225,
      224,  223,  222,  221,  220,  219,  218,  217,  216,  215,
      213,  212,  211,  210,  209,  208,  207,  206,  205,  204,
      203,  202,  201,  199,  198,  197,  196,  194,  193,  192,
      191,  190,  189,  187,  181,  180,  176,  175,  168,  167,
      166,  165,  158,  157,  155,  154,  153,  149,  148,  147,
      146,  145,  144,  141,  140,  138,  137,  135,  134,  132,
      130,  129,  128,  126,  125,  124,  122,  121,  119,  118,
      117,  116,  115,  114,  113,  110,  109,  108,  107,  106,
      105,  104,  103,  102,  100,   99,   98,   97,   96,   95,

       94,   92,   91,   87,   83,   82,   81,   78,   76,   52,
       38,   32,   22,   18,   14,   12,   11,    7,    6,    5,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./glsl/glsl_lexer.ll"
#line 2 "./glsl/glsl_lexer.ll"
/*
 * Copyright © 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <ctype.h>
#include <limits.h>
#include "util/strtod.h"
#include "ast.h"
#include "glsl_parser_extras.h"
#include "glsl_parser.h"

static int classify_identifier(struct _mesa_glsl_parse_state *, const char *);

#ifdef _MSC_VER
#define YY_NO_UNISTD_H
#endif

#define YY_NO_INPUT
#define YY_USER_ACTION						\
   do {								\
      yylloc->first_column = yycolumn + 1;			\
      yylloc->first_line = yylloc->last_line = yylineno + 1;	\
      yycolumn += yyleng;					\
      yylloc->last_column = yycolumn + 1;			\
   } while(0);

#define YY_USER_INIT yylineno = 0; yycolumn = 0; yylloc->source = 0;

/* A macro for handling reserved words and keywords across language versions.
 *
 * Certain words start out as identifiers, become reserved words in
 * later language revisions, and finally become language keywords.
 * This may happen at different times in desktop GLSL and GLSL ES.
 *
 * For example, consider the following lexer rule:
 * samplerBuffer       KEYWORD(130, 0, 140, 0, SAMPLERBUFFER)
 *
 * This means that "samplerBuffer" will be treated as:
 * - a keyword (SAMPLERBUFFER token)         ...in GLSL >= 1.40
 * - a reserved word - error                 ...in GLSL >= 1.30
 * - an identifier                           ...in GLSL <  1.30 or GLSL ES
 */
#define KEYWORD(reserved_glsl, reserved_glsl_es,			\
                allowed_glsl, allowed_glsl_es, token)			\
   KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,			\
                    allowed_glsl, allowed_glsl_es, false, token)

/**
 * Like the KEYWORD macro, but the word is also treated as a keyword
 * if the given boolean expression is true.
 */
#define KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,		\
                         allowed_glsl, allowed_glsl_es,			\
                         alt_expr, token)				\
   do {									\
      if (yyextra->is_version(allowed_glsl, allowed_glsl_es)		\
          || (alt_expr)) {						\
	 return token;							\
      } else if (yyextra->is_version(reserved_glsl,			\
                                     reserved_glsl_es)) {		\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
	 /* We're not doing linear_strdup here, to avoid an implicit    \
	  * call on strlen() for the length of the string, as this is   \
	  * already found by flex and stored in yyleng */               \
	 void *mem_ctx = yyextra->linalloc;				\
         char *id = (char *) linear_alloc_child(mem_ctx, yyleng + 1);   \
         memcpy(id, yytext, yyleng + 1);                                \
         yylval->identifier = id;                                       \
	 return classify_identifier(yyextra, yytext);			\
      }									\
   } while (0)

/**
 * A macro for handling keywords that have been present in GLSL since
 * its origin, but were changed into reserved words in GLSL 3.00 ES.
 */
#define DEPRECATED_ES_KEYWORD(token)					\
   do {									\
      if (yyextra->is_version(0, 300)) {				\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
         return token;							\
      }									\
   } while (0)

static int
literal_integer(char *text, int len, struct _mesa_glsl_parse_state *state,
		YYSTYPE *lval, YYLTYPE *lloc, int base)
{
   bool is_uint = (text[len - 1] == 'u' ||
		   text[len - 1] == 'U');
   bool is_long = (text[len - 1] == 'l' || text[len - 1] == 'L');
   const char *digits = text;

   if (is_long)
      is_uint = (text[len - 2] == 'u' && text[len - 1] == 'l') ||
                (text[len - 2] == 'U' && text[len - 1] == 'L');
   /* Skip "0x" */
   if (base == 16)
      digits += 2;

   unsigned long long value = strtoull(digits, NULL, base);

   if (is_long)
      lval->n64 = (int64_t)value;
   else
      lval->n = (int)value;

   if (is_long && !is_uint && base == 10 && value > (uint64_t)LLONG_MAX + 1) {
      /* Tries to catch unintentionally providing a negative value. */
      _mesa_glsl_warning(lloc, state,
                         "signed literal value `%s' is interpreted as %lld",
                         text, lval->n64);
   } else if (!is_long && value > UINT_MAX) {
      /* Note that signed 0xffffffff is valid, not out of range! */
      if (state->is_version(130, 300)) {
	 _mesa_glsl_error(lloc, state,
			  "literal value `%s' out of range", text);
      } else {
	 _mesa_glsl_warning(lloc, state,
			    "literal value `%s' out of range", text);
      }
   } else if (base == 10 && !is_uint && (unsigned)value > (unsigned)INT_MAX + 1) {
      /* Tries to catch unintentionally providing a negative value.
       * Note that -2147483648 is parsed as -(2147483648), so we don't
       * want to warn for INT_MAX.
       */
      _mesa_glsl_warning(lloc, state,
			 "signed literal value `%s' is interpreted as %d",
			 text, lval->n);
   }
   if (is_long)
      return is_uint ? UINT64CONSTANT : INT64CONSTANT;
   else
      return is_uint ? UINTCONSTANT : INTCONSTANT;
}

#define LITERAL_INTEGER(base) \
   literal_integer(yytext, yyleng, yyextra, yylval, yylloc, base)

#line 1534 "glsl/glsl_lexer.cpp"
#line 175 "./glsl/glsl_lexer.ll"
	/* Note: When adding any start conditions to this list, you must also
	 * update the "Internal compiler error" catch-all rule near the end of
	 * this file. */

#line 1540 "glsl/glsl_lexer.cpp"

#define INITIAL 0
#define PP 1
#define PRAGMA 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct _mesa_glsl_parse_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 187 "./glsl/glsl_lexer.ll"


#line 1828 "glsl/glsl_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1078 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1077 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 189 "./glsl/glsl_lexer.ll"
;
	YY_BREAK
/* Preprocessor tokens. */ 
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 192 "./glsl/glsl_lexer.ll"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 193 "./glsl/glsl_lexer.ll"
{ BEGIN PP; return VERSION_TOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 194 "./glsl/glsl_lexer.ll"
{ BEGIN PP; return EXTENSION; }
	YY_BREAK
case 5:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 195 "./glsl/glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;

                                   /* From GLSL 3.30 and GLSL ES on, after processing the
                                    * line directive (including its new-line), the implementation
                                    * will behave as if it is compiling at the line number passed
                                    * as argument. It was line number + 1 in older specifications.
                                    */
                                   if (yyextra->is_version(330, 100))
                                      yylineno--;

				   yylloc->source = strtol(ptr, NULL, 0);
				}
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 219 "./glsl/glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;

                                   /* From GLSL 3.30 and GLSL ES on, after processing the
                                    * line directive (including its new-line), the implementation
                                    * will behave as if it is compiling at the line number passed
                                    * as argument. It was line number + 1 in older specifications.
                                    */
                                   if (yyextra->is_version(330, 100))
                                      yylineno--;
				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 241 "./glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_ON;
				}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 245 "./glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_OFF;
				}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 249 "./glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_ON;
				}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 253 "./glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_OFF;
				}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 257 "./glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_INVARIANT_ALL;
				}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 261 "./glsl/glsl_lexer.ll"
{ BEGIN PRAGMA; }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 263 "./glsl/glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 264 "./glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 266 "./glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 267 "./glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 268 "./glsl/glsl_lexer.ll"
return COLON;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 269 "./glsl/glsl_lexer.ll"
{
				   /* We're not doing linear_strdup here, to avoid an implicit call
				    * on strlen() for the length of the string, as this is already
				    * found by flex and stored in yyleng
				    */
                                    void *mem_ctx = yyextra->linalloc;
                                    char *id = (char *) linear_alloc_child(mem_ctx, yyleng + 1);
                                    memcpy(id, yytext, yyleng + 1);
                                    yylval->identifier = id;
				   return IDENTIFIER;
				}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 280 "./glsl/glsl_lexer.ll"
{
				    yylval->n = strtol(yytext, NULL, 10);
				    return INTCONSTANT;
				}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 284 "./glsl/glsl_lexer.ll"
{
				    yylval->n = 0;
				    return INTCONSTANT;
				}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 288 "./glsl/glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; return EOL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 289 "./glsl/glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 291 "./glsl/glsl_lexer.ll"
{ yylineno++; yycolumn = 0; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 293 "./glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(ATTRIBUTE);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 294 "./glsl/glsl_lexer.ll"
return CONST_TOK;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 295 "./glsl/glsl_lexer.ll"
return BOOL_TOK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 296 "./glsl/glsl_lexer.ll"
return FLOAT_TOK;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 297 "./glsl/glsl_lexer.ll"
return INT_TOK;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 298 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UINT_TOK);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 300 "./glsl/glsl_lexer.ll"
return BREAK;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 301 "./glsl/glsl_lexer.ll"
return CONTINUE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 302 "./glsl/glsl_lexer.ll"
return DO;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 303 "./glsl/glsl_lexer.ll"
return WHILE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 304 "./glsl/glsl_lexer.ll"
return ELSE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 305 "./glsl/glsl_lexer.ll"
return FOR;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 306 "./glsl/glsl_lexer.ll"
return IF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 307 "./glsl/glsl_lexer.ll"
return DISCARD;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 308 "./glsl/glsl_lexer.ll"
return RETURN;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 310 "./glsl/glsl_lexer.ll"
return BVEC2;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 311 "./glsl/glsl_lexer.ll"
return BVEC3;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 312 "./glsl/glsl_lexer.ll"
return BVEC4;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 313 "./glsl/glsl_lexer.ll"
return IVEC2;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 314 "./glsl/glsl_lexer.ll"
return IVEC3;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 315 "./glsl/glsl_lexer.ll"
return IVEC4;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 316 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC2);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 317 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC3);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 318 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC4);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 319 "./glsl/glsl_lexer.ll"
return VEC2;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 320 "./glsl/glsl_lexer.ll"
return VEC3;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 321 "./glsl/glsl_lexer.ll"
return VEC4;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 322 "./glsl/glsl_lexer.ll"
return MAT2X2;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 323 "./glsl/glsl_lexer.ll"
return MAT3X3;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 324 "./glsl/glsl_lexer.ll"
return MAT4X4;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 325 "./glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X2);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 326 "./glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X3);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 327 "./glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X4);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 328 "./glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X2);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 329 "./glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X3);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 330 "./glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X4);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 331 "./glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X2);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 332 "./glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X3);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 333 "./glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X4);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 335 "./glsl/glsl_lexer.ll"
return IN_TOK;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 336 "./glsl/glsl_lexer.ll"
return OUT_TOK;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 337 "./glsl/glsl_lexer.ll"
return INOUT_TOK;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 338 "./glsl/glsl_lexer.ll"
return UNIFORM;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 339 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 0, 430, 310, yyextra->ARB_shader_storage_buffer_object_enable, BUFFER);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 340 "./glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(VARYING);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 341 "./glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, CENTROID);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 342 "./glsl/glsl_lexer.ll"
KEYWORD(120, 100, 120, 100, INVARIANT);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 343 "./glsl/glsl_lexer.ll"
KEYWORD(130, 100, 130, 300, FLAT);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 344 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SMOOTH);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 345 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, NOPERSPECTIVE);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 346 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 300, 400, 320, yyextra->has_tessellation_shader(), PATCH);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 348 "./glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER1D);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 349 "./glsl/glsl_lexer.ll"
return SAMPLER2D;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 350 "./glsl/glsl_lexer.ll"
return SAMPLER3D;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 351 "./glsl/glsl_lexer.ll"
return SAMPLERCUBE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 352 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, SAMPLER1DARRAY);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 353 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLER2DARRAY);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 354 "./glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER1DSHADOW);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 355 "./glsl/glsl_lexer.ll"
return SAMPLER2DSHADOW;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 356 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLERCUBESHADOW);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 357 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, SAMPLER1DARRAYSHADOW);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 358 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLER2DARRAYSHADOW);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 359 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, ISAMPLER1D);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 360 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER2D);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 361 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER3D);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 362 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLERCUBE);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 363 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, ISAMPLER1DARRAY);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 364 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER2DARRAY);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 365 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, USAMPLER1D);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 366 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER2D);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 367 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER3D);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 368 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLERCUBE);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 369 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, USAMPLER1DARRAY);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 370 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER2DARRAY);
	YY_BREAK
/* additional keywords in ARB_texture_multisample, included in GLSL 1.50 */
/* these are reserved but not defined in GLSL 3.00 */
/* [iu]sampler2DMS are defined in GLSL ES 3.10 */
case 98:
YY_RULE_SETUP
#line 375 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 310, yyextra->ARB_texture_multisample_enable, SAMPLER2DMS);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 376 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 310, yyextra->ARB_texture_multisample_enable, ISAMPLER2DMS);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 377 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 310, yyextra->ARB_texture_multisample_enable, USAMPLER2DMS);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 378 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 320, yyextra->ARB_texture_multisample_enable || yyextra->OES_texture_storage_multisample_2d_array_enable, SAMPLER2DMSARRAY);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 379 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 320, yyextra->ARB_texture_multisample_enable || yyextra->OES_texture_storage_multisample_2d_array_enable, ISAMPLER2DMSARRAY);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 380 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 320, yyextra->ARB_texture_multisample_enable || yyextra->OES_texture_storage_multisample_2d_array_enable, USAMPLER2DMSARRAY);
	YY_BREAK
/* keywords available with ARB_texture_cube_map_array_enable extension on desktop GLSL */
case 104:
YY_RULE_SETUP
#line 383 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 310, 400, 320, yyextra->ARB_texture_cube_map_array_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, SAMPLERCUBEARRAY);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 384 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 310, 400, 320, yyextra->ARB_texture_cube_map_array_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, ISAMPLERCUBEARRAY);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 385 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 310, 400, 320, yyextra->ARB_texture_cube_map_array_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, USAMPLERCUBEARRAY);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 386 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 310, 400, 320, yyextra->ARB_texture_cube_map_array_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, SAMPLERCUBEARRAYSHADOW);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 388 "./glsl/glsl_lexer.ll"
{
			  if (yyextra->OES_EGL_image_external_enable)
			     return SAMPLEREXTERNALOES;
			  else
			     return IDENTIFIER;
		}
	YY_BREAK
/* keywords available with ARB_gpu_shader5 */
case 109:
YY_RULE_SETUP
#line 396 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 310, 400, 320, yyextra->ARB_gpu_shader5_enable || yyextra->EXT_gpu_shader5_enable || yyextra->OES_gpu_shader5_enable, PRECISE);
	YY_BREAK
/* keywords available with ARB_shader_image_load_store */
case 110:
YY_RULE_SETUP
#line 399 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE1D);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 400 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE2D);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 401 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE3D);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 402 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DRECT);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 403 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGECUBE);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 404 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, IMAGEBUFFER);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 405 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE1DARRAY);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 406 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE2DARRAY);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 407 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, IMAGECUBEARRAY);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 408 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DMS);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 409 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DMSARRAY);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 410 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE1D);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 411 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE2D);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 412 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE3D);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 413 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DRECT);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 414 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGECUBE);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 415 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, IIMAGEBUFFER);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 416 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE1DARRAY);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 417 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DARRAY);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 418 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, IIMAGECUBEARRAY);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 419 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DMS);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 420 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DMSARRAY);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 421 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE1D);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 422 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE2D);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 423 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE3D);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 424 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DRECT);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 425 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGECUBE);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 426 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, UIMAGEBUFFER);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 427 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE1DARRAY);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 428 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DARRAY);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 429 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, UIMAGECUBEARRAY);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 430 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DMS);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 431 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DMSARRAY);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 432 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DSHADOW);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 433 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DSHADOW);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 434 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DARRAYSHADOW);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 435 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DARRAYSHADOW);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 437 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, COHERENT);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 438 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, VOLATILE);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 439 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, RESTRICT);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 440 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, READONLY);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 441 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, WRITEONLY);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 443 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_atomic_counters_enable, ATOMIC_UINT);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 445 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(430, 310, 430, 310, yyextra->ARB_compute_shader_enable, SHARED);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 447 "./glsl/glsl_lexer.ll"
return STRUCT;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 448 "./glsl/glsl_lexer.ll"
return VOID_TOK;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 450 "./glsl/glsl_lexer.ll"
{
		  if ((yyextra->is_version(140, 300))
		      || yyextra->AMD_conservative_depth_enable
		      || yyextra->ARB_conservative_depth_enable
		      || yyextra->ARB_explicit_attrib_location_enable
		      || yyextra->ARB_explicit_uniform_location_enable
                      || yyextra->has_separate_shader_objects()
		      || yyextra->ARB_uniform_buffer_object_enable
		      || yyextra->ARB_fragment_coord_conventions_enable
                      || yyextra->ARB_shading_language_420pack_enable
                      || yyextra->ARB_compute_shader_enable
                      || yyextra->ARB_tessellation_shader_enable) {
		      return LAYOUT_TOK;
		   } else {
		      /* We're not doing linear_strdup here, to avoid an implicit call
		       * on strlen() for the length of the string, as this is already
		       * found by flex and stored in yyleng
		       */
                      void *mem_ctx = yyextra->linalloc;
                      char *id = (char *) linear_alloc_child(mem_ctx, yyleng + 1);
                      memcpy(id, yytext, yyleng + 1);
                      yylval->identifier = id;
		      return classify_identifier(yyextra, yytext);
		   }
		}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 476 "./glsl/glsl_lexer.ll"
return INC_OP;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 477 "./glsl/glsl_lexer.ll"
return DEC_OP;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 478 "./glsl/glsl_lexer.ll"
return LE_OP;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 479 "./glsl/glsl_lexer.ll"
return GE_OP;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 480 "./glsl/glsl_lexer.ll"
return EQ_OP;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 481 "./glsl/glsl_lexer.ll"
return NE_OP;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 482 "./glsl/glsl_lexer.ll"
return AND_OP;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 483 "./glsl/glsl_lexer.ll"
return OR_OP;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 484 "./glsl/glsl_lexer.ll"
return XOR_OP;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 485 "./glsl/glsl_lexer.ll"
return LEFT_OP;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 486 "./glsl/glsl_lexer.ll"
return RIGHT_OP;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 488 "./glsl/glsl_lexer.ll"
return MUL_ASSIGN;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 489 "./glsl/glsl_lexer.ll"
return DIV_ASSIGN;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 490 "./glsl/glsl_lexer.ll"
return ADD_ASSIGN;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 491 "./glsl/glsl_lexer.ll"
return MOD_ASSIGN;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 492 "./glsl/glsl_lexer.ll"
return LEFT_ASSIGN;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 493 "./glsl/glsl_lexer.ll"
return RIGHT_ASSIGN;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 494 "./glsl/glsl_lexer.ll"
return AND_ASSIGN;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 495 "./glsl/glsl_lexer.ll"
return XOR_ASSIGN;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 496 "./glsl/glsl_lexer.ll"
return OR_ASSIGN;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 497 "./glsl/glsl_lexer.ll"
return SUB_ASSIGN;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 499 "./glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(10);
			}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 502 "./glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(16);
			}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 505 "./glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(8);
			}
	YY_BREAK
case 181:
#line 510 "./glsl/glsl_lexer.ll"
case 182:
#line 511 "./glsl/glsl_lexer.ll"
case 183:
#line 512 "./glsl/glsl_lexer.ll"
case 184:
YY_RULE_SETUP
#line 512 "./glsl/glsl_lexer.ll"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    char suffix = yytext[strlen(yytext) - 1];
			    if (!state->is_version(120, 300) &&
			        (suffix == 'f' || suffix == 'F')) {
			        _mesa_glsl_warning(yylloc, state,
			                           "Float suffixes are invalid in GLSL 1.10");
			    }
			    yylval->real = _mesa_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 185:
#line 525 "./glsl/glsl_lexer.ll"
case 186:
#line 526 "./glsl/glsl_lexer.ll"
case 187:
#line 527 "./glsl/glsl_lexer.ll"
case 188:
YY_RULE_SETUP
#line 527 "./glsl/glsl_lexer.ll"
{
			    if (!yyextra->is_version(400, 0) &&
			        !yyextra->ARB_gpu_shader_fp64_enable)
			        return ERROR_TOK;
			    yylval->dreal = _mesa_strtod(yytext, NULL);
			    return DOUBLECONSTANT;
			}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 535 "./glsl/glsl_lexer.ll"
{
			    yylval->n = 1;
			    return BOOLCONSTANT;
			}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 539 "./glsl/glsl_lexer.ll"
{
			    yylval->n = 0;
			    return BOOLCONSTANT;
			}
	YY_BREAK
/* Reserved words in GLSL 1.10. */
case 191:
YY_RULE_SETUP
#line 546 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ASM);
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 547 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CLASS);
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 548 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNION);
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 549 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ENUM);
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 550 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TYPEDEF);
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 551 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TEMPLATE);
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 552 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, THIS);
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 553 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 140, 300, yyextra->ARB_uniform_buffer_object_enable, PACKED_TOK);
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 554 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, GOTO);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 555 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, SWITCH);
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 556 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, DEFAULT);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 557 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INLINE_TOK);
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 558 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NOINLINE);
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 559 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, PUBLIC_TOK);
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 560 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, STATIC);
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 561 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERN);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 562 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERNAL);
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 563 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INTERFACE);
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 564 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, LONG_TOK);
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 565 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SHORT_TOK);
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 566 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DOUBLE_TOK);
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 567 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HALF);
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 568 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FIXED_TOK);
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 569 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNSIGNED);
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 570 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INPUT_TOK);
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 571 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, OUTPUT);
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 572 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC2);
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 573 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC3);
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 574 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC4);
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 575 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DVEC2);
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 576 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DVEC3);
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 577 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DVEC4);
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 578 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X2);
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 579 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X3);
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 580 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X4);
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 581 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X2);
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 582 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X3);
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 583 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X4);
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 584 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X2);
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 585 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X3);
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 586 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X4);
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 587 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X2);
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 588 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X3);
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 589 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X4);
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 590 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC2);
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 591 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC3);
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 592 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC4);
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 593 "./glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER2DRECT);
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 594 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SAMPLER3DRECT);
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 595 "./glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER2DRECTSHADOW);
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 596 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SIZEOF);
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 597 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CAST);
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 598 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NAMESPACE);
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 599 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, USING);
	YY_BREAK
/* Additional reserved words in GLSL 1.20. */
case 245:
YY_RULE_SETUP
#line 602 "./glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, LOWP);
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 603 "./glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, MEDIUMP);
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 604 "./glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, HIGHP);
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 605 "./glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, PRECISION);
	YY_BREAK
/* Additional reserved words in GLSL 1.30. */
case 249:
YY_RULE_SETUP
#line 608 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, CASE);
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 609 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, COMMON);
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 610 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, PARTITION);
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 611 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, ACTIVE);
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 612 "./glsl/glsl_lexer.ll"
KEYWORD(130, 100, 0, 0, SUPERP);
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 613 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 140, 320, yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, SAMPLERBUFFER);
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 614 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, FILTER);
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 615 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 0, 140, 0, yyextra->ARB_uniform_buffer_object_enable && !yyextra->es_shader, ROW_MAJOR);
	YY_BREAK
/* Additional reserved words in GLSL 1.40 */
case 257:
YY_RULE_SETUP
#line 618 "./glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, ISAMPLER2DRECT);
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 619 "./glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, USAMPLER2DRECT);
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 620 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(140, 300, 140, 320, yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, ISAMPLERBUFFER);
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 621 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(140, 300, 140, 320, yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, USAMPLERBUFFER);
	YY_BREAK
/* Additional reserved words in GLSL ES 3.00 */
case 261:
YY_RULE_SETUP
#line 624 "./glsl/glsl_lexer.ll"
KEYWORD(420, 300, 0, 0, RESOURCE);
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 625 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 300, 400, 320, yyextra->ARB_gpu_shader5_enable || yyextra->OES_shader_multisample_interpolation_enable, SAMPLE);
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 626 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 300, 400, 0, yyextra->ARB_shader_subroutine_enable, SUBROUTINE);
	YY_BREAK
/* Additional words for ARB_gpu_shader_int64 */
case 264:
YY_RULE_SETUP
#line 629 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable, INT64_TOK);
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 630 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable, I64VEC2);
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 631 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable, I64VEC3);
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 632 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable, I64VEC4);
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 634 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable, UINT64_TOK);
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 635 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable, U64VEC2);
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 636 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable, U64VEC3);
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 637 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable, U64VEC4);
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 639 "./glsl/glsl_lexer.ll"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    void *ctx = state->linalloc;
			    if (state->es_shader && yyleng > 1024) {
			       _mesa_glsl_error(yylloc, state,
			                        "Identifier `%s' exceeds 1024 characters",
			                        yytext);
			    } else {
			      /* We're not doing linear_strdup here, to avoid an implicit call
			       * on strlen() for the length of the string, as this is already
			       * found by flex and stored in yyleng
			       */
                              char *id = (char *) linear_alloc_child(ctx, yyleng + 1);
                              memcpy(id, yytext, yyleng + 1);
                              yylval->identifier = id;
			    }
			    return classify_identifier(state, yytext);
			}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 658 "./glsl/glsl_lexer.ll"
{ struct _mesa_glsl_parse_state *state = yyextra;
			  state->is_field = true;
			  return DOT_TOK; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 662 "./glsl/glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 664 "./glsl/glsl_lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3415 "glsl/glsl_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PRAGMA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1078 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1078 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1077);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 664 "./glsl/glsl_lexer.ll"


int
classify_identifier(struct _mesa_glsl_parse_state *state, const char *name)
{
   if (state->is_field) {
      state->is_field = false;
      return FIELD_SELECTION;
   }
   if (state->symbols->get_variable(name) || state->symbols->get_function(name))
      return IDENTIFIER;
   else if (state->symbols->get_type(name))
      return TYPE_IDENTIFIER;
   else
      return NEW_IDENTIFIER;
}

void
_mesa_glsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)
{
   yylex_init_extra(state, & state->scanner);
   yy_scan_string(string, state->scanner);
}

void
_mesa_glsl_lexer_dtor(struct _mesa_glsl_parse_state *state)
{
   yylex_destroy(state->scanner);
}

