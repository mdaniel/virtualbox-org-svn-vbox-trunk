# Copyright Â© 2015 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

# Due to a what seems like a autoconf bug, we must ensure that the genaration
# rules must be outside of any AM_CONDITIONALs. Otherwise they will be commented
# out and we'll fail at `make dist'
vulkan_api_xml = $(top_srcdir)/src/vulkan/registry/vk.xml
vk_android_native_buffer_xml = $(top_srcdir)/src/vulkan/registry/vk_android_native_buffer.xml

vulkan/anv_entrypoints.c: vulkan/anv_entrypoints_gen.py \
			  vulkan/anv_extensions.py \
			  $(vulkan_api_xml) \
			  $(vk_android_native_buffer_xml)
	$(MKDIR_GEN)
	$(AM_V_GEN)$(PYTHON2) $(srcdir)/vulkan/anv_entrypoints_gen.py \
		--xml $(vulkan_api_xml) \
		--xml $(vk_android_native_buffer_xml) \
		--outdir $(builddir)/vulkan
vulkan/anv_entrypoints.h: vulkan/anv_entrypoints.c

vulkan/anv_extensions.c: vulkan/anv_extensions.py \
			 $(vulkan_api_xml) \
			 $(vk_android_native_buffer_xml)
	$(MKDIR_GEN)
	$(AM_V_GEN)$(PYTHON2) $(srcdir)/vulkan/anv_extensions.py \
		--xml $(vulkan_api_xml) \
		--xml $(vk_android_native_buffer_xml) \
		--out $@

BUILT_SOURCES += $(VULKAN_GENERATED_FILES)
CLEANFILES += \
	$(VULKAN_GENERATED_FILES) \
	vulkan/dev_icd.json \
	vulkan/intel_icd.@host_cpu@.json

EXTRA_DIST += \
	$(top_srcdir)/include/vulkan/vk_icd.h \
	vulkan/anv_entrypoints_gen.py \
	vulkan/anv_extensions.py \
	vulkan/anv_icd.py \
	vulkan/TODO

vulkan/dev_icd.json : vulkan/anv_extensions.py vulkan/anv_icd.py
	$(AM_V_GEN)$(PYTHON2) $(srcdir)/vulkan/anv_icd.py \
		--lib-path="${abs_top_builddir}/${LIB_DIR}" --out $@

vulkan/intel_icd.@host_cpu@.json : vulkan/anv_extensions.py vulkan/anv_icd.py
	$(AM_V_GEN)$(PYTHON2) $(srcdir)/vulkan/anv_icd.py \
		--lib-path="${libdir}" --out $@

if HAVE_INTEL_VULKAN

vulkan_includedir = $(includedir)/vulkan

noinst_HEADERS += \
	$(top_srcdir)/include/vulkan/vk_platform.h \
	$(top_srcdir)/include/vulkan/vulkan.h

vulkan_include_HEADERS = \
	$(top_srcdir)/include/vulkan/vulkan_intel.h

lib_LTLIBRARIES += vulkan/libvulkan_intel.la

check_LTLIBRARIES += vulkan/libvulkan-test.la

VULKAN_PER_GEN_LIBS = \
	vulkan/libanv-gen7.la \
	vulkan/libanv-gen75.la \
	vulkan/libanv-gen8.la \
	vulkan/libanv-gen9.la \
	vulkan/libanv-gen10.la

noinst_LTLIBRARIES += $(VULKAN_PER_GEN_LIBS)

VULKAN_CFLAGS = \
	$(AM_CFLAGS) \
	-msse2

VULKAN_CPPFLAGS = \
	-I$(top_srcdir)/src/compiler \
	-I$(top_srcdir)/src/intel/compiler \
	-I$(top_srcdir)/include/drm-uapi \
	-I$(top_builddir)/src/intel/vulkan \
	-I$(top_srcdir)/src/intel/vulkan \
	-I$(top_srcdir)/src/vulkan/wsi \
	-I$(top_builddir)/src/vulkan/util \
	-I$(top_srcdir)/src/vulkan/util \
	$(AM_CPPFLAGS) \
	$(LIBDRM_CFLAGS)

vulkan_libanv_gen7_la_CFLAGS = $(VULKAN_CFLAGS)
vulkan_libanv_gen7_la_CPPFLAGS = $(VULKAN_CPPFLAGS) -DGEN_VERSIONx10=70
vulkan_libanv_gen7_la_SOURCES = $(VULKAN_GEN7_FILES)

vulkan_libanv_gen75_la_CFLAGS = $(VULKAN_CFLAGS)
vulkan_libanv_gen75_la_CPPFLAGS = $(VULKAN_CPPFLAGS) -DGEN_VERSIONx10=75
vulkan_libanv_gen75_la_SOURCES = $(VULKAN_GEN75_FILES)

vulkan_libanv_gen8_la_CFLAGS = $(VULKAN_CFLAGS)
vulkan_libanv_gen8_la_CPPFLAGS = $(VULKAN_CPPFLAGS) -DGEN_VERSIONx10=80
vulkan_libanv_gen8_la_SOURCES = $(VULKAN_GEN8_FILES)

vulkan_libanv_gen9_la_CFLAGS = $(VULKAN_CFLAGS)
vulkan_libanv_gen9_la_CPPFLAGS = $(VULKAN_CPPFLAGS) -DGEN_VERSIONx10=90
vulkan_libanv_gen9_la_SOURCES = $(VULKAN_GEN9_FILES)

vulkan_libanv_gen10_la_CFLAGS = $(VULKAN_CFLAGS)
vulkan_libanv_gen10_la_CPPFLAGS = $(VULKAN_CPPFLAGS) -DGEN_VERSIONx10=100
vulkan_libanv_gen10_la_SOURCES = $(VULKAN_GEN10_FILES)

VULKAN_SOURCES = \
	$(VULKAN_GENERATED_FILES) \
	$(VULKAN_FILES)

VULKAN_LIB_DEPS = \
	vulkan/libvulkan_common.la \
	$(VULKAN_PER_GEN_LIBS) \
	compiler/libintel_compiler.la \
	common/libintel_common.la \
	isl/libisl.la \
	blorp/libblorp.la \
	$(top_builddir)/src/vulkan/libvulkan_util.la \
	$(top_builddir)/src/vulkan/libvulkan_wsi.la \
	$(top_builddir)/src/compiler/nir/libnir.la \
	$(top_builddir)/src/util/libmesautil.la \
	$(LIBDRM_LIBS) \
	$(PTHREAD_LIBS) \
	$(DLOPEN_LIBS) \
	-lm

if HAVE_PLATFORM_ANDROID
VULKAN_CPPFLAGS += $(ANDROID_CPPFLAGS)
VULKAN_CFLAGS += $(ANDROID_CFLAGS)
VULKAN_LIB_DEPS += $(ANDROID_LIBS)
VULKAN_SOURCES += $(VULKAN_ANDROID_FILES)
endif

if HAVE_PLATFORM_X11
VULKAN_CPPFLAGS += \
	$(XCB_DRI3_CFLAGS) \
	-DVK_USE_PLATFORM_XCB_KHR \
	-DVK_USE_PLATFORM_XLIB_KHR

VULKAN_SOURCES += $(VULKAN_WSI_X11_FILES)

VULKAN_LIB_DEPS += $(XCB_DRI3_LIBS)
endif


if HAVE_PLATFORM_WAYLAND
VULKAN_CPPFLAGS += \
	$(WAYLAND_CLIENT_CFLAGS) \
	-DVK_USE_PLATFORM_WAYLAND_KHR

VULKAN_SOURCES += $(VULKAN_WSI_WAYLAND_FILES)

VULKAN_LIB_DEPS += $(WAYLAND_CLIENT_LIBS)
endif

noinst_LTLIBRARIES += vulkan/libvulkan_common.la
vulkan_libvulkan_common_la_SOURCES = $(VULKAN_SOURCES)
vulkan_libvulkan_common_la_CFLAGS = $(VULKAN_CFLAGS)
vulkan_libvulkan_common_la_CPPFLAGS = $(VULKAN_CPPFLAGS)

nodist_EXTRA_vulkan_libvulkan_intel_la_SOURCES = dummy.cpp
vulkan_libvulkan_intel_la_SOURCES = $(VULKAN_GEM_FILES)
vulkan_libvulkan_intel_la_LIBADD = $(VULKAN_LIB_DEPS)
vulkan_libvulkan_intel_la_CFLAGS = $(VULKAN_CFLAGS)
vulkan_libvulkan_intel_la_CPPFLAGS = $(VULKAN_CPPFLAGS)

vulkan_libvulkan_intel_la_LDFLAGS = \
	-shared \
	-module \
	-no-undefined \
	-avoid-version \
	-Wl,--build-id=sha1 \
	$(BSYMBOLIC) \
	$(GC_SECTIONS) \
	$(LD_NO_UNDEFINED)

icdconfdir = @VULKAN_ICD_INSTALL_DIR@
icdconf_DATA = vulkan/intel_icd.@host_cpu@.json
# The following is used for development purposes, by setting VK_ICD_FILENAMES.
noinst_DATA += vulkan/dev_icd.json

# Libvulkan with dummy gem. Used for unit tests.
vulkan_libvulkan_test_la_SOURCES = $(VULKAN_GEM_STUB_FILES)
vulkan_libvulkan_test_la_LIBADD = $(VULKAN_LIB_DEPS)
vulkan_libvulkan_test_la_CFLAGS = $(VULKAN_CFLAGS)
vulkan_libvulkan_test_la_CPPFLAGS = $(VULKAN_CPPFLAGS)

include $(top_srcdir)/install-lib-links.mk

noinst_HEADERS += \
	vulkan/tests/state_pool_test_helper.h

VULKAN_TESTS = \
	vulkan/tests/block_pool_no_free \
	vulkan/tests/state_pool_no_free \
	vulkan/tests/state_pool_free_list_only \
	vulkan/tests/state_pool

VULKAN_TEST_LDADD = \
	vulkan/libvulkan-test.la \
	$(PTHREAD_LIBS) -lm -lstdc++

check_PROGRAMS += $(VULKAN_TESTS)
TESTS += $(VULKAN_TESTS)

vulkan_tests_block_pool_no_free_CPPFLAGS = $(VULKAN_CPPFLAGS)
vulkan_tests_block_pool_no_free_LDADD = $(VULKAN_TEST_LDADD)

vulkan_tests_state_pool_no_free_CPPFLAGS = $(VULKAN_CPPFLAGS)
vulkan_tests_state_pool_no_free_LDADD = $(VULKAN_TEST_LDADD)

vulkan_tests_state_pool_free_list_only_CPPFLAGS = $(VULKAN_CPPFLAGS)
vulkan_tests_state_pool_free_list_only_LDADD = $(VULKAN_TEST_LDADD)

vulkan_tests_state_pool_CPPFLAGS = $(VULKAN_CPPFLAGS)
vulkan_tests_state_pool_LDADD = $(VULKAN_TEST_LDADD)

endif
