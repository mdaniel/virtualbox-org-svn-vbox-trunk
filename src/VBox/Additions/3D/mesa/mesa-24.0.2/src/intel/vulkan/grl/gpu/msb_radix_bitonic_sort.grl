//
// Copyright (C) 2009-2021 Intel Corporation
//
// SPDX-License-Identifier: MIT
//
//

module msb_radix_bitonic_sort;

kernel_module msb_radix_sort ("morton_msb_radix_bitonic_sort.cl")
{
    links lsc_intrinsics;

    kernel opencl_debug_print                                    < kernelFunction="debug_print_kernel">;
    kernel opencl_check_bls                                      < kernelFunction="check_bls_sort">;

    kernel opencl_bottom_level_sort_single_wg                    < kernelFunction="sort_morton_codes_bottom_level_single_wg">;

    kernel opencl_build_morton_kernel_sort_msb_init              < kernelFunction="sort_morton_codes_msb_begin">;

    kernel opencl_build_morton_kernel_sort_msb_scheduler         < kernelFunction="scheduler">;

    kernel opencl_build_morton_kernel_sort_bottom_level          < kernelFunction="sort_morton_codes_bottom_level">;

    kernel opencl_build_morton_kernel_sort_msb_count_items       < kernelFunction="sort_morton_codes_msb_count_items">;
    kernel opencl_build_morton_kernel_sort_msb_bin_items         < kernelFunction="sort_morton_codes_msb_bin_items">;

    kernel opencl_build_morton_kernel_sort_batched_bls_dispatch  < kernelFunction="sort_morton_codes_batched_BLS_dispatch">;
}


const MSB_RADIX_NUM_VCONTEXTS  = 8;
const BOTTOM_LEVEL_SORT_THRESHOLD  = 512;

struct MSBRadixScheduler
{
    dword num_wgs_msb;
    dword num_wgs_bls;

    dword scheduler_postsync;
    dword _pad1;
};

struct MSBRadixArgs
{
    qword p_scheduler;
    qword p_num_primitives;
};




struct BatchedBLSDispatchEntry
{
    qword p_data_buffer;
    qword num_elements; // number of elements in p_data_buffer
};




metakernel add_bls_dispatch_init(qword p_storage)
{
    define REG_numWgs         REG14;
    define REG_p_storage      REG15;

    REG_numWgs = 0;
    REG_p_storage = p_storage;
}




// basically this code does:
// bls_args_for_dispatches[dispatchID] = { bls_new_pointer, numPrimitives };
// dispatchId++;
//
metakernel add_bls_dispatch(
    qword p_data,
    qword p_num_primitives
)
{
    define C_1                                REG0;
    define C_8                                REG1;

    define C_MIN_PRIMREFS                     REG2;

    define REG_p_data                         REG3;
    define REG_num_prims                      REG4;
    define REG_no_dispatch                    REG5;

    define REG_numWgs                         REG14;
    define REG_p_storage                      REG15;

    C_MIN_PRIMREFS = 2;

    REG_num_prims = 0;
    REG_num_prims.lo = load_dword(p_num_primitives);

    REG_no_dispatch  = REG_num_prims < C_MIN_PRIMREFS;

    goto l_finish if(REG_no_dispatch.lo);

    C_1 = 1;
    C_8 = 8;

    // pseudocode: BatchedBLSDispatchEntry.p_data_buffer = p_data
    REG_p_data = p_data;
    store_qword( REG_p_storage, REG_p_data ); // store the data pointer

    REG_p_storage = REG_p_storage + C_8; // point to next member in BatchedBLSDispatchEntry struct

    // pseudocode: BatchedBLSDispatchEntry.num_elements = *p_num_primitives
    store_qword( REG_p_storage, REG_num_prims );

    REG_p_storage = REG_p_storage + C_8; // point to next BatchedBLSDispatchEntry instance

    REG_numWgs = REG_numWgs + C_1;

l_finish:

}




metakernel batched_bls_dispatch(
    qword private_mem
)
{
    define REG_numWgs REG14;

    DISPATCHDIM_X = REG_numWgs;
    DISPATCHDIM_Y = 1;
    DISPATCHDIM_Z = 1;

    dispatch_indirect opencl_build_morton_kernel_sort_batched_bls_dispatch args(private_mem);
}




metakernel sort_bottom_level(
    qword build_globals,
    qword input,
    qword p_num_primitives)
{
    define REG_num_prims       REG0;
    define C_MIN_PRIMREFS      REG1;
    define REG_no_dispatch     REG2;

    REG_num_prims  = load_dword( p_num_primitives );

    C_MIN_PRIMREFS = 2;

    REG_no_dispatch  = REG_num_prims < C_MIN_PRIMREFS;

    goto l_finish if(REG_no_dispatch.lo);

    dispatch opencl_bottom_level_sort_single_wg (1, 1, 1) args(build_globals, input, input);

l_finish:

}




metakernel sort(
    qword build_globals,
    qword input,
    qword tmp,
    MSBRadixArgs sort_args)
{
    define REG_num_prims       REG0;
    {
        define C_MIN_PRIMREFS           REG1;
        define C_MAX_PRIMREFS           REG2;
        define REG_no_dispatch          REG3;
        define REG_dispatch_single_wg   REG4;
    
        REG_num_prims  = load_dword( sort_args.p_num_primitives );
        C_MIN_PRIMREFS = 2;
        C_MAX_PRIMREFS = BOTTOM_LEVEL_SORT_THRESHOLD;
    
        REG_no_dispatch  = REG_num_prims < C_MIN_PRIMREFS;
        REG_dispatch_single_wg = REG_num_prims < C_MAX_PRIMREFS;
    
        goto l_sort_finish if(REG_no_dispatch.lo);
        goto l_dispatch_single_wg if(REG_dispatch_single_wg.lo);
        goto l_full_sort;
    }

l_dispatch_single_wg:

    {
        dispatch opencl_bottom_level_sort_single_wg (1, 1, 1) args(build_globals, input, input);
        goto l_sort_finish;
    }

l_full_sort:

    define p_scheduler                  sort_args.p_scheduler;
    define p_scheduler_postsync        (sort_args.p_scheduler + offsetof(MSBRadixScheduler.scheduler_postsync) );
    define p_num_wgs_bls               (sort_args.p_scheduler + offsetof(MSBRadixScheduler.num_wgs_bls) );

    define REG_scheduler_postsync    REG3;
    REG_scheduler_postsync = p_scheduler_postsync;

    define C_0    REG4;
    define C_8    REG5;
    define C_255  REG6;
    C_0 = 0;
    C_8 = 8;
    C_255 = 255;

    store_qword( REG_scheduler_postsync, C_0 ); // initialize scheduler semaphore

    REG_num_prims = REG_num_prims + C_255;
    REG_num_prims = REG_num_prims >> C_8;

    DISPATCHDIM_X = REG_num_prims.lo;
    DISPATCHDIM_Y = 1;
    DISPATCHDIM_Z = 1;

    control( cs_store_fence ); // commit the semaphore write 

    // initialize the whole execution
    dispatch opencl_build_morton_kernel_sort_msb_init (MSB_RADIX_NUM_VCONTEXTS, 1, 1) args(build_globals, sort_args.p_scheduler, input, tmp)
        postsync store_dword( p_scheduler_postsync, 1 );

    // wait on count_items kernel
    semaphore_wait while( *p_scheduler_postsync != 1 );

    dispatch_indirect opencl_build_morton_kernel_sort_msb_count_items args(sort_args.p_scheduler)
        postsync store_dword( p_scheduler_postsync, 2 );
        
    // wait on count_items kernel
    semaphore_wait while( *p_scheduler_postsync != 2 );

    dispatch_indirect opencl_build_morton_kernel_sort_msb_bin_items args(sort_args.p_scheduler, input)
        postsync store_dword( p_scheduler_postsync, 0 );

    define C_MASK_HI REG4;
    C_MASK_HI = 0x00000000ffffffff;

    l_build_loop:
    {
        semaphore_wait while( *p_scheduler_postsync != 0 );
        {
            dispatch opencl_build_morton_kernel_sort_msb_scheduler(1,1,1) args( sort_args.p_scheduler, input, tmp )
                postsync store_dword( p_scheduler_postsync, 1 );
        
            // wait on scheduler kernel
            semaphore_wait while( *p_scheduler_postsync != 1 );
        }

        // load and process the scheduler results
        define REG_wg_counts    REG0;
        define REG_num_msb_wgs  REG0.lo;
        define REG_num_bls_wgs  REG0.hi;
        define REG_p_scheduler  REG1;
        define REG_no_msb_wgs   REG2;
        {
            REG_p_scheduler = p_scheduler;
            REG_wg_counts    = load_qword( REG_p_scheduler ); 

            REG_no_msb_wgs = REG_wg_counts  & C_MASK_HI;
            REG_no_msb_wgs = REG_no_msb_wgs == 0;
        }

        // dispatch new bls WGs
        DISPATCHDIM_X = REG_num_bls_wgs;
        dispatch_indirect opencl_build_morton_kernel_sort_bottom_level args( p_scheduler, input );

        // jump out if there are no msb WGs
        goto l_sort_finish if (REG_no_msb_wgs);

        DISPATCHDIM_X = REG_num_msb_wgs;
        dispatch_indirect opencl_build_morton_kernel_sort_msb_count_items args(sort_args.p_scheduler)
            postsync store_dword( p_scheduler_postsync, 2 );
        
        // wait on count_items kernel
        semaphore_wait while( *p_scheduler_postsync != 2 );

        dispatch_indirect opencl_build_morton_kernel_sort_msb_bin_items args(sort_args.p_scheduler, input)
            postsync store_dword( p_scheduler_postsync, 0 );

        // wait till all BLS finished launching
        semaphore_wait while( *p_num_wgs_bls != 0 );

        goto l_build_loop;
    }

l_sort_finish:

}
