<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright Â© 2022 Mary Guillemard
SPDX-License-Identifier: MIT
-->
<isa>
  <enum name="#reg">
    <value val="0" display="zero"/>
    <value val="1" display="r1"/>
    <value val="2" display="r2"/>
    <value val="3" display="r3"/>
    <value val="4" display="r4"/>
    <value val="5" display="r5"/>
    <value val="6" display="r6"/>
    <value val="7" display="r7"/>
  </enum>

  <enum name="#op">
    <value val="0" display="ALU_REG"/>
    <value val="1" display="ADD_IMM"/>
    <value val="2" display="MERGE"/>
    <value val="3" display="BFE_LSL_IMM"/>
    <value val="4" display="BFE_LSL_REG"/>
    <value val="5" display="STATE"/>
    <!-- TODO: There seems to be something here (no fault is generated) -->
    <value val="6" display="UNK6"/>
    <value val="7" display="BRANCH"/>
  </enum>

  <enum name="#alu-op">
    <value val="0"  display="ADD"/>
    <value val="1"  display="ADDC"/>
    <value val="2"  display="SUB"/>
    <value val="3"  display="SUBB"/>
    <!-- value val="4"  display="reserved4"/ -->
    <!-- value val="5"  display="reserved5"/ -->
    <!-- value val="6"  display="reserved6"/ -->
    <!-- value val="7"  display="reserved7"/ -->
    <value val="8"  display="XOR"/>
    <value val="9"  display="OR"/>
    <value val="10" display="AND"/>
    <value val="11" display="AND_NOT"/>
    <value val="12" display="NAND"/>
    <!-- value val="13"  display="reserved13"/ -->
    <!-- value val="14"  display="reserved14"/ -->
    <!-- value val="15"  display="reserved15"/ -->
    <!-- value val="16"  display="reserved16"/ -->
    <!-- value val="17"  display="reserved17"/ -->
    <!-- value val="18"  display="reserved18"/ -->
    <!-- value val="19"  display="reserved19"/ -->
    <!-- value val="20"  display="reserved20"/ -->
    <!-- value val="21"  display="reserved21"/ -->
    <!-- value val="22"  display="reserved22"/ -->
    <!-- value val="23"  display="reserved23"/ -->
    <!-- value val="24"  display="reserved24"/ -->
    <!-- value val="25"  display="reserved25"/ -->
    <!-- value val="26"  display="reserved26"/ -->
    <!-- value val="27"  display="reserved27"/ -->
    <!-- value val="28"  display="reserved28"/ -->
    <!-- value val="29"  display="reserved29"/ -->
    <!-- value val="30"  display="reserved30"/ -->
    <!-- value val="31"  display="reserved31"/ -->
  </enum>

  <enum name="#assign-op">
    <value val="0"  display="LOAD"/>
    <value val="1"  display="MOVE"/>
    <value val="2"  display="MOVE_SET_MADDR"/>
    <value val="3"  display="LOAD_EMIT"/>
    <value val="4"  display="MOVE_EMIT"/>
    <value val="5"  display="LOAD_SET_MADDR"/>
    <value val="6"  display="MOVE_SET_MADDR_LOAD_EMIT"/>
    <value val="7"  display="MOVE_SET_MADDR_LOAD_EMIT_HIGH"/>
  </enum>

  <bitset name="#alu-instruction" size="18">
    <display>
        {NAME} {ASSIGN_OP} {ALU_OP} {DST} {SRC0} {SRC1}
    </display>

    <field name="ASSIGN_OP" low="0" high="2" type="#assign-op"/>
    <pattern low="3" high="3">x</pattern>
    <field name="DST" low="4" high="6" type="#reg"/>
    <field name="SRC0" low="7" high="9" type="#reg"/>
    <field name="SRC1" low="10" high="12" type="#reg"/>
    <field name="ALU_OP" low="13" high="17" type="#alu-op"/>

    <encode type="struct mme_fermi_inst">
      <map name="ASSIGN_OP">src.assign_op</map>
      <map name="ALU_OP">src.alu_op</map>
      <map name="DST">src.dst</map>
      <map name="SRC0">src.src[0]</map>
      <map name="SRC1">src.src[1]</map>
    </encode>
  </bitset>

  <bitset name="#src0-imm-encoding" size="28">
    <display>
        {NAME} {ASSIGN_OP} {DST} {SRC0} {IMM}
    </display>

    <field name="ASSIGN_OP" low="0" high="2" type="#assign-op"/>
    <pattern low="3" high="3">x</pattern>
    <field name="DST" low="4" high="6" type="#reg"/>
    <field name="SRC0" low="7" high="9" type="#reg"/>
    <field name="IMM" low="10" high="27" type="int"/>

    <encode type="struct mme_fermi_inst">
      <map name="ASSIGN_OP">src.assign_op</map>
      <map name="DST">src.dst</map>
      <map name="SRC0">src.src[0]</map>
      <map name="IMM">src.imm</map>
    </encode>
  </bitset>

  <bitset name="#bf-encoding" size="28">
    <display>
        {NAME} {ASSIGN_OP} {DST} {SRC0} {SRC1} {BF_SRC_BIT} {BF_SIZE} {BF_DST_BIT}
    </display>

    <field name="ASSIGN_OP" low="0" high="2" type="#assign-op"/>
    <pattern low="3" high="3">x</pattern>
    <field name="DST" low="4" high="6" type="#reg"/>
    <field name="SRC0" low="7" high="9" type="#reg"/>
    <field name="SRC1" low="10" high="12" type="#reg"/>
    <field name="BF_SRC_BIT" low="13" high="17" type="uint"/>
    <field name="BF_SIZE" low="18" high="22" type="uint"/>
    <field name="BF_DST_BIT" low="23" high="27" type="uint"/>

    <encode type="struct mme_fermi_inst">
      <map name="ASSIGN_OP">src.assign_op</map>
      <map name="DST">src.dst</map>
      <map name="SRC0">src.src[0]</map>
      <map name="SRC1">src.src[1]</map>
      <map name="BF_SRC_BIT">src.bitfield.src_bit</map>
      <map name="BF_SIZE">src.bitfield.size</map>
      <map name="BF_DST_BIT">src.bitfield.dst_bit</map>
    </encode>
  </bitset>

  <bitset name="#branch-encoding" size="28">
    <display>
      {NO_DELAY} B{NOT_ZERO} {SRC0} {IMM}
    </display>

    <field name="NOT_ZERO" pos="0" type="bool" display="Z"/>
    <field name="NO_DELAY" pos="1" type="bool" display="NO_DELAY"/>
    <pattern low="2" high="6">xxxxx</pattern>
    <field name="SRC0" low="7" high="9" type="#reg"/>
    <field name="IMM" low="10" high="27" type="int"/>

    <encode type="struct mme_fermi_inst">
      <map name="NOT_ZERO">src.branch.not_zero</map>
      <map name="NO_DELAY">src.branch.no_delay</map>
      <map name="SRC0">src.src[0]</map>
      <map name="IMM">src.imm</map>
    </encode>
  </bitset>

  <bitset name="#instruction" size="32">
    <doc>
      Encoding of a NVIDIA Fermi Macro Method instruction. All instructions are 32b.
    </doc>
    <display>
        {END_NEXT} {OP} {ALU_OP_ENCODING} {SRC0_IMM_ENCODING} {BF_ENCODING} {BRANCH_ENCODING}
    </display>
    <field name="OP" low="0" high="3" type="#op"/>
    <pattern low="4" high="6">xxx</pattern>
    <field name="END_NEXT" pos="7" type="bool" display="(end-next)"/>
    <pattern low="8" high="31">xxxxxxxxxxxxxxxxxxxxxxxx</pattern>

    <override>
      <expr>{OP} == 0</expr>
      <field name="ALU_OP_ENCODING" low="4" high="21" type="#alu-instruction" />
    </override>

    <override>
      <expr>{OP} == 1 || {OP} == 5</expr>
      <field name="SRC0_IMM_ENCODING" low="4" high="31" type="#src0-imm-encoding" />
    </override>

    <override>
      <expr>{OP} == 2 || {OP} == 3 || {OP} == 4</expr>
      <field name="BF_ENCODING" low="4" high="31" type="#bf-encoding" />
    </override>

    <override>
      <expr>{OP} == 7</expr>
      <field name="BRANCH_ENCODING" low="4" high="31" type="#branch-encoding" />
    </override>

    <encode type="struct mme_fermi_inst">
      <map name="END_NEXT">src.end_next</map>
      <map name="OP">src.op</map>
      <map name="ALU_OP_ENCODING">src</map>
      <map name="SRC0_IMM_ENCODING">src</map>
      <map name="BF_ENCODING">src</map>
      <map name="BRANCH_ENCODING">src</map>
    </encode>
  </bitset>
</isa>
