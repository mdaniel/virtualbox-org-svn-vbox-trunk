#!/usr/bin/env python
# -*- coding: utf-8 -*-
# $Id$

"""
Generates forwards from a .def file.
"""

__copyright__ = \
"""
Copyright (C) 2018-2024 Oracle and/or its affiliates.

This file is part of VirtualBox base platform packages, as
available from https://www.virtualbox.org.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation, in version 3 of the
License.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, see <https://www.gnu.org/licenses>.

SPDX-License-Identifier: GPL-3.0-only
"""
__version__ = "$Revision$"

# Standard python imports"""
import sys


def GenerateForwarders(asArgs):

    # Get list of functions.
    asNames      = []
    asParamSizes = []
    with open(asArgs[1], "r") as oInFile:
        for line in oInFile.readlines():
            line = line.strip()
            if len(line) > 0 and line[0] != ';' and line != 'EXPORTS':
                # Parse 'glAccum = glAccum@8'
                words = line.split('=', 1)

                # Function name
                asNames.append(words[0].strip())

                # Size of arguments in bytes
                words = words[1].split('@')
                asParamSizes.append(words[1].strip())


    #
    # Assembler forwarders
    #
    asLines = [
        '; AUTOGENERATED - DO NOT EDIT!',
        '%include "iprt/asmdefs.mac"',
        '',
        ';;;; Enable ICD_LAZY_LOAD to lazy load the ICD DLL - bird 2024-10-24: it should work again now',
        '; %define ICD_LAZY_LOAD 1',
        '',
        '%ifdef ICD_LAZY_LOAD',
        'extern NAME(g_hmodICD)',
        'extern NAME(VBoxLoadICD)',
        '',
        'BEGINPROC VBoxLoadICDWrapper'
        '    ; Check if loaded',
        '    mov   xAX, [NAME(g_hmodICD) xWrtRIP]',
        '    test  xAX, xAX',
        '    jz    .needs_loading',
        '    ret',
        '    ; Save parameter registers',
        '.needs_loading:',
        ' %ifdef RT_ARCH_AMD64',
        '    push    rcx',
        '    push    rdx',
        '    push    r8',
        '    push    r9',
        '  %ifdef ASM_CALL64_GCC',
        '    push    rsi',
        '    push    rdi',
        '    sub     rsp, 8h',
        '  %else',
        '    sub     rsp, 28h',
        '  %endif',
        ' %endif',
        '    call  NAME(VBoxLoadICD)',
        '    ; Restore parameter registers',
        ' %ifdef RT_ARCH_AMD64',
        '  %ifdef ASM_CALL64_GCC',
        '    add     rsp, 8h',
        '    pop     rdi',
        '    pop     rsi',
        '  %else',
        '    add     rsp, 28h',
        '  %endif',
        '    pop     r9',
        '    pop     r8',
        '    pop     rdx',
        '    pop     rcx',
        ' %endif',
        '    ret',
        'ENDPROC   VBoxLoadICDWrapper',
        '%endif ; ICD_LAZY_LOAD',
    ];

    for index in range(len(asNames)):
        sFnNm = asNames[index]
        cbRet = asParamSizes[index]
        asLines.extend([
            '',
            'BEGINPROC_EXPORTED %s' % sFnNm,
            '    extern NAME(pfn_%s)' % sFnNm,
            ';    int3',
            '%ifdef ICD_LAZY_LOAD',
            '    call  VBoxLoadICDWrapper',
            '%endif',
            '    mov   xAX, [NAME(pfn_%s) xWrtRIP]' % sFnNm,
            '    test  xAX, xAX',
            '    jz    .return',
            '    jmp   xAX',
            '.return:',
            '%ifdef RT_ARCH_AMD64',
            '    ret',
            '%else ; X86',
            '    ret   %s' % cbRet,
            '%endif',
            'ENDPROC %s' % sFnNm,
        ]);

    #
    # Write it out.
    #
    with open(asArgs[2], "w") as oOutFile:
        oOutFile.write('\n'.join(asLines));

    return 0;

if __name__ == '__main__':
    sys.exit(GenerateForwarders(sys.argv));

