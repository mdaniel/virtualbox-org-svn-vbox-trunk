# $Id$
## @file
# Makefile for the Windows guest miniport driver.
#

#
# Copyright (C) 2011-2017 Oracle Corporation
#
# This file is part of VirtualBox Open Source Edition (OSE), as
# available from http://www.virtualbox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualBox OSE distribution. VirtualBox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#

SUB_DEPTH = ../../../../../../..
include $(KBUILD_PATH)/subheader.kmk

#
# VBoxVideo - Windows Guest Additions XPDM Miniport Video Driver
#
# Note. This has to run on NT4! (*_NT4 => *_W2K3 when targeting 64-bit.)
#
SYSMODS += VBoxVideo
VBoxVideo_TEMPLATE      = VBOXGUESTR0
VBoxVideo_SDKS          = ReorderCompilerIncs $(VBOX_WINDDK_GST_NT4)
VBoxVideo_DEFS          = VBOX_XPDM_MINIPORT VBOX_WITH_8BPP_MODES VBOX_USING_$(VBOX_WINDDK_GST_NT4)
VBoxVideo_DEFS         += LOG_TO_BACKDOOR #LOG_ENABLED
VBoxVideo_DEFS         += VBOX_SVN_REV=$(VBOX_SVN_REV)
ifdef VBOX_WITH_VIDEOHWACCEL
 VBoxVideo_DEFS        += VBOX_WITH_VIDEOHWACCEL
endif
VBoxVideo_INCS          = ../../../include .. . $(VBOX_GRAPHICS_INCS)
VBoxVideo_LDFLAGS.x86   = /Entry:DriverEntry@8
VBoxVideo_LDFLAGS.amd64 = /Entry:DriverEntry
VBoxVideo_SOURCES       = \
	xpdm/VBoxMPDriver.cpp \
	xpdm/VBoxMP.def \
	xpdm/VBoxMP.rc \
	xpdm/VBoxMPVideoPortAPI.cpp \
	xpdm/VBoxMPInternal.cpp \
	xpdm/VBoxMPRegistry.cpp \
	xpdm/VBoxMPIOCTL.cpp \
	common/VBoxMPUtils.cpp \
	common/VBoxMPCommon.cpp \
	common/VBoxMPHGSMI.cpp \
	common/VBoxMPVidModes.cpp \
	$(PATH_ROOT)/src/VBox/Additions/common/VBoxVideo/HGSMIBase.cpp \
	$(PATH_ROOT)/src/VBox/Additions/common/VBoxVideo/HGSMIBuffers.cpp \
	$(PATH_ROOT)/src/VBox/Additions/common/VBoxVideo/HGSMIHostCmd.cpp \
	$(PATH_ROOT)/src/VBox/Additions/common/VBoxVideo/Modesetting.cpp
VBoxVideo_LIBS          = \
	$(PATH_SDK_$(VBOX_WINDDK_GST_NT4)_LIB)/videoprt.lib \
	$(PATH_SDK_$(VBOX_WINDDK_GST_NT4)_LIB)/ntoskrnl.lib \
	$(PATH_SDK_$(VBOX_WINDDK_GST_NT4)_LIB)/hal.lib \
	$(VBOX_LIB_VBGL_R0) \
	$(VBOX_LIB_IPRT_GUEST_R0_NT4) \
	$(VBOX_PATH_ADDITIONS_LIB)/HGSMIGuestR0Lib$(VBOX_SUFF_LIB)
VBoxVideo_LIBS.x86      = \
	$(PATH_SDK_$(VBOX_WINDDK_GST_NT4)_LIB)/exsup.lib

ifdef VBOX_WITH_WDDM
 #
 # VBoxWddm - Windows Guest Additions WDDM Miniport Video Driver
 #
 SYSMODS += VBoxWddm
 VBoxWddm_TEMPLATE         = VBOXGUESTR0
 VBoxWddm_SDKS             = $(VBOX_WINDDK_GST_W8)
 VBoxWddm_DEFS            += VBOX_WDDM_MINIPORT VBOX_WITH_WDDM VBOX_WITH_HGCM
 # WIN9X_COMPAT_SPINLOCK inlines KeInitializeSpinLock in W8 DDK (Windows 7 or older ntoskrnl does not export it).
 VBoxWddm_DEFS            += WIN9X_COMPAT_SPINLOCK
 VBoxWddm_DEFS            += VBOX_WITH_8BPP_MODES
 ifdef VBOX_WITH_VIDEOHWACCEL
  VBoxWddm_DEFS           += VBOX_WITH_VIDEOHWACCEL
 endif
 ifdef VBOXWDDM_WITH_VBVA
  VBoxWddm_DEFS           += VBOXWDDM_WITH_VBVA
  VBoxWddm_DEFS           += VBOXWDDM_RENDER_FROM_SHADOW
  ifdef VBOXVDMA_WITH_VBVA
   VBoxWddm_DEFS          += VBOXVDMA_WITH_VBVA
  endif
 endif
 ifdef VBOX_WITH_VDMA
  VBoxWddm_DEFS           += VBOX_WITH_VDMA
 endif
 ifdef VBOX_WITH_CRHGSMI
  VBoxWddm_DEFS           += VBOX_WITH_CRHGSMI
 endif
 VBoxWddm_DEFS            += LOG_TO_BACKDOOR
 VBoxWddm_DEFS            += VBOX_SVN_REV=$(VBOX_SVN_REV)
 ifdef VBOX_VDMA_WITH_WATCHDOG
  VBoxWddm_DEFS           += VBOX_VDMA_WITH_WATCHDOG
 endif
 VBoxWddm_INCS            += \
 	../../../include \
 	.. \
 	. \
 	$(VBOX_PATH_CROGL_INCLUDE) \
 	$(VBOX_PATH_CROGL_GENFILES) \
 	$(PATH_ROOT)/src/VBox/GuestHost/OpenGL/packer \
 	$(VBOX_GRAPHICS_INCS)

 VBoxWddm_LDFLAGS.x86     += /Entry:DriverEntry@8
 VBoxWddm_LDFLAGS.amd64   += /Entry:DriverEntry

 VBoxWddm_SOURCES          = \
 	wddm/VBoxMPWddm.cpp \
	wddm/VBoxMPVidPn.cpp \
	wddm/VBoxMPVdma.cpp \
	wddm/VBoxMPShgsmi.cpp \
 	wddm/VBoxMPCm.cpp \
 	wddm/VBoxMPCr.cpp \
 	wddm/VBoxMPMisc.cpp \
 	wddm/VBoxWddm.rc \
 	wddm/VBoxMPRegistry.cpp \
 	wddm/VBoxMPVModes.cpp \
 	common/VBoxMPUtils.cpp \
 	common/VBoxMPCommon.cpp \
 	common/VBoxMPHGSMI.cpp \
 	$(PATH_ROOT)/src/VBox/Additions/common/VBoxVideo/HGSMIBase.cpp \
 	$(PATH_ROOT)/src/VBox/Additions/common/VBoxVideo/HGSMIBuffers.cpp \
 	$(PATH_ROOT)/src/VBox/Additions/common/VBoxVideo/HGSMIHostCmd.cpp \
 	$(PATH_ROOT)/src/VBox/Additions/common/VBoxVideo/VBVABase.cpp \
 	$(PATH_ROOT)/src/VBox/Additions/common/VBoxVideo/Modesetting.cpp

 VBoxWddm_SOURCES         += \
	$(PATH_ROOT)/src/VBox/GuestHost/OpenGL/util/sortarray.cpp

 if defined(VBOX_WITH_CROGL)
   VBoxWddm_SOURCES       += \
	$(PATH_ROOT)/src/VBox/GuestHost/OpenGL/util/vreg.cpp \
 	$(PATH_ROOT)/src/VBox/GuestHost/OpenGL/packer/pack_buffer.c \
 	$(PATH_ROOT)/src/VBox/GuestHost/OpenGL/packer/pack_bounds.c \
 	$(PATH_ROOT)/src/VBox/GuestHost/OpenGL/packer/pack_visibleregion.c \
 	$(PATH_ROOT)/src/VBox/GuestHost/OpenGL/packer/pack_misc.c \
 	$(VBOX_PATH_CROGL_GENFILES)/pack_bounds_swap.c \
 	$(VBOX_PATH_CROGL_GENFILES)/packer.c \
 	wddm/VBoxMPCrUtil.cpp
   VBoxWddm_DEFS          += VBOX_WITH_CROGL
 endif
 ifdef VBOXWDDM_WITH_VBVA
  VBoxWddm_SOURCES        += \
    wddm/VBoxMPVbva.cpp
 endif
 ifdef VBOX_WITH_VIDEOHWACCEL
  VBoxWddm_SOURCES        += \
    wddm/VBoxMPVhwa.cpp
 endif

 VBoxWddm_LIBS             = \
 	$(PATH_SDK_$(VBOX_WINDDK_GST_W8)_LIB)/BufferOverflowK.lib \
 	$(PATH_SDK_$(VBOX_WINDDK_GST_W8)_LIB)/ntoskrnl.lib \
 	$(PATH_SDK_$(VBOX_WINDDK_GST_W8)_LIB)/hal.lib \
 	$(PATH_SDK_$(VBOX_WINDDK_GST_W8)_LIB)/displib.lib \
 	$(VBOX_LIB_VBGL_R0) \
 	$(VBOX_LIB_IPRT_GUEST_R0) \
 	$(VBOX_PATH_ADDITIONS_LIB)/HGSMIGuestR0Lib$(VBOX_SUFF_LIB)

 VBoxWddm_LIBS.x86         = \
 	$(PATH_SDK_$(VBOX_WINDDK_GST_W8)_LIB)/memcmp.lib

endif # VBOX_WITH_WDDM

#
# Signing requires both miniport and display drivers
# so it'd be dealt with in the parent makefile.
#
ifdef VBOX_SIGN_ADDITIONS
 VBoxVideo_INSTTYPE            = none
 VBoxVideo_DEBUG_INSTTYPE      = both
 ifdef VBOX_WITH_WDDM
  VBoxWddm_INSTTYPE            = none
  VBoxWddm_DEBUG_INSTTYPE      = both
 endif
endif # VBOX_SIGN_ADDITIONS

include $(FILE_KBUILD_SUB_FOOTER)

