# $Id$
## @file
# Top-level sub-makefile for the devices, drivers and services.
#

#
# Copyright (C) 2006-2017 Oracle Corporation
#
# This file is part of VirtualBox Open Source Edition (OSE), as
# available from http://www.virtualbox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualBox OSE distribution. VirtualBox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#

SUB_DEPTH = ../../..
include $(KBUILD_PATH)/subheader.kmk

# Make sure our Config.kmk is included.
ifndef VBOX_DEVICES_CONFIG_KMK_INCLUDED
 include $(PATH_SUB_CURRENT)/Config.kmk
endif

# Include sub-makefiles.
include $(PATH_SUB_CURRENT)/testcase/Makefile.kmk
include $(PATH_SUB_CURRENT)/Audio/testcase/Makefile.kmk
include $(PATH_SUB_CURRENT)/Input/testcase/Makefile.kmk
ifdef VBOX_WITH_TESTCASES
 include $(PATH_SUB_CURRENT)/Samples/Makefile.kmk
endif
if defined(VBOX_WITH_INTEL_PXE) || defined(VBOX_ONLY_EXTPACKS)
 include $(PATH_SUB_CURRENT)/PC/PXE/Makefile.kmk
else if defined(VBOX_WITH_PXE_ROM)
 if !defined(VBOX_WITHOUT_IPXE)
  include $(PATH_SUB_CURRENT)/PC/ipxe/Makefile.kmk
 endif
endif
if !defined(VBOX_ONLY_EXTPACKS)         # Goes on almost to the end of the file.
 include $(PATH_SUB_CURRENT)/BiosCommonCode/Makefile.kmk
 include $(PATH_SUB_CURRENT)/PC/BIOS/Makefile.kmk
 include $(PATH_SUB_CURRENT)/Graphics/BIOS/Makefile.kmk

 #
 # Main targets.
 #
 LIBRARIES += ServicesR0
 DLLS      += VBoxDDU VBoxDD VBoxDD2
 SYSMODS   += VBoxDDR0 VBoxDD2R0
 ifdef VBOX_WITH_RAW_MODE
  SYSMODS   += VBoxDDRC VBoxDD2RC
 endif


 #
 # VBoxDDU (shared object)
 #
 VBoxDDU_TEMPLATE         = VBoxR3DllWarnNoPic
 VBoxDDU_NAME             = $(basename $(notdir $(LIB_DDU)))
 VBoxDDU_INST.darwin      = $(INST_DLL) $(INST_TESTCASE)
 VBoxDDU_DEFS             = IN_VBOXDDU
 ifdef VBOX_WITH_VUSB
  VBoxDDU_DEFS           += VBOX_WITH_VUSB
 endif
 ifdef VBOX_WITH_USB
  VBoxDDU_DEFS           += VBOX_WITH_USB IN_USBLIB
  VBoxDDU_SDKS.win        = ReorderCompilerIncs $(VBOX_WINPSDK) $(VBOX_WINDDK)
  if defined(VBOX_WITH_EHCI_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
   VBoxDDU_DEFS          += VBOX_WITH_EHCI_IMPL
  endif
  if defined(VBOX_WITH_XHCI_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
   VBoxDDU_DEFS          += VBOX_WITH_XHCI_IMPL
  endif
 else
  VBoxDDU_SDKS.win        = ReorderCompilerIncs $(VBOX_WINPSDK)
 endif
 VBoxDDU_SOURCES          = \
 	Storage/VSCSI/VSCSIDevice.cpp \
 	Storage/VSCSI/VSCSILun.cpp \
 	Storage/VSCSI/VSCSILunSbc.cpp \
 	Storage/VSCSI/VSCSILunMmc.cpp \
 	Storage/VSCSI/VSCSISense.cpp \
 	Storage/VSCSI/VSCSIIoReq.cpp \
 	Storage/VSCSI/VSCSIVpdPagePool.cpp \
 	build/VBoxDDUDeps.cpp
 ifdef VBOX_WITH_USB
  VBoxDDU_INCS.os2       += \
 	$(PATH_ROOT)/src/VBox/HostDrivers/VBoxUSB/os2
 endif
 VBoxDDU_LIBS             = \
 	$(LIB_RUNTIME) \
 	$(PATH_STAGE_LIB)/StorageLib$(VBOX_SUFF_LIB)
 ifdef VBOX_WITH_USB
  VBoxDDU_LIBS           += \
 	$(PATH_STAGE_LIB)/USBLib$(VBOX_SUFF_LIB)
  VBoxDDU_LIBS.win       += \
 	$(PATH_STAGE_LIB)/VBoxDrvCfg$(VBOX_SUFF_LIB) \
 	$(PATH_SDK_$(VBOX_WINDDK)_LIB)/Newdev.lib
 endif
 VBoxDDU_LDFLAGS.darwin   = -install_name $(VBOX_DYLD_EXECUTABLE_PATH)/VBoxDDU.dylib
 ifdef VBOX_WITH_USB
  VBoxDDU_LDFLAGS.darwin += -framework IOKit
 endif

 VBoxDDU_LDFLAGS.linux    = $(VBOX_GCC_NO_UNDEFINED)
 $(call VBOX_SET_VER_INFO_DLL,VBoxDDU,VirtualBox VMM Devices and Drivers Utilities)

 #
 # VBoxDD (shared object)
 #
 VBoxDD_TEMPLATE         = VBoxR3DllWarnNoPic
 VBoxDD_SDKS.win         = ReorderCompilerIncs $(VBOX_WINPSDK) $(VBOX_WINDDK) VBOX_NTDLL
 Storage/DrvHostDVD.cpp_SDKS.win = ReorderCompilerIncs $(VBOX_WINDDK)
 VBoxDD_INCS             = \
 	build \
 	Network/slirp \
 	$(VBOX_GRAPHICS_INCS)
 VBoxDD_DEFS             = \
 	VBOX_ACPI \
 	VBOX_HGCM_HOST_CODE \
 	$(if $(VBOX_WITH_HGCM),VBOX_WITH_HGCM,) \
 	$(if $(VBOX_BIOS_DMI_FALLBACK),VBOX_BIOS_DMI_FALLBACK,) \
 	VBOX_WITH_DMI_CHASSIS \
 	VBOX_WITH_DMI_OEMSTRINGS
 VBoxDD_DEFS.win         = _WIN32_WINNT=0x0510
 ifeq ($(KBUILD_TARGET_ARCH),x86)
  VBoxDD_DEFS.darwin     = VBOX_WITH_2X_4GB_ADDR_SPACE
 endif
 VBoxDD_SOURCES          = \
 	build/VBoxDD.cpp \
	\
 	Input/DevPS2.cpp \
 	Input/PS2K.cpp \
 	Input/PS2M.cpp \
 	Input/UsbKbd.cpp \
 	Input/UsbMouse.cpp \
 	Bus/DevPCI.cpp \
 	Bus/DevPciIch9.cpp \
 	Bus/MsiCommon.cpp \
 	Bus/MsixCommon.cpp \
	EFI/DevSmc.cpp \
 	Graphics/DevVGA.cpp \
 	Storage/DevATA.cpp \
 	PC/DevPit-i8254.cpp \
 	PC/DevPIC.cpp \
 	PC/DevACPI.cpp \
 	PC/ACPI/VBoxAcpi.cpp \
 	PC/DevRTC.cpp \
 	PC/DevPcBios.cpp \
 	PC/DevFwCommon.cpp \
 	PC/DevPcArch.cpp \
	GIMDev/GIMDev.cpp \
	GIMDev/DrvUDP.cpp \
 	VMMDev/VMMDev.cpp \
 	$(if $(VBOX_WITH_HGCM),VMMDev/VMMDevHGCM.cpp,) \
 	VMMDev/VMMDevTesting.cpp \
 	Network/DevPCNet.cpp \
 	PC/DevDMA.cpp \
 	PC/DevHPET.cpp \
 	PC/DevIoApic.cpp \
 	Storage/DevFdc.cpp \
 	Serial/DevSerial.cpp \
 	Parallel/DevParallel.cpp \
	\
 	Input/DrvKeyboardQueue.cpp \
 	Input/DrvMouseQueue.cpp \
 	Network/DrvIntNet.cpp \
 	Network/DrvDedicatedNic.cpp \
 	PC/DrvACPI.cpp \
 	PC/DrvAcpiCpu.cpp \
 	Serial/DrvChar.cpp \
 	Serial/DrvNamedPipe.cpp \
 	Serial/DrvTCP.cpp \
 	Serial/DrvRawFile.cpp \
 	Storage/Debug.cpp \
 	Storage/DrvVD.cpp \
 	Storage/ATAPIPassthrough.cpp \
 	Storage/IOBufMgmt.cpp \
 	Network/DrvNetSniffer.cpp \
 	Network/Pcap.cpp
 ifn1of ($(KBUILD_TARGET), os2)
  VBoxDD_SOURCES += Storage/DrvHostBase.cpp
 endif
 ifn1of ($(KBUILD_TARGET), os2)
  VBoxDD_SOURCES += Storage/DrvHostDVD.cpp
 endif
 ifn1of ($(KBUILD_TARGET), darwin freebsd os2 solaris)
  VBoxDD_SOURCES += Storage/DrvHostFloppy.cpp
 endif

 ifn1of ($(KBUILD_TARGET), darwin)
  VBoxDD_SOURCES += Storage/HBDMgmt-generic.cpp
 endif

 VBoxDD_SOURCES.darwin += \
 	Storage/HBDMgmt-darwin.cpp \
 	Storage/DrvHostBase-darwin.cpp

 VBoxDD_SOURCES.freebsd += \
 	Storage/DrvHostBase-freebsd.cpp

 VBoxDD_SOURCES.linux += \
 	Storage/DrvHostBase-linux.cpp

 VBoxDD_SOURCES.solaris += \
 	Storage/DrvHostBase-solaris.cpp

 VBoxDD_SOURCES.win += \
 	Storage/DrvHostBase-win.cpp

 #VBoxDD_SOURCES.win += Storage/HBDMgmt-win.cpp #Disabled until remaining issues are sorted out

 VBoxDD_LIBS             = # more later.
 VBoxDD_LDFLAGS.darwin   = -install_name $(VBOX_DYLD_EXECUTABLE_PATH)/VBoxDD.dylib \
 	-framework CoreAudio \
 	-framework AudioUnit \
 	-framework AudioToolbox \
 	-framework IOKit \
 	-framework Carbon \
 	-framework DiskArbitration \
 	-framework SystemConfiguration
 VBoxDD_LDFLAGS.linux    = $(VBOX_GCC_NO_UNDEFINED)

 # --- Tracing bits. ---

 ifdef VBOX_WITH_DTRACE_R3
  VBoxDD_DEFS           += VBOX_WITH_DTRACE
  VBoxDD_USES           += dtrace
  VBoxDD_SOURCES        += build/VBoxDD.d
 endif

 # --- Graphics bits. ---

 ifdef VBOX_WITH_CRHGSMI
  VBoxDD_DEFS           += VBOX_WITH_CRHGSMI
 endif
 ifdef VBOXWDDM_TEST_UHGSMI
  VBoxDD_DEFS           += VBOXWDDM_TEST_UHGSMI
 endif
 ifdef VBOXWDDM_WITH_VBVA
  VBoxDD_DEFS           += VBOXWDDM_WITH_VBVA
 endif
 ifdef VBOX_WITH_VIDEOHWACCEL
  VBoxDD_DEFS           += VBOX_WITH_VIDEOHWACCEL
 endif

 ifdef VBOX_WITH_HGSMI
  VBoxDD_DEFS           += VBOX_WITH_HGSMI
  VBoxDD_SOURCES        += \
 	Graphics/DevVGA_VBVA.cpp \
 	Graphics/HGSMI/HGSMIHost.cpp
  VBoxDD_LIBS           += \
 	$(PATH_STAGE_LIB)/HGSMIHostR3Lib$(VBOX_SUFF_LIB)
 endif

 ifdef VBOX_WITH_WDDM
  VBoxDD_DEFS           += VBOX_WITH_WDDM
  VBoxDD_SOURCES        += \
 	Graphics/HGSMI/SHGSMIHost.cpp
 endif

 ifdef VBOX_WITH_VMSVGA
  VBoxDD_DEFS           += VBOX_WITH_VMSVGA
  VBoxDD_SOURCES        += Graphics/DevVGA-SVGA.cpp
 endif
 ifdef VBOX_WITH_VMSVGA3D
  VBoxDD_DEFS           += VBOX_WITH_VMSVGA3D
  VBoxDD_SOURCES        += \
  	Graphics/DevVGA-SVGA3d.cpp \
  	Graphics/DevVGA-SVGA3d-info.cpp \
  	Graphics/DevVGA-SVGA3d-shared.cpp \
  	Graphics/DevVGA-SVGA3d-savedstate.cpp
  if  "$(KBUILD_TARGET)" == "win" && !defined(VBOX_WITH_VMSVGA3D_USE_OPENGL)
   VBoxDD_DEFS          += VMSVGA3D_DIRECT3D
   VBoxDD_SOURCES       += Graphics/DevVGA-SVGA3d-win.cpp
   VBoxDD_LIBS.win      += d3d9.lib $(PATH_TOOL_$(VBOX_VCC_TOOL)_LIB)/delayimp.lib
   VBoxDD_LDFLAGS.win   += /DELAYLOAD:d3d9.dll
  else
   VBoxDD_DEFS          += VMSVGA3D_OPENGL
   VBoxDD_SOURCES       += \
   	Graphics/DevVGA-SVGA3d-ogl.cpp \
   	$(VBoxDD_0_OUTDIR)/VBoxSVGA3DLazyLoad.asm
   VBoxDD_SOURCES.darwin += \
   	$(VBoxDD_0_OUTDIR)/VBoxSVGA3DObjCLazyLoad.asm
   VBoxDD_CLEAN         += $(VBoxDD_0_OUTDIR)/VBoxSVGA3DLazyLoad.asm
   $$(VBoxDD_0_OUTDIR)/VBoxSVGA3DLazyLoad.asm: $(PATH_SUB_CURRENT)/Graphics/VBoxSVGA3D.def $(VBOX_DEF_2_LAZY_LOAD) | $$(dir $$@)
	$(call MSG_TOOL,VBoxDef2LazyLoad,VBoxDD,$(filter %.def, $^),$@)
	$(QUIET)$(RM) -f -- "$@"
	$(VBOX_DEF_2_LAZY_LOAD) --explicit-load-function --library VBoxSVGA3D --output "$@" $(filter %.def, $^)
   $$(VBoxDD_0_OUTDIR)/VBoxSVGA3DObjCLazyLoad.asm: $(PATH_SUB_CURRENT)/Graphics/VBoxSVGA3DObjC.def $(VBOX_DEF_2_LAZY_LOAD) | $$(dir $$@)
	$(call MSG_TOOL,VBoxDef2LazyLoad,VBoxDD,$(filter %.def, $^),$@)
	$(QUIET)$(RM) -f -- "$@"
	$(VBOX_DEF_2_LAZY_LOAD) --explicit-load-function --library VBoxSVGA3DObjC --output "$@" $(filter %.def, $^)

   VBoxDD_LIBS.linux    += GL X11
   VBoxDD_LIBS.win      += $(PATH_SDK_$(VBOX_WINPSDK)_LIB)/Opengl32.lib
   VBoxDD_LDFLAGS.darwin += -framework OpenGL
   VBoxDD_DEFS.darwin    += VBOX_VMSVGA3D_DUAL_OPENGL_PROFILE
   if 0 # Use the OpenGL 3.2 Core profile (see also VBoxSVGA3D_DEFS.darwin and VBoxSVGA3DObjC_DEFS.darwin).
    VBoxDD_DEFS.darwin   += VBOX_VMSVGA3D_DEFAULT_OGL_PROFILE=3.2 VBOX_VMSVGA3D_OTHER_OGL_PROFILE=2.1
   else
    VBoxDD_DEFS.darwin   += VBOX_VMSVGA3D_DEFAULT_OGL_PROFILE=2.1 VBOX_VMSVGA3D_OTHER_OGL_PROFILE=3.2
   endif
  endif
  if1of ($(VBOX_DEF_MACOSX_VERSION_MIN), 10.6 10.5 10.4)
   Graphics/DevVGA-SVGA3d.cpp_CXXFLAGS.darwin            = -F$(VBOX_PATH_MACOSX_SDK_10_7)/System/Library/Frameworks/
   Graphics/DevVGA-SVGA3d-info.cpp_CXXFLAGS.darwin       = -F$(VBOX_PATH_MACOSX_SDK_10_7)/System/Library/Frameworks/
   Graphics/DevVGA-SVGA3d-shared.cpp_CXXFLAGS.darwin     = -F$(VBOX_PATH_MACOSX_SDK_10_7)/System/Library/Frameworks/
   Graphics/DevVGA-SVGA3d-savedstate.cpp_CXXFLAGS.darwin = -F$(VBOX_PATH_MACOSX_SDK_10_7)/System/Library/Frameworks/
   Graphics/DevVGA-SVGA3d-ogl.cpp_CXXFLAGS.darwin        = -F$(VBOX_PATH_MACOSX_SDK_10_7)/System/Library/Frameworks/
  endif
 endif

 ifdef VBOX_WITH_VDMA
  VBoxDD_DEFS           += VBOX_WITH_VDMA
  VBoxDD_SOURCES        += \
 	Graphics/DevVGA_VDMA.cpp
 endif

 ifdef VBOX_VDMA_WITH_WATCHDOG
  VBoxDD_DEFS           += VBOX_VDMA_WITH_WATCHDOG
 endif

 ifdef VBOX_WITH_PXE_ROM
  VBoxDD_DEFS           += VBOX_WITH_PXE_ROM
 endif

 # --- USB bits. ---

 ifdef VBOX_WITH_USB
  VBoxDD_DEFS           += VBOX_WITH_USB
  VBoxDD_SOURCES        += \
  	USB/vrdp/USBProxyDevice-vrdp.cpp \
  	USB/usbip/USBProxyDevice-usbip.cpp

  VBoxDD_DEFS.darwin    += VUSB_HAVE_USBPROXY_DEVICE
  VBoxDD_SOURCES.darwin += \
 	USB/USBProxyDevice.cpp \
 	USB/darwin/USBProxyDevice-darwin.cpp

  VBoxDD_DEFS.linux     += \
 	VUSB_HAVE_USBPROXY_DEVICE \
 	$(if $(VBOX_WITH_LINUX_COMPILER_H),VBOX_WITH_LINUX_COMPILER_H,) \
 	$(if $(VBOX_USB_WITH_SYSFS),VBOX_USB_WITH_SYSFS,)
  VBoxDD_SOURCES.linux  += \
 	USB/USBProxyDevice.cpp \
 	USB/linux/USBProxyDevice-linux.cpp

  VBoxDD_DEFS.os2       += VUSB_HAVE_USBPROXY_DEVICE
  VBoxDD_INCS.os2       += $(PATH_ROOT)/src/VBox/HostDrivers/VBoxUSB/os2
  VBoxDD_SOURCES.os2    += \
 	USB/USBProxyDevice.cpp \
 	USB/os2/USBProxyDevice-os2.cpp

  VBoxDD_DEFS.win       += VUSB_HAVE_USBPROXY_DEVICE
  VBoxDD_SOURCES.win    += \
 	USB/USBProxyDevice.cpp \
 	USB/win/USBProxyDevice-win.cpp

  VBoxDD_DEFS.solaris   += VUSB_HAVE_USBPROXY_DEVICE
  VBoxDD_SOURCES.solaris+= \
 	USB/USBProxyDevice.cpp \
 	USB/solaris/USBProxyDevice-solaris.cpp

  VBoxDD_DEFS.freebsd   += VUSB_HAVE_USBPROXY_DEVICE
  VBoxDD_SOURCES.freebsd+= \
 	USB/USBProxyDevice.cpp \
 	USB/freebsd/USBProxyDevice-freebsd.cpp

  ifdef VBOX_WITH_SCSI
   VBoxDD_SOURCES       += \
   	Storage/UsbMsd.cpp
  endif

  if defined(VBOX_WITH_EHCI_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
   VBoxDD_DEFS          += VBOX_WITH_EHCI_IMPL
   VBoxDD_SOURCES       += \
 	USB/DevEHCI.cpp
  endif

  if defined(VBOX_WITH_XHCI_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
   VBoxDD_DEFS          += VBOX_WITH_XHCI_IMPL
   VBoxDD_SOURCES       += \
 	USB/DevXHCI.cpp
  endif

  if defined(VBOX_WITH_USB_VIDEO_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
   if1of ($(KBUILD_TARGET), linux)
    VBoxDD_DEFS          += VBOX_WITH_USB_VIDEO_IMPL
    VBoxDD_SOURCES       += \
	$(PATH_ROOT)/src/VBox/ExtPacks/Puel/UsbWebcam/UsbWebcam.cpp \
	$(PATH_ROOT)/src/VBox/ExtPacks/Puel/UsbWebcam/UsbWebcamDesc.cpp \
	$(PATH_ROOT)/src/VBox/ExtPacks/Puel/UsbWebcam/jpggen.cpp \
	$(PATH_ROOT)/src/VBox/ExtPacks/Puel/UsbWebcam/DrvHostWebcam/DrvHostWebcam.cpp \
	$(PATH_ROOT)/src/VBox/ExtPacks/Puel/UsbWebcam/DrvHostWebcam/JPEGEnc.cpp
    $(PATH_ROOT)/src/VBox/ExtPacks/Puel/UsbWebcam/DrvHostWebcam/JPEGEnc.cpp_INCS = \
	$(VBOX_JPEG_INCS)
    VBoxDD_SOURCES.linux += \
	$(PATH_ROOT)/src/VBox/ExtPacks/Puel/UsbWebcam/DrvHostWebcam/HostWebcam-v4l2.cpp
    VBoxDD_LIBS += \
	$(PATH_STAGE_LIB)/VBox-libjpeg$(VBOX_SUFF_LIB)
   endif
  endif

 endif # VBOX_WITH_USB

 ifdef VBOX_WITH_VUSB
  VBoxDD_DEFS           += VBOX_WITH_VUSB
  VBoxDD_SOURCES        += \
 	USB/DevOHCI.cpp \
 	USB/DrvVUSBRootHub.cpp \
 	USB/VUSBDevice.cpp \
 	USB/VUSBSniffer.cpp \
 	USB/VUSBSnifferPcapNg.cpp \
 	USB/VUSBSnifferUsbMon.cpp \
 	USB/VUSBSnifferVmx.cpp \
 	USB/VUSBUrb.cpp \
 	USB/VUSBUrbPool.cpp \
 	USB/VUSBUrbTrace.cpp
 endif

 # --- Networking bits. ---

 ifdef VBOX_WITH_INIP
  ifndef LWIP_SOURCES
   include $(PATH_SUB_CURRENT)/Network/lwip-new/Config.kmk
  endif
  VBoxDD_DEFS           += VBOX_WITH_INIP
  VBoxDD_SOURCES        += \
  	Network/DevINIP.cpp \
  	$(addprefix Network/lwip-new/,$(LWIP_SOURCES))
  VBoxDD_INCS           += \
  	Network \
  	$(addprefix Network/lwip-new/,$(LWIP_INCS))
 endif # VBOX_WITH_INIP

 ifdef VBOX_WITH_E1000
  VBoxDD_DEFS           += VBOX_WITH_E1000
  VBoxDD_SOURCES        += \
 	Network/DevE1000.cpp \
 	Network/DevE1000Phy.cpp \
 	Network/DevEEPROM.cpp
 endif

 ifdef VBOX_WITH_VIRTIO
  VBoxDD_DEFS           += VBOX_WITH_VIRTIO
  VBoxDD_SOURCES        += \
 	VirtIO/Virtio.cpp \
 	Network/DevVirtioNet.cpp
 endif

 ifdef VBOX_WITH_UDPTUNNEL
  VBoxDD_DEFS           += VBOX_WITH_UDPTUNNEL
  VBoxDD_SOURCES        += \
  	Network/DrvUDPTunnel.cpp
 endif

 ifdef VBOX_WITH_VDE
  VBoxDD_DEFS           += VBOX_WITH_VDE
  VBoxDD_SOURCES        += \
  	Network/DrvVDE.cpp \
  	Network/VDEPlug.cpp
 endif

 ifdef VBOX_WITH_NETSHAPER
  VBoxDD_DEFS           += VBOX_WITH_NETSHAPER
  VBoxDD_SOURCES        += \
 	Network/DrvNetShaper.cpp
 endif

 # --- Storage bits. ---

 ifdef VBOX_WITH_AHCI
  VBoxDD_DEFS           += VBOX_WITH_AHCI IN_AHCI_R3
  VBoxDD_SOURCES        += \
 	Storage/DevAHCI.cpp
 endif

 ifdef VBOX_WITH_BUSLOGIC
  VBoxDD_DEFS           += VBOX_WITH_BUSLOGIC
  VBoxDD_SOURCES        += \
 	Storage/DevBusLogic.cpp \
 	Storage/VBoxSCSI.cpp
 endif

 ifdef VBOX_WITH_LSILOGIC
  VBoxDD_DEFS           += VBOX_WITH_LSILOGIC
  VBoxDD_SOURCES        += \
 	Storage/DevLsiLogicSCSI.cpp
 endif

  if defined(VBOX_WITH_NVME_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
   VBoxDD_DEFS          += VBOX_WITH_NVME_IMPL
   VBoxDD_SOURCES       += \
 	Storage/DevNVMe.cpp
  endif

 ifdef VBOX_WITH_PDM_ASYNC_COMPLETION
  VBoxDD_DEFS           += VBOX_WITH_PDM_ASYNC_COMPLETION
 endif

 ifdef VBOX_WITH_SCSI
  VBoxDD_DEFS           += VBOX_WITH_SCSI
  VBoxDD_SOURCES        += \
  	Storage/DrvSCSI.cpp
 endif

 ifdef VBOX_WITH_ISCSI
  $(eval $(call def_vbox_lwip_flags, \
                    VBoxDD, Storage/DrvVD.cpp, Network/lwip-new))
 endif

 ifdef VBOX_WITH_DRV_DISK_INTEGRITY
  VBoxDD_DEFS           += VBOX_WITH_DRV_DISK_INTEGRITY
  VBoxDD_SOURCES        += \
  	Storage/DrvDiskIntegrity.cpp \
  	Storage/DrvRamDisk.cpp
  VBoxDD_LIBS           += \
 	$(PATH_STAGE_LIB)/StorageDbgLib$(VBOX_SUFF_LIB)
 endif

 ifdef VBOX_WITH_EFI
  VBoxDD_DEFS           += VBOX_WITH_EFI
  VBoxDD_SOURCES        += EFI/DevEFI.cpp
  EFI/DevEFI.cpp_INCS       += EFI/Firmware/BaseTools/Source/C/Include
  EFI/DevEFI.cpp_INCS.x86   += EFI/Firmware/BaseTools/Source/C/Include/Ia32
  EFI/DevEFI.cpp_INCS.amd64 += EFI/Firmware/BaseTools/Source/C/Include/X64
 endif

 if defined(VBOX_WITH_PCI_PASSTHROUGH_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
  VBoxDD_DEFS           += VBOX_WITH_PCI_PASSTHROUGH_IMPL
  VBoxDD_SOURCES        += \
	Bus/DevPciRaw.cpp \
	Bus/DrvPciRaw.cpp
 endif

 ifdef VBOX_WITH_MSI_DEVICES
  VBoxDD_DEFS           += VBOX_WITH_MSI_DEVICES
 endif

 ifdef VBOX_WITH_DYNAMIC_DSDT
  VBoxDD_DEFS           += VBOX_WITH_DYNAMIC_DSDT
 endif

 # --- Audio bits. ---

 if 0 # Not stable yet.
  # Enable microphone-in support for HDA. Otherwise only line-in is supported. 
  VBoxDD_DEFS += VBOX_WITH_AUDIO_HDA_MIC_IN

  # Enable interleavig streams support for HDA. Needed for 5.1 surround support.
  VBoxDD_DEFS += VBOX_WITH_AUDIO_HDA_INTERLEAVING_STREAMS_SUPPORT

  # Enable 5.1 surround support (Front, Center/LFE, Rear) for HDA. 
  # Without this, only stereo output (Front) is supported.
  VBoxDD_DEFS += VBOX_WITH_AUDIO_HDA_51_SURROUND
 endif

 # Enable backend-independent device enumeration support. 
 VBoxDD_DEFS  += VBOX_WITH_AUDIO_ENUM

 # Enable backend callback support.
 #VBoxDD_DEFS  += VBOX_WITH_AUDIO_CALLBACKS

 # Disable one-time audio stream initialization at device creation (VM startup) instead
 # of creating the stream when needed at some later point in time. 
 #
 # This was the default behavior ever since.
 #
 # We now go with the new behavior by default now.
 #VBoxDD_DEFS  += VBOX_WITH_AUDIO_SB16_ONETIME_INIT
 #VBoxDD_DEFS  += VBOX_WITH_AUDIO_AC97_ONETIME_INIT
 #VBoxDD_DEFS  += VBOX_WITH_AUDIO_HDA_ONETIME_INIT

 #
 # Enables asynchronous audio data handling
 # to speed up the actual DMA data routines and keeping up
 # audio processing out of EMT as much as possible.
 #
 # Disabled for AC'97 for now.
 #VBoxDD_DEFS  += VBOX_WITH_AUDIO_AC97_ASYNC_IO
 #VBoxDD_DEFS  += VBOX_WITH_AUDIO_HDA_ASYNC_IO

 # Not yet enabled: Callbacks for the device emulation to let the backends
 #                  tell the emulation when and how to process data.
 if 0
  VBOX_DEFS   += VBOX_WITH_AUDIO_DEVICE_CALLBACKS
  VBOX_DEFS   += VBOX_WITH_AUDIO_SB16_CALLBACKS
  VBOX_DEFS   += VBOX_WITH_AUDIO_AC97_CALLBACKS
  VBOX_DEFS   += VBOX_WITH_AUDIO_HDA_CALLBACKS
 endif

 VBoxDD_SOURCES         += \
	Audio/DevIchAc97.cpp \
	Audio/DevSB16.cpp \
	Audio/DevHDA.cpp \
	Audio/HDACodec.cpp \
	Audio/HDAStreamPeriod.cpp \
	Audio/AudioMixBuffer.cpp \
	Audio/AudioMixer.cpp \
	Audio/DrvAudio.cpp \
	Audio/DrvAudioCommon.cpp \
	Audio/DrvHostNullAudio.cpp

 ifdef VBOX_WITH_AUDIO_DEBUG
  VBoxDD_DEFS    += VBOX_WITH_AUDIO_DEBUG
  VBoxDD_SOURCES += \
	Audio/DrvHostDebugAudio.cpp
 endif

 ifdef VBOX_WITH_AUDIO_VALIDATIONKIT
  VBoxDD_DEFS    += VBOX_WITH_AUDIO_VALIDATIONKIT
  VBoxDD_SOURCES += \
	Audio/DrvHostValidationKit.cpp
 endif

 ifeq ($(KBUILD_TARGET),darwin)
  VBoxDD_SOURCES += \
	Audio/DrvHostCoreAudio.cpp
 endif

 ifeq ($(KBUILD_TARGET),win)
  VBoxDD_SOURCES += \
	Audio/DrvHostDSound.cpp
 endif

 ifdef VBOX_WITH_AUDIO_OSS
  VBoxDD_DEFS    += VBOX_WITH_AUDIO_OSS
  VBoxDD_SOURCES += \
	Audio/DrvHostOSSAudio.cpp
 endif

 ifdef VBOX_WITH_AUDIO_ALSA
  VBoxDD_DEFS    += VBOX_WITH_AUDIO_ALSA
  VBoxDD_SOURCES += \
	Audio/DrvHostALSAAudio.cpp \
	Audio/alsa_stubs.c
 endif

 ifdef VBOX_WITH_AUDIO_PULSE
  VBoxDD_DEFS    += VBOX_WITH_AUDIO_PULSE
  VBoxDD_SOURCES += \
	Audio/DrvHostPulseAudio.cpp \
	Audio/pulse_stubs.c
 endif

 # --- WARNING! SLIRP MESS AHEAD! ;-) ---
 VBOX_SLIRP_SOURCES = \
 	Network/DrvNAT.cpp \
 	Network/slirp/bootp.c \
  	Network/slirp/debug.c \
 	Network/slirp/ip_icmp.c \
 	Network/slirp/ip_input.c \
 	Network/slirp/ip_output.c \
 	Network/slirp/misc.c \
 	Network/slirp/sbuf.c \
 	Network/slirp/slirp.c \
 	Network/slirp/slirp_dns.c \
 	Network/slirp/socket.c \
 	Network/slirp/tcp_input.c \
 	Network/slirp/tcp_output.c \
 	Network/slirp/tcp_subr.c \
 	Network/slirp/tcp_timer.c \
 	Network/slirp/udp.c \
	Network/slirp/hostres.c \
 	Network/slirp/dnsproxy/hash.c \
 	Network/slirp/tftp.c \
 	Network/slirp/dnsproxy/dnsproxy.c

 ifeq ($(KBUILD_TARGET), win)
  VBOX_SLIRP_SOURCES += Network/slirp/ip_icmpwin.c
 else ifneq ($(KBUILD_TARGET),darwin)
  # helper for debugging unprivileged
#  Network/slirp/ip_icmp.c_DEFS += VBOX_RAWSOCK_DEBUG_HELPER
#  VBOX_SLIRP_SOURCES += ../NetworkServices/NAT/getrawsock.c
 endif

 ifneq ($(KBUILD_TARGET), win)
  VBOX_SLIRP_SOURCES +=  	Network/slirp/resolv_conf_parser.c
 endif

 VBOX_SLIRP_BSD_ARCH = $(subst x86,i386,$(KBUILD_TARGET_ARCH))
 VBOX_SLIRP_BSD_SOURCES += \
 	Network/slirp/bsd/kern/kern_mbuf.c \
 	Network/slirp/bsd/kern/uipc_mbuf.c \
 	Network/slirp/bsd/kern/uipc_mbuf2.c \
 	Network/slirp/bsd/$(VBOX_SLIRP_BSD_ARCH)/in_cksum.c
 VBOX_SLIRP_ALIAS_SOURCES = \
 	Network/slirp/libalias/alias.c \
 	Network/slirp/libalias/alias_db.c \
 	Network/slirp/libalias/alias_mod.c \
 	Network/slirp/libalias/alias_proxy.c \
 	Network/slirp/libalias/alias_ftp.c \
 	Network/slirp/libalias/alias_nbt.c \
 	Network/slirp/libalias/alias_util.c

 # Enable VBOX_WITH_DNSMAPPING_IN_HOSTRESOLVER here for a while, then move to
 # $(file)_DEFS or clean the code disabled with this definition.
 VBOX_WITH_DNSMAPPING_IN_HOSTRESOLVER=1

 # dump memory related operations.
 Network/slirp/misc.c_DEFS += $(if $(VBOX_NAT_MEM_DEBUG),VBOX_NAT_MEM_DEBUG,)

 VBoxDD_SOURCES += $(VBOX_SLIRP_SOURCES)
 define def_vbox_slirp_cflags
   $(file)_DEFS += \
       $(if $(VBOX_WITH_SLIRP_MEMORY_CHECK),RTMEM_WRAP_TO_EF_APIS,) \
       $(if $(VBOX_WITH_DEBUG_NAT_SOCKETS),VBOX_WITH_DEBUG_NAT_SOCKETS,)	\
       $(if $(VBOX_WITH_DNSMAPPING_IN_HOSTRESOLVER),VBOX_WITH_DNSMAPPING_IN_HOSTRESOLVER,)	\
       $(if $(VBOX_WITH_NAT_UDP_SOCKET_CLONE),VBOX_WITH_NAT_UDP_SOCKET_CLONE,)	\
       $(if $(VBOX_WITH_NAT_SEND2HOME),VBOX_WITH_NAT_SEND2HOME,)	\
       $(if $(VBOX_WITH_HIDDEN_TCPTEMPLATE),VBOX_WITH_HIDDEN_TCPTEMPLATE,)	\
       $(if $(VBOX_WITH_SLIRP_MT),VBOX_WITH_SLIRP_MT,)
  $(file)_INCS += \
	$(1)/slirp/bsd/sys \
	$(1)/slirp/bsd/sys/sys \
	$(1)/slirp/bsd/$(VBOX_SLIRP_BSD_ARCH)/include \
	$(1)/slirp/bsd/netinet \
	$(1)/slirp \
	$(1)/slirp/libalias
  ifeq ($(KBUILD_TARGET),win)
   $(file)_CFLAGS = -wd4018
  else
   $(file)_CFLAGS += -Wno-sign-compare -Wno-format -Wno-bad-function-cast
  endif
 endef

 $(foreach file,$(VBOX_SLIRP_SOURCES),$(eval $(call def_vbox_slirp_cflags, Network)))

 VBoxDD_SOURCES += $(VBOX_SLIRP_ALIAS_SOURCES)
 define def_vbox_slirp_alias_cflags
   $(file)_DEFS += VBOX_SLIRP_ALIAS \
       $(if $(VBOX_WITH_DEBUG_LIBALIAS),VBOX_WITH_DEBUG_LIBALIAS,)
   $(file)_INCS += \
	$(1)/slirp/libalias \
	$(1)/slirp \
	$(1)/slirp/dnsproxy
   ifneq ($(KBUILD_TARGET),win)
    $(file)_CFLAGS += -Wno-shadow
   endif
 endef
 $(foreach file,$(VBOX_SLIRP_ALIAS_SOURCES),$(eval $(call def_vbox_slirp_cflags, Network)))
 $(foreach file,$(VBOX_SLIRP_ALIAS_SOURCES),$(eval $(call def_vbox_slirp_alias_cflags, Network)))

 VBOX_SLIRP_BSD_SOURCES += $(VBOX_SLIRP_BSD_SOURCES.${KBUILD_TARGET_ARCH})
 VBoxDD_SOURCES += $(VBOX_SLIRP_BSD_SOURCES)
 define def_vbox_slirp_bsd_cflags
  $(file)_DEFS += VBOX_SLIRP_BSD
  $(file)_INCS += $(1)/slirp/dnsproxy
 endef
 $(foreach file,$(VBOX_SLIRP_BSD_SOURCES),$(eval $(call def_vbox_slirp_cflags, Network)))
 $(foreach file,$(VBOX_SLIRP_BSD_SOURCES),$(eval $(call def_vbox_slirp_bsd_cflags, Network)))


 # --- OS specific driver hacks. ---

 ifeq ($(KBUILD_TARGET),darwin)
  VBoxDD_SOURCES.darwin += Serial/DrvHostSerial.cpp
 endif # darwin

 ifeq ($(KBUILD_TARGET),freebsd)
  VBoxDD_SOURCES += Serial/DrvHostSerial.cpp
  VBoxDD_SOURCES.freebsd += Network/DrvTAP.cpp
 endif # freebsd

 VBoxDD_SOURCES.linux += \
 	Network/DrvTAP.cpp \
 	Parallel/DrvHostParallel.cpp \
 	Serial/DrvHostSerial.cpp

 ifeq ($(KBUILD_TARGET),solaris)
  VBoxDD_SOURCES.solaris += Serial/DrvHostSerial.cpp
  ifdef VBOX_WITH_SUID_WRAPPER
   VBoxDD_DEFS += VBOX_WITH_SUID_WRAPPER
  endif
 endif

 VBoxDD_DEFS.win += VBOX_WITH_WIN_PARPORT_SUP
 VBoxDD_SOURCES.win += \
	Serial/DrvHostSerial.cpp \
	Parallel/DrvHostParallel.cpp

 ifdef VBOX_WITH_VIRTUALKD
  VBoxDD_DEFS.win     += VBOX_WITH_VIRTUALKD
  VBoxDD_SOURCES.win  += \
	Misc/VirtualKD.cpp
 endif

 if defined(VBOX_WITH_NETFLT)
  VBoxDD_DEFS += VBOX_WITH_NETFLT
  if defined(VBOX_NETFLT_ONDEMAND_BIND)
   VBoxDD_DEFS.win += VBOX_NETFLT_ONDEMAND_BIND
  endif
 endif


 # --- Final bits, mostly libraries for order dependant linkers. ---

 VBoxDD_LIBS            += \
 	$(PATH_STAGE_LIB)/VgaDefBiosLogo$(VBOX_SUFF_LIB) \
 	$(LIB_VMM) \
 	$(LIB_RUNTIME)
 ifeq ($(KBUILD_TARGET),win)
  VBoxDD_LIBS           += \
 	$(LIB_DDU) \
 	$(PATH_STAGE_LIB)/VBoxDD2.lib \
 	$(PATH_SDK_$(VBOX_WINDDK)_LIB)/dxguid.lib
 else
  VBoxDD_LIBS           += \
 	$(VBoxDDU_1_STAGE_TARGET) \
 	$(VBoxDD2_1_STAGE_TARGET)
 endif

 ifdef VBOX_WITH_NETFLT
  VBoxDD_LIBS.win       += $(PATH_STAGE_LIB)/WinNetConfig.lib
 endif

 ifeq ($(KBUILD_TARGET),solaris)
  VBoxDD_LIBS           += adm
  ifdef VBOX_WITH_SUID_WRAPPER
   VBoxDD_LIBS          += secdb
  endif
  ifdef VBOX_WITH_USB
   VBoxDD_LIBS          += aio
  endif
 endif

 VBoxDD_LIBS.darwin     += \
 	$(LIB_REM)


 ifdef VBOX_WITH_DYNAMIC_DSDT
  VBoxDD_CLEAN          += $(VBoxDD_0_OUTDIR)/vboxdsl.hex
  PC/ACPI/VBoxAcpi.cpp_DEPS = $(VBoxDD_0_OUTDIR)/vboxdsl.hex

  $$(VBoxDD_0_OUTDIR)/vboxdsl.hex: $(PATH_SUB_CURRENT)/PC/vbox.dsl | $$(dir $$@)
	$(call MSG_TOOL,bin2c,VBoxDD,$<,$@)
	$(QUIET)$(VBOX_BIN2C) -export VboxDslSource $< $@

  vboxdsl.hex:: $$(VBoxDD_0_OUTDIR)/vboxdsl.hex

 else  # !VBOX_WITH_DYNAMIC_DSDT
  # VBoxAcpi.cpp needs vboxaml.hex which we generate from PC/vbox.dsl
  VBoxDD_CLEAN       += \
 	$(VBoxDD_0_OUTDIR)/vboxaml.hex \
 	$(VBoxDD_0_OUTDIR)/vboxaml.aml \
 	$(VBoxDD_0_OUTDIR)/vboxssdt-standard.hex \
 	$(VBoxDD_0_OUTDIR)/vboxssdt-standard.aml \
 	$(VBoxDD_0_OUTDIR)/vboxssdt-standard.aml.tmp \
 	$(VBoxDD_0_OUTDIR)/vboxssdt-cpuhotplug.hex \
 	$(VBoxDD_0_OUTDIR)/vboxssdt-cpuhotplug.aml \
 	$(VBoxDD_0_OUTDIR)/vboxssdt-cpuhotplug.aml.tmp \
 	$(VBoxDD_0_OUTDIR)/vboxssdt-cpuhotplug.aml.pre
  PC/ACPI/VBoxAcpi.cpp_DEPS = \
 	$(VBoxDD_0_OUTDIR)/vboxaml.hex \
 	$(VBoxDD_0_OUTDIR)/vboxssdt-standard.hex \
 	$(VBoxDD_0_OUTDIR)/vboxssdt-cpuhotplug.hex

  $$(VBoxDD_0_OUTDIR)/vboxaml.hex: $(PATH_SUB_CURRENT)/PC/vbox.dsl | $$(dir $$@)
	$(call MSG_TOOL,iasl,VBoxDD,$<,$@)
	$(QUIET)$(VBOX_IASLCMD) -tc -vs -p $@ $<

  vboxaml.hex:: $$(VBoxDD_0_OUTDIR)/vboxaml.hex

  $$(VBoxDD_0_OUTDIR)/vboxssdt-standard.hex: $(PATH_SUB_CURRENT)/PC/vbox-standard.dsl | $$(dir $$@)
	$(call MSG_TOOL,iasl,VBoxDD,$<,$@)
	$(QUIET)$(RM) -f $@ $@.tmp
	$(QUIET)$(VBOX_IASLCMD) -tc -vs -p $@ $<
	$(QUIET)$(MV) -f $@ $@.tmp
	$(QUIET)$(SED) -e "s/AmlCode/AmlCodeSsdtStandard/g" \
		--output $@ $@.tmp
	$(QUIET)$(RM) -f $@.tmp


  vboxssdt-standard.hex:: $$(VBoxDD_0_OUTDIR)/vboxssdt-standard.hex

  $$(VBoxDD_0_OUTDIR)/vboxssdt-cpuhotplug.hex: $(PATH_SUB_CURRENT)/PC/vbox-cpuhotplug.dsl | $$(dir $$@)
	$(call MSG_TOOL,iasl,VBoxDD,$<,$@)
	$(QUIET)$(RM) -f $@ $@.tmp $@.pre
	$(QUIET)$(TOOL_$(VBOX_GCC_TOOL)_CC) -E -P -x c -o $@.pre $<
	$(QUIET)$(SED) -e "s/<NL>/\n/g" \
		--output $@.pre1 $@.pre
	$(QUIET)$(VBOX_IASLCMD) -tc -vs -p $@ $@.pre1
	$(QUIET)$(MV) -f $@ $@.tmp
	$(QUIET)$(SED) -e "s/AmlCode/AmlCodeSsdtCpuHotPlug/g" \
		--output $@ $@.tmp
	$(QUIET)$(RM) -f $@.tmp $@.pre $@.pre1


  vboxssdt-cpuhotplug.hex:: $$(VBoxDD_0_OUTDIR)/vboxssdt-cpuhotplug.hex

 endif # !VBOX_WITH_DYNAMIC_DSDT
 PC/ACPI/VBoxAcpi.cpp_INCS = $(VBoxDD_0_OUTDIR)

 # For finding PCIInternal.h from VBox/pci.h.
 Bus/DevPCI.cpp_INCS      = Bus
 Bus/DevPciIch9.cpp_INCS  = Bus
 Bus/MsiCommon.cpp_INCS   = Bus
 Bus/MsixCommon.cpp_INCS  = Bus
 Bus/DevPciRaw.cpp_INCS   = Bus

 # For finding and generating vbetables.h (see Graphics/BIOS/Makefile.kmk).
 Graphics/DevVGA.cpp_INCS = $(VgaBiosBin_0_OUTDIR) $(VBOX_GRAPHICS_INCS)
 Graphics/DevVGA.cpp_DEPS = $(VgaBiosBin_0_OUTDIR)/vbetables.h

 $(call VBOX_SET_VER_INFO_DLL,VBoxDD,VirtualBox VMM Devices and Drivers) # (last!)


 ifdef VBOX_WITH_RAW_MODE
  #
  # VBoxDDRC (sysmod)
  #
  VBoxDDRC_TEMPLATE       = VBoxRc
  ifeq ($(KBUILD_TARGET_ARCH),x86)
   VBoxDDRC_DEFS.darwin   = VBOX_WITH_2X_4GB_ADDR_SPACE
  endif
  VBoxDDRC_DEFS           = $(if $(VBOX_WITH_HGCM),VBOX_WITH_HGCM,)
  VBoxDDRC_INCS           = build $(VBOX_GRAPHICS_INCS)
  VBoxDDRC_SOURCES        = \
  	Bus/DevPCI.cpp \
  	Bus/DevPciIch9.cpp \
  	Bus/MsiCommon.cpp \
  	Bus/MsixCommon.cpp \
  	EFI/DevSmc.cpp \
  	Graphics/DevVGA.cpp \
  	Input/DevPS2.cpp \
  	Input/PS2K.cpp \
  	Input/PS2M.cpp \
  	PC/DevACPI.cpp \
  	PC/DevIoApic.cpp \
  	PC/DevPit-i8254.cpp \
  	PC/DevPIC.cpp \
  	PC/DevRTC.cpp \
  	PC/DevHPET.cpp \
  	Storage/DevATA.cpp \
  	Network/DevPCNet.cpp \
  	Serial/DevSerial.cpp \
  	Parallel/DevParallel.cpp \
  	VMMDev/VMMDevTesting.cpp

  VBoxDDRC_SOURCES      += \
 	Audio/DevHDA.cpp

  ifdef VBOX_WITH_E1000
   VBoxDDRC_DEFS        += VBOX_WITH_E1000
   VBoxDDRC_SOURCES     += \
  	Network/DevE1000.cpp \
  	Network/DevE1000Phy.cpp
  endif

  ifdef VBOX_WITH_VIRTIO
   VBoxDDRC_DEFS        += VBOX_WITH_VIRTIO
   VBoxDDRC_SOURCES     += \
  	VirtIO/Virtio.cpp \
  	Network/DevVirtioNet.cpp
  endif

  ifdef VBOX_WITH_HGSMI
   VBoxDDRC_DEFS        += VBOX_WITH_HGSMI
  endif
  ifdef VBOX_WITH_WDDM
   VBoxDDRC_DEFS        += VBOX_WITH_WDDM
  endif
  ifdef VBOX_WITH_VDMA
   VBoxDDRC_DEFS        += VBOX_WITH_VDMA
  endif
  ifdef VBOX_WITH_CRHGSMI
   VBoxDDRC_DEFS        += VBOX_WITH_CRHGSMI
  endif
  ifdef VBOXWDDM_WITH_VBVA
   VBoxDDRC_DEFS        += VBOXWDDM_WITH_VBVA
  endif
  ifdef VBOX_WITH_VMSVGA
   VBoxDDRC_DEFS         += VBOX_WITH_VMSVGA
   VBoxDDRC_SOURCES      += \
 	Graphics/DevVGA-SVGA.cpp
  endif
  ifdef VBOX_WITH_VMSVGA3D
   VBoxDDRC_DEFS         += VBOX_WITH_VMSVGA3D
  endif
  ifdef VBOX_VDMA_WITH_WATCHDOG
   VBoxDDRC_DEFS        += VBOX_VDMA_WITH_WATCHDOG
  endif

  ifdef VBOX_WITH_VUSB
   VBoxDDRC_DEFS        += VBOX_WITH_VUSB
   VBoxDDRC_SOURCES     += \
 	USB/DevOHCI.cpp
  endif

  ifdef VBOX_WITH_USB
   VBoxDDRC_DEFS        += VBOX_WITH_USB
   if defined(VBOX_WITH_EHCI_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
    VBoxDDRC_DEFS       += VBOX_WITH_EHCI_IMPL
    VBoxDDRC_SOURCES    += \
  	USB/DevEHCI.cpp
   endif
   if defined(VBOX_WITH_XHCI_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
    VBoxDDRC_DEFS       += VBOX_WITH_XHCI_IMPL
    VBoxDDRC_SOURCES    += \
  	USB/DevXHCI.cpp
   endif
  endif

  ifdef VBOX_WITH_VIDEOHWACCEL
   VBoxDDRC_DEFS        += VBOX_WITH_VIDEOHWACCEL
  endif

  ifdef VBOX_WITH_AHCI
  VBoxDDRC_DEFS         += VBOX_WITH_AHCI IN_AHCI_GC
  VBoxDDRC_SOURCES      += \
  	Storage/DevAHCI.cpp
  endif

  ifdef VBOX_WITH_BUSLOGIC
  VBoxDDRC_DEFS         += VBOX_WITH_BUSLOGIC
  VBoxDDRC_SOURCES      += \
  	Storage/DevBusLogic.cpp
  endif

  ifdef VBOX_WITH_LSILOGIC
  VBoxDDRC_DEFS         += VBOX_WITH_LSILOGIC
  VBoxDDRC_SOURCES      += \
  	Storage/DevLsiLogicSCSI.cpp
  endif

  if defined(VBOX_WITH_NVME_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
   VBoxDDGC_DEFS       += VBOX_WITH_NVME_IMPL
   VBoxDDGC_SOURCES    += \
  	Storage/DevNVMe.cpp
  endif

  if1of ($(VBOX_LDR_FMT32), pe lx)
  VBoxDDRC_LIBS           = \
  	$(PATH_STAGE_LIB)/VMMRCBuiltin$(VBOX_SUFF_LIB) \
  	$(PATH_STAGE_LIB)/VMMRCImp$(VBOX_SUFF_LIB)
  endif
 endif # VBOX_WITH_RAW_MODE

 $(call VBOX_SET_VER_INFO_RC,VBoxDDRC,VirtualBox VMM Devices and Drivers$(COMMA) raw-mode) # last!


 #
 # VBoxDD2 (shared object)
 #
 VBoxDD2_TEMPLATE        = VBoxR3DllWarnNoPic
 VBoxDD2_DEFS            = \
	IN_VBOXDD2 \
	$(if $(VBOX_WITH_PXE_ROM),VBOX_WITH_PXE_ROM,)
 VBoxDD2_INCS           := \
	build \
 	$(PATH_SUB_CURRENT)
 VBoxDD2_SOURCES         = \
 	build/VBoxDD2.cpp  \
 	PC/DevLPC.cpp
 VBoxDD2_LIBS            = \
 	$(PATH_STAGE_LIB)/PcBiosBin$(VBOX_SUFF_LIB) \
 	$(PATH_STAGE_LIB)/VgaBiosBin$(VBOX_SUFF_LIB) \
 	$(if $(VBOX_WITH_PXE_ROM),\
	  $(if $(VBOX_WITH_INTEL_PXE),\
	    $(PATH_STAGE_LIB)/NetBiosBin$(VBOX_SUFF_LIB),\
	    $(PATH_STAGE_LIB)/iPxeBiosBin$(VBOX_SUFF_LIB)),) \
 	$(LIB_VMM) \
 	$(LIB_RUNTIME)
 VBoxDD2_LIBS.darwin    += $(LIB_REM)
 VBoxDD2_LDFLAGS.darwin  = -install_name $(VBOX_DYLD_EXECUTABLE_PATH)/VBoxDD2.dylib
 VBoxDD2_LDFLAGS.linux   = $(VBOX_GCC_NO_UNDEFINED)

 $(call VBOX_SET_VER_INFO_DLL,VBoxDD2,VirtualBox VMM Devices and Drivers 2) # (last!)

 #
 # VBoxDDR0 (sysmod)
 #
 VBoxDDR0_TEMPLATE       = VBoxR0
 VBoxDDR0_DEFS           = IN_RT_R0 $(if $(VBOX_WITH_HGCM),VBOX_WITH_HGCM,) # - WTF is IN_RT_R0 doing here?
 VBoxDDR0_DEFS.win      += VBOX_WITH_WIN_PARPORT_SUP
 VBoxDDR0_INCS           = build $(VBOX_GRAPHICS_INCS)
 VBoxDDR0_SDKS.win 	  = ReorderCompilerIncs $(VBOX_WINPSDK) $(VBOX_WINDDK)
 VBoxDDR0_SOURCES        = \
 	build/VBoxDDR0.cpp \
 	Bus/DevPCI.cpp \
 	Bus/DevPciIch9.cpp \
 	Bus/MsiCommon.cpp \
 	Bus/MsixCommon.cpp \
 	EFI/DevSmc.cpp \
 	Graphics/DevVGA.cpp \
 	Input/DevPS2.cpp \
 	Input/PS2K.cpp \
 	Input/PS2M.cpp \
 	PC/DevACPI.cpp \
 	PC/DevIoApic.cpp \
 	PC/DevPit-i8254.cpp \
 	PC/DevPIC.cpp \
 	PC/DevRTC.cpp \
 	PC/DevHPET.cpp \
 	Storage/DevATA.cpp \
 	Network/DevPCNet.cpp \
 	Serial/DevSerial.cpp \
 	Parallel/DevParallel.cpp \
 	VMMDev/VMMDevTesting.cpp \
 	Network/DrvIntNet.cpp \
 	Network/DrvDedicatedNic.cpp \
 	Audio/DevHDA.cpp

 VBoxDDR0_SOURCES.win += Parallel/DrvHostParallel.cpp

 VBoxDDR0_DEFS          += \
	$(if $(VBOX_WITH_HGSMI),VBOX_WITH_HGSMI,) \
	$(if $(VBOX_WITH_WDDM),VBOX_WITH_WDDM,) \
	$(if $(VBOX_WITH_VDMA),VBOX_WITH_VDMA,) \
	$(if $(VBOX_WITH_CRHGSMI),VBOX_WITH_CRHGSMI,) \
	$(if $(VBOXWDDM_WITH_VBVA),VBOXWDDM_WITH_VBVA,) \
	$(if $(VBOX_VDMA_WITH_WATCHDOG),VBOX_VDMA_WITH_WATCHDOG,)

 ifdef VBOX_WITH_E1000
  VBoxDDR0_DEFS         += VBOX_WITH_E1000
  VBoxDDR0_SOURCES      += \
 	Network/DevE1000.cpp \
 	Network/DevE1000Phy.cpp
 endif

 ifdef VBOX_WITH_VIRTIO
  VBoxDDR0_DEFS         += VBOX_WITH_VIRTIO
  VBoxDDR0_SOURCES      += \
	VirtIO/Virtio.cpp \
  	Network/DevVirtioNet.cpp
 endif

 ifdef VBOX_WITH_NETSHAPER
  VBoxDDR0_DEFS         += VBOX_WITH_NETSHAPER
  VBoxDDR0_SOURCES      += \
 	Network/DrvNetShaper.cpp
 endif

 ifdef VBOX_WITH_VMSVGA
  VBoxDDR0_DEFS         += VBOX_WITH_VMSVGA
  VBoxDDR0_SOURCES      += \
	Graphics/DevVGA-SVGA.cpp
 endif
 ifdef VBOX_WITH_VMSVGA3D
  VBoxDDR0_DEFS         += VBOX_WITH_VMSVGA3D
 endif

 ifdef VBOX_WITH_VUSB
  VBoxDDR0_DEFS         += VBOX_WITH_VUSB
  VBoxDDR0_SOURCES      += \
 	USB/DevOHCI.cpp
 endif
 ifdef VBOX_WITH_USB
 VBoxDDR0_DEFS          += VBOX_WITH_USB
  if defined(VBOX_WITH_EHCI_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
   VBoxDDR0_DEFS        += VBOX_WITH_EHCI_IMPL
   VBoxDDR0_SOURCES     += \
 	USB/DevEHCI.cpp
  endif
  if defined(VBOX_WITH_XHCI_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
   VBoxDDR0_DEFS        += VBOX_WITH_XHCI_IMPL
   VBoxDDR0_SOURCES     += \
 	USB/DevXHCI.cpp
  endif
 endif

 if defined(VBOX_WITH_PCI_PASSTHROUGH_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
  VBoxDDR0_SOURCES      += \
	Bus/DevPciRaw.cpp
 endif

 ifdef VBOX_WITH_AHCI
 VBoxDDR0_DEFS          += VBOX_WITH_AHCI IN_AHCI_R0
 VBoxDDR0_SOURCES       += \
 	Storage/DevAHCI.cpp
 endif

 ifdef VBOX_WITH_BUSLOGIC
 VBoxDDR0_DEFS          += VBOX_WITH_BUSLOGIC
 VBoxDDR0_SOURCES       += \
 	Storage/DevBusLogic.cpp
 endif

 ifdef VBOX_WITH_LSILOGIC
 VBoxDDR0_DEFS          += VBOX_WITH_LSILOGIC
 VBoxDDR0_SOURCES       += \
 	Storage/DevLsiLogicSCSI.cpp
 endif

 if defined(VBOX_WITH_NVME_IMPL) && !defined(VBOX_WITH_EXTPACK_PUEL)
  VBoxDDR0_DEFS       += VBOX_WITH_NVME_IMPL
  VBoxDDR0_SOURCES    += \
 	Storage/DevNVMe.cpp
 endif

 ifdef VBOX_WITH_HGSMI
  VBoxDDR0_DEFS         += VBOX_WITH_HGSMI
 endif
 ifdef VBOX_WITH_VIDEOHWACCEL
  VBoxDDR0_DEFS         += VBOX_WITH_VIDEOHWACCEL
 endif

 if1of ($(VBOX_LDR_FMT), pe lx)
 VBoxDDR0_LIBS           = \
 	$(PATH_STAGE_LIB)/VMMR0Imp$(VBOX_SUFF_LIB) \
 	$(PATH_STAGE_LIB)/SUPR0$(VBOX_SUFF_LIB)
 endif

 $(call VBOX_SET_VER_INFO_R0,VBoxDDR0,VirtualBox VMM Devices and Drivers$(COMMA) ring-0) # (last!)


 ifdef VBOX_WITH_RAW_MODE
  #
  # VBoxDD2RC (LGPL sysmod)
  #
  VBoxDD2RC_TEMPLATE       = VBoxRc
  VBoxDD2RC_INCS           = build
  VBoxDD2RC_SOURCES        = \
 	build/VBoxDD2R0.cpp # Dummy to prevent linking errors.
  if1of ($(VBOX_LDR_FMT32), pe lx)
   VBoxDD2RC_LIBS          = \
   	$(PATH_STAGE_LIB)/VMMRCBuiltin$(VBOX_SUFF_LIB) \
   	$(PATH_STAGE_LIB)/VMMRCImp$(VBOX_SUFF_LIB)
  endif
  $(call VBOX_SET_VER_INFO_RC,VBoxDD2RC,VirtualBox VMM Devices and Drivers 2$(COMMA) raw-mode)
 endif


 #
 # VBoxDD2R0 (LGPL sysmod)
 #
 VBoxDD2R0_TEMPLATE       = VBoxR0
 VBoxDD2R0_DEFS           = IN_RT_R0
 VBoxDD2R0_INCS           = build
 VBoxDD2R0_SOURCES        = \
 	build/VBoxDD2R0.cpp
 if1of ($(VBOX_LDR_FMT), pe lx)
  VBoxDD2R0_LIBS          = \
  	$(PATH_STAGE_LIB)/VMMR0Imp$(VBOX_SUFF_LIB) \
  	$(PATH_STAGE_LIB)/SUPR0$(VBOX_SUFF_LIB)
 endif
 $(call VBOX_SET_VER_INFO_R0,VBoxDD2R0,VirtualBox VMM Devices and Drivers 2$(COMMA) ring-0) # (last!)


 #
 # Ring-0 Services (library, linked into VMMR0.r0)
 #
 ServicesR0_TEMPLATE  = VBoxR0
 ServicesR0_DEFS      = IN_INTNET_R0 IN_RT_R0 \
	$(if $(VBOX_WITH_PCI_PASSTHROUGH),IN_PCIRAW_R0,) \
	$(if $(VBOX_WITH_NAT_SERVICE),VBOX_WITH_NAT_SERVICE,)
 ServicesR0_SOURCES   = \
 	Network/SrvIntNetR0.cpp \
        $(if $(VBOX_WITH_PCI_PASSTHROUGH),Bus/SrvPciRawR0.cpp,)
 Network/SrvIntNetR0.cpp_CXXFLAGS := $(if-expr $(KBUILD_TARGET) == "win",,$(VBOX_GCC_Wno-array_bounds))


 #
 # Internal Networking - Ring-3 Testcase for the Ring-0 code (a bit hackish).
 #
 ifdef VBOX_WITH_TESTCASES
  PROGRAMS += tstIntNetR0
  tstIntNetR0_TEMPLATE    = VBOXR3TSTEXE
  tstIntNetR0_DEFS        = IN_INTNET_R0
  tstIntNetR0_SOURCES     = \
 	Network/testcase/tstIntNetR0.cpp
  ifneq ($(KBUILD_TARGET),win)
   Network/testcase/tstIntNetR0.cpp_CXXFLAGS = $(VBOX_GCC_Wno-array_bounds)
  endif
 endif


 #
 # Internal Networking - Ring-3 Testcase for the Ring-0 code (a bit hackish).
 #
 ifdef VBOX_WITH_TESTCASES
  if defined(VBOX_WITH_HARDENING) && "$(KBUILD_TARGET)" == "win"
   PROGRAMS += tstIntNetHardened-1
   tstIntNetHardened-1_TEMPLATE = VBoxR3HardenedTstExe
   tstIntNetHardened-1_NAME     = tstIntNet-1
   tstIntNetHardened-1_DEFS     = PROGRAM_NAME_STR=\"tstIntNet-1\"
   tstIntNetHardened-1_SOURCES  = ../HostDrivers/Support/SUPR3HardenedMainTemplateTestcase.cpp

   DLLS += tstIntNet-1
   tstIntNet-1_TEMPLATE   = VBoxR3HardenedTstDll
  else
   PROGRAMS += tstIntNet-1
   tstIntNet-1_TEMPLATE   = VBOXR3TSTEXE
  endif
  tstIntNet-1_SOURCES     = \
 	Network/testcase/tstIntNet-1.cpp \
 	Network/Pcap.cpp
 endif


 #
 # EEPROM device unit test requires cppunit
 #
 ifdef VBOX_WITH_CPPUNIT_TESTCASES
  ifdef VBOX_WITH_E1000
   PROGRAMS += tstDevEEPROM
   tstDevEEPROM_TEMPLATE    = VBOXCPPUNITEXE
   tstDevEEPROM_SOURCES     = \
  	Network/testcase/tstDevEEPROM.cpp
   tstDevEEPROM_LIBS        = \
  	$(TARGET_VBoxDD)
   PROGRAMS += tstDevPhy
   tstDevPhy_TEMPLATE    = VBOXCPPUNITEXE
   tstDevPhy_SOURCES     = \
  	Network/testcase/tstDevPhy.cpp \
  	Network/DevE1000Phy.cpp
   tstDevPhy_DEFS        = PHY_UNIT_TEST
  endif
 endif

 #
 # Apple SMC Utility.
 #
 ifdef VBOX_WITH_TESTCASES
  PROGRAMS.darwin += VBoxSmcUtil-darwin
  VBoxSmcUtil-darwin_TEMPLATE = VBOXR3TSTEXE
  VBoxSmcUtil-darwin_SOURCES = EFI/VBoxSmcUtil-darwin.cpp
  VBoxSmcUtil-darwin_LDFLAGS = -framework IOKit
 endif

endif # !VBOX_ONLY_EXTPACKS


if defined(VBOX_WITH_EXTPACK_PUEL) && defined(VBOX_WITH_EXTPACK_PUEL_BUILD)
 #
 # The EHCI (USB 2.0) Extension Pack Modules.
 #
 if defined(VBOX_WITH_USB)
  DLLS += VBoxEhciR3
  VBoxEhciR3_TEMPLATE = VBoxR3ExtPackPuel
  VBoxEhciR3_SOURCES  = \
	USB/DevEHCI.cpp \
	USB/DevXHCI.cpp
  $(call VBOX_SET_VER_INFO_DLL,VBoxEhciR3,PUEL Extension Pack - EHCI Device)

  SYSMODS += VBoxEhciR0
  VBoxEhciR0_TEMPLATE = VBoxR0ExtPackPuel
  VBoxEhciR0_SOURCES  = \
	USB/DevEHCI.cpp \
	USB/DevXHCI.cpp
  $(call VBOX_SET_VER_INFO_R0,VBoxEhciR0,PUEL Extension Pack - EHCI Device$(COMMA) ring-0)

  ifdef VBOX_WITH_RAW_MODE
   SYSMODS += VBoxEhciRC
   VBoxEhciRC_TEMPLATE = VBoxRcExtPackPuel
   VBoxEhciRC_SOURCES  = \
   	USB/DevEHCI.cpp \
   	USB/DevXHCI.cpp
   $(call VBOX_SET_VER_INFO_RC,VBoxEhciRC,PUEL Extension Pack - EHCI Device$(COMMA) raw-mode)
  endif

  # Hacky but MSI support *must* be enabled
  ifdef VBOX_WITH_MSI_DEVICES
   VBoxEhciR3_DEFS += VBOX_WITH_MSI_DEVICES
   VBoxEhciR0_DEFS += VBOX_WITH_MSI_DEVICES
   VBoxEhciRC_DEFS += VBOX_WITH_MSI_DEVICES
  endif

 endif

 if defined(VBOX_WITH_PCI_PASSTHROUGH)
  DLLS += VBoxPciRawR3
  VBoxPciRawR3_TEMPLATE     = VBoxR3ExtPackPuel
  VBoxPciRawR3_SOURCES      = Bus/DevPciRaw.cpp
  $(call VBOX_SET_VER_INFO_DLL,VBoxPciRawR3,PUEL Extension Pack - PCI Passthrough Device)

  DLLS += VBoxPciRawDrv
  VBoxPciRawDrv_TEMPLATE    = VBoxR3ExtPackPuel
  VBoxPciRawDrv_SOURCES     = Bus/DrvPciRaw.cpp
  $(call VBOX_SET_VER_INFO_DLL,VBoxPciRawDrv,PUEL Extension Pack - PCI Passthrough Driver)

  SYSMODS += VBoxPciRawR0
  VBoxPciRawR0_TEMPLATE     = VBoxR0ExtPackPuel
  VBoxPciRawR0_SOURCES      = Bus/DevPciRaw.cpp
  $(call VBOX_SET_VER_INFO_R0,VBoxPciRawR0,PUEL Extension Pack - PCI Passthrough Driver$(COMMA) ring-0)

  Bus/DevPciRaw.cpp_INCS    = Bus
 endif

 #
 # The NVMe Extension Pack Modules.
 #
 if defined(VBOX_WITH_NVME_IMPL)
  DLLS += VBoxNvmeR3
  VBoxNvmeR3_TEMPLATE = VBoxR3ExtPackPuel
  VBoxNvmeR3_SOURCES  = \
  	Storage/DevNVMe.cpp
  $(call VBOX_SET_VER_INFO_DLL,VBoxNvmeR3,PUEL Extension Pack - NVMe Device)

  SYSMODS += VBoxNvmeR0
  VBoxNvmeR0_TEMPLATE = VBoxR0ExtPackPuel
  VBoxNvmeR0_SOURCES  = \
  	Storage/DevNVMe.cpp
  $(call VBOX_SET_VER_INFO_R0,VBoxNvmeR0,PUEL Extension Pack - NVMe Device$(COMMA) ring-0)

  ifdef VBOX_WITH_RAW_MODE
   SYSMODS += VBoxNvmeRC
   VBoxNvmeRC_TEMPLATE = VBoxRcExtPackPuel
   VBoxNvmeRC_SOURCES  = \
   	Storage/DevNVMe.cpp
   $(call VBOX_SET_VER_INFO_RC,VBoxNvmeRC,PUEL Extension Pack - NVMe Device$(COMMA) raw-mode)
  endif

  # Hacky but MSI support *must* be enabled
  ifdef VBOX_WITH_MSI_DEVICES
   VBoxNvmeR3_DEFS += VBOX_WITH_MSI_DEVICES
   VBoxNvmeR0_DEFS += VBOX_WITH_MSI_DEVICES
   VBoxNvmeRC_DEFS += VBOX_WITH_MSI_DEVICES
  endif

 endif


 #
 # The Intel PXE ROM.
 #
 INSTALLS += VBoxExtPackPuelInsRoms
 VBoxExtPackPuelInsRoms_TEMPLATE = VBoxInsExtPackPuel
 VBoxExtPackPuelInsRoms_SOURCES = PC/PXE/PXE-Intel.rom=>PXE-Intel.rom
endif # VBOX_WITH_EXTPACK_PUEL


if defined(VBOX_WITH_VMSVGA3D) && !defined(VBOX_ONLY_EXTPACKS)
 #
 # Template used for VBoxSVGA3D.  (Strips away compiler options.)
 #
 TEMPLATE_VBoxSVGA3D         := VBoxSVGA3D
 TEMPLATE_VBoxSVGA3D_EXTENDS := $(if-expr "$(KBUILD_TARGET)" == "darwin" && !defined(VBOX_WITH_NEW_XCODE),VBoxR3DllOsX107,VBOXR3)
 TEMPLATE_VBoxSVGA3D_CFLAGS      = $(filter-out -pedantic -Wstrict-prototypes,$(TEMPLATE_$(TEMPLATE_VBoxSVGA3D_EXTENDS)_CFLAGS))
 TEMPLATE_VBoxSVGA3D_CXXFLAGS    = $(filter-out -pedantic,$(TEMPLATE_$(TEMPLATE_VBoxSVGA3D_EXTENDS)_CXXFLAGS))
 TEMPLATE_VBoxSVGA3D_OBJCFLAGS   = $(filter-out -pedantic,$(TEMPLATE_$(TEMPLATE_VBoxSVGA3D_EXTENDS)_OBJCFLAGS))
 TEMPLATE_VBoxSVGA3D_OBJCXXFLAGS = $(filter-out -pedantic,$(TEMPLATE_$(TEMPLATE_VBoxSVGA3D_EXTENDS)_OBJCXXFLAGS))
 TEMPLATE_VBoxSVGA3D_LDFLAGS.darwin  = $(TEMPLATE_$(TEMPLATE_VBoxSVGA3D_EXTENDS)_LDFLAGS.darwin) \
  	-framework AppKit -framework OpenGL -framework IOKit

 #
 # The shader library used by the SVGA3D implementation.
 #
 DLLS += VBoxSVGA3D
 VBoxSVGA3D_TEMPLATE = VBoxSVGA3D
 VBoxSVGA3D_SDKS         = ReorderCompilerIncs
 VBoxSVGA3D_DEFS         = \
 	__WINESRC__ \
 	WINE_UNICODE_API="" \
 	_REENTRANT \
 	WINE_NOWINSOCK \
 	VBOX_WITH_VMSVGA \
 	VBOX_WITH_VMSVGA3D \
 	DLLDIR=\"\" \
 	BINDIR=\"\" \
 	LIB_TO_BINDIR=\"\" \
 	LIB_TO_DLLDIR=\"\" \
 	BIN_TO_DLLDIR=\"\" \
 	LIB_TO_DATADIR=\"\" \
 	BIN_TO_DATADIR=\"\" \
 	_USE_MATH_DEFINES \
 	VBOX_USING_WINDDK_W7_OR_LATER \
 	VBOX_WINE_WITH_SINGLE_SWAPCHAIN_CONTEXT \
 	IN_vmsvgashader_STATIC \
 	IN_VMSVGA3D \
 	VBOX_WINE_WITH_IPRT
 if "$(KBUILD_TYPE)" != "debug" || defined(VBOX_WINE_NO_DEBUG_MSGS)
  VBoxSVGA3D_DEFS       += WINE_NO_DEBUG_MSGS
 endif
 VBoxSVGA3D_DEFS.x86    += __i386__
 VBoxSVGA3D_DEFS.amd64  += __x86_64__
 VBoxSVGA3D_DEFS.win    += \
 	USE_WIN32_OPENGL \
 	VBOX_WINE_WITHOUT_LIBWINE
 VBoxSVGA3D_DEFS.darwin  += VBOX_VMSVGA3D_DUAL_OPENGL_PROFILE
 if 0 # Use the OpenGL 3.2 Core profile (VBoxSVGA3D_DEFS.darwin).
  VBoxSVGA3D_DEFS.darwin += VBOX_VMSVGA3D_DEFAULT_OGL_PROFILE=3.2 VBOX_VMSVGA3D_OTHER_OGL_PROFILE=2.1
 else
  VBoxSVGA3D_DEFS.darwin += VBOX_VMSVGA3D_DEFAULT_OGL_PROFILE=2.1 VBOX_VMSVGA3D_OTHER_OGL_PROFILE=3.2
 endif

 # WINE relies on a gcc 4.4 feature but we have 4.2 on Darwin
 VBoxSVGA3D_DEFS.darwin += \
 	__builtin_ms_va_list=va_list \
 	__stdcall= \
 	ms_abi=
 VBoxSVGA3D_INCS = $(VBOX_GRAPHICS_INCS)
 VBoxSVGA3D_INCS.win    := \
 	Graphics/shaderlib/libWineStub/include
 VBoxSVGA3D_INCS.linux  := \
 	Graphics/shaderlib/wine/include
 VBoxSVGA3D_INCS.darwin := \
 	Graphics/ \
 	Graphics/shaderlib/wine/include
 VBoxSVGA3D_SOURCES     := \
 	Graphics/shaderlib/glsl_shader.c \
 	Graphics/shaderlib/shader.c \
 	Graphics/shaderlib/shader_sm1.c \
 	Graphics/shaderlib/shader_sm4.c \
 	Graphics/shaderlib/shaderapi.c \
 	Graphics/shaderlib/utils.c \
 	Graphics/shaderlib/stateblock.c \
 	Graphics/shaderlib/directx.c \
 	Graphics/shaderlib/libWineStub/debug.c
 VBoxSVGA3D_LIBS        = $(LIB_RUNTIME)
 VBoxSVGA3D_LIBS.win   += $(PATH_SDK_$(VBOX_WINPSDK)_LIB)/Opengl32.lib
 if1of ($(KBUILD_TARGET), solaris linux freebsd)
  VBoxSVGA3D_LIBS      += GL
 endif
 VBoxSVGA3D_LDFLAGS.darwin += \
 	-install_name $(VBOX_DYLD_EXECUTABLE_PATH)/VBoxSVGA3D.dylib
 $(call VBOX_SET_VER_INFO_DLL,VBoxSVGA3D,VirtualBox VMSVGA 3D)
 #  -wd4100: unreferenced format parameter
 #  -wd4204: nonstandard extension used : non-constant initializer
 #  -wd4245: '=' : conversion from 'int' to 'DWORD', signed/unsigned mismatch
 #  -wd4305: 'function' : truncation from 'double' to 'GLclampf'
 VBoxSVGA3D_CFLAGS.win = -wd4100  -wd4204 -wd4245 -wd4305
 ifneq ($(KBUILD_TARGET),win)
  VBoxSVGA3D_CFLAGS   += -Wno-unused-parameter -Wno-unused-function
 endif

 #
 # The Objective C code needs to be separate since the shaderlib redefines most
 # GL functions as pointers, making it impossible to mix with code calling OpenGL
 # functions directly.  This module must be compiled for 10.7 or later, thus it
 # needs to be separate from VBoxDD.dylib, or at least that's our belief...
 #
 DLLS.darwin += VBoxSVGA3DObjC
 VBoxSVGA3DObjC_TEMPLATE    = VBoxSVGA3D
 VBoxSVGA3DObjC_DEFS        = $(VBoxSVGA3D_DEFS) IN_VMSVGA3DCOCOA
 VBoxSVGA3DObjC_DEFS.x86    = __i386__
 VBoxSVGA3DObjC_DEFS.amd64  = __x86_64__
 VBoxSVGA3DObjC_DEFS.darwin = $(VBoxSVGA3D_DEFS.darwin)
 VBoxSVGA3DObjC_INCS        = $(VBoxSVGA3D_INCS)
 VBoxSVGA3DObjC_INCS.darwin = $(VBoxSVGA3D_INCS.darwin)
 VBoxSVGA3DObjC_LIBS        = $(LIB_RUNTIME)
 VBoxSVGA3DObjC_LDFLAGS.darwin = \
 	-install_name $(VBOX_DYLD_EXECUTABLE_PATH)/VBoxSVGA3DObjC.dylib \
 	-framework OpenGL
 if 1
 VBoxSVGA3DObjC_SOURCES.darwin += \
 	Graphics/DevVGA-SVGA3d-cocoa.m
 else
 VBoxSVGA3DObjC_SOURCES.darwin += \
 	../HostServices/SharedOpenGL/render/renderspu_cocoa_helper.m \
 	../HostServices/SharedOpenGL/OpenGLTest/OpenGLTestDarwin.cpp
 endif


endif # defined(VBOX_WITH_VMSVGA3D) && !defined(VBOX_ONLY_EXTPACKS)

include $(FILE_KBUILD_SUB_FOOTER)

