# $Id$
## @file
# Sub-Makefile for the Skeleton Extension Pack Sample.
#

#
# Copyright (C) 2010-2017 Oracle Corporation
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

SUB_DEPTH = ../../../..
include $(KBUILD_PATH)/subheader.kmk

#
# Extend the extension pack templates.
#
TEMPLATE_VBoxR3ExtPackSkeleton          = For the ring-3 context modules in the Skeleton extension pack.
TEMPLATE_VBoxR3ExtPackSkeleton_EXTENDS  = VBoxR3ExtPack
TEMPLATE_VBoxR3ExtPackSkeleton_INST     = $(INST_EXTPACK)Skeleton/$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/

TEMPLATE_VBoxR0ExtPackSkeleton          = For the ring-0 context modules in the Skeleton extension pack.
TEMPLATE_VBoxR0ExtPackSkeleton_EXTENDS  = VBoxR0ExtPack
TEMPLATE_VBoxR0ExtPackSkeleton_INST     = $(INST_EXTPACK)Skeleton/$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/

TEMPLATE_VBoxRcExtPackSkeleton          = For the raw-mode context modules in the Skeleton extension pack.
TEMPLATE_VBoxRcExtPackSkeleton_EXTENDS  = VBoxRcExtPack
TEMPLATE_VBoxRcExtPackSkeleton_INST     = $(INST_EXTPACK)Skeleton/$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/

TEMPLATE_VBoxInsExtPackSkeleton         = For the install targets of an extension pack.
TEMPLATE_VBoxInsExtPackSkeleton_EXTENDS = VBoxR0ExtPack
TEMPLATE_VBoxInsExtPackSkeleton_INST    = $(INST_EXTPACK)Skeleton/

#
# Globals.
#
VBOX_SKELETON_NAME         = Skeleton
VBOX_SKELETON_MANGLED_NAME = Skeleton
VBOX_PATH_EXTPACK_SKELETON = $(PATH_STAGE)/$(INST_EXTPACK)Skeleton


#
# VBoxSkeletonMain - The module which the VirtualBox Main API talks to.
#
DLLS += VBoxSkeletonMain
VBoxSkeletonMain_TEMPLATE = VBoxR3ExtPackSkeleton
VBoxSkeletonMain_SOURCES = VBoxSkeletonMain.cpp
VBoxSkeletonMain_DEFS =

#
# VBoxSkeletonMainVM - The module in a VM which the VirtualBox Main API talks to.
#
DLLS += VBoxSkeletonMainVM
VBoxSkeletonMainVM_TEMPLATE = VBoxR3ExtPackSkeleton
VBoxSkeletonMainVM_SOURCES = VBoxSkeletonMainVM.cpp
VBoxSkeletonMainVM_DEFS =

#
# Install the description.
#
INSTALLS += VBoxSkeletonIns
VBoxSkeletonIns_TEMPLATE = VBoxInsExtPackSkeleton
VBoxSkeletonIns_SOURCES = \
	$(VBoxSkeletonIns_0_OUTDIR)/ExtPack.xml
$(call VBOX_EDIT_VERSION_RULE_FN,VBoxSkeletonIns,ExtPack.xml)


#
# Packing.
#
ifndef VBOX_WITHOUT_EXTPACK_SKELETON_PACKING
 PACKING += $(VBOX_PATH_PACKAGES)/$(VBOX_SKELETON_MANGLED_NAME)-$(VBOX_VERSION_STRING)r$(VBOX_SVN_REV).vbox-extpack
endif

ifndef VBOX_WITH_EXTPACK_OS_ARCHS
 ifeq ($(USER),bird) # for now
  VBOX_WITH_EXTPACK_OS_ARCHS = $(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)
 endif
endif

# Build the file list.  The macro takes 1=darwin.x86, 2=dist/VirtualBox.app/Contents/MacOS, 3=dylib
VBOX_SKELETON_FILES_MACRO = \
	$(PATH_OUT_BASE)/$(1)/$(KBUILD_TYPE)/$(2)/ExtensionPacks/$(VBOX_SKELETON_MANGLED_NAME)/$(1)/VBoxSkeletonMain.$(3)=>$(1)/VBoxSkeletonMain.$(3) \
	$(PATH_OUT_BASE)/$(1)/$(KBUILD_TYPE)/$(2)/ExtensionPacks/$(VBOX_SKELETON_MANGLED_NAME)/$(1)/VBoxSkeletonMainVM.$(3)=>$(1)/VBoxSkeletonMainVM.$(3)

VBOX_SKELETON_FILES := \
	$(VBOX_PATH_EXTPACK_SKELETON)/ExtPack.xml=>ExtPack.xml

if1of (darwin.amd64, $(VBOX_WITH_EXTPACK_OS_ARCHS))
 VBOX_SKELETON_FILES += $(call VBOX_SKELETON_FILES_MACRO,darwin.amd64,dist/VirtualBox.app/Contents/MacOS,dylib)
endif
if1of (darwin.x86, $(VBOX_WITH_EXTPACK_OS_ARCHS))
 VBOX_SKELETON_FILES += $(call VBOX_SKELETON_FILES_MACRO,darwin.x86,dist/VirtualBox.app/Contents/MacOS,dylib)
endif
if1of (freebsd.amd64, $(VBOX_WITH_EXTPACK_OS_ARCHS))
 VBOX_SKELETON_FILES += $(call VBOX_SKELETON_FILES_MACRO,freebsd.amd64,bin,so)
endif
if1of (freebsd.x86, $(VBOX_WITH_EXTPACK_OS_ARCHS))
 VBOX_SKELETON_FILES += $(call VBOX_SKELETON_FILES_MACRO,freebsd.x86,bin,so)
endif
if1of (linux.amd64, $(VBOX_WITH_EXTPACK_OS_ARCHS))
 VBOX_SKELETON_FILES += $(call VBOX_SKELETON_FILES_MACRO,linux.amd64,bin,so)
endif
if1of (linux.x86, $(VBOX_WITH_EXTPACK_OS_ARCHS))
 VBOX_SKELETON_FILES += $(call VBOX_SKELETON_FILES_MACRO,linux.x86,bin,so)
endif
if1of (os2.x86, $(VBOX_WITH_EXTPACK_OS_ARCHS))
 VBOX_SKELETON_FILES += $(call VBOX_SKELETON_FILES_MACRO,os2.x86,bin,so)
endif
if1of (solaris.amd64, $(VBOX_WITH_EXTPACK_OS_ARCHS))
 VBOX_SKELETON_FILES += $(call VBOX_SKELETON_FILES_MACRO,solaris.amd64,bin,so)
endif
if1of (solaris.x86, $(VBOX_WITH_EXTPACK_OS_ARCHS))
 VBOX_SKELETON_FILES += $(call VBOX_SKELETON_FILES_MACRO,solaris.x86,bin,so)
endif
if1of (win.amd64, $(VBOX_WITH_EXTPACK_OS_ARCHS))
 VBOX_SKELETON_FILES += $(call VBOX_SKELETON_FILES_MACRO,win.amd64,bin,dll)
endif
if1of (win.x86, $(VBOX_WITH_EXTPACK_OS_ARCHS))
 VBOX_SKELETON_FILES += $(call VBOX_SKELETON_FILES_MACRO,win.x86,bin,dll)
endif

# Pack it all up using a temporary staging directory.
$(VBOX_PATH_PACKAGES)/$(VBOX_SKELETON_MANGLED_NAME)-$(VBOX_VERSION_STRING)r$(VBOX_SVN_REV).vbox-extpack: \
		$$(foreach file, $$(VBOX_SKELETON_FILES), $$(firstword $$(subst =>,$$(SP),$$(file)))) \
		| $(VBOX_PATH_PACKAGES)/
	$(RM) -f $(wildcard $(VBOX_PATH_PACKAGES)/$(VBOX_SKELETON_MANGLED_NAME)-*.vbox-extpack) \
		$(VBoxSkeletonIns_0_OUTDIR)/ExtPack.manifest \
		$(VBoxSkeletonIns_0_OUTDIR)/ExtPack.signature
# Stage all the files
	$(RM) -Rf $(VBoxSkeletonIns_0_OUTDIR)/Stage/
	$(foreach file, $(VBOX_SKELETON_FILES),\
		$(NLTAB)$(MKDIR) -p $(dir $(lastword $(subst =>,$(SP)$(VBoxSkeletonIns_0_OUTDIR)/Stage/,$(file)))) \
		$(NLTAB)$(CP) $(subst =>,$(SP)$(VBoxSkeletonIns_0_OUTDIR)/Stage/,$(file)) )
# Create the manifest
	$(VBOX_RTMANIFEST) \
		--manifest $(VBoxSkeletonIns_0_OUTDIR)/Stage/ExtPack.manifest \
		--chdir $(VBoxSkeletonIns_0_OUTDIR)/Stage/ \
		$(foreach file, $(VBOX_SKELETON_FILES), $(lastword $(subst =>,$(SP),$(file))))
	$(APPEND) $(VBoxSkeletonIns_0_OUTDIR)/Stage/ExtPack.signature "todo"
	$(CHMOD) a+r \
		$(VBoxSkeletonIns_0_OUTDIR)/Stage/ExtPack.manifest \
		$(VBoxSkeletonIns_0_OUTDIR)/Stage/ExtPack.signature
# Tar it up.
	tar -cvf - -C $(VBoxSkeletonIns_0_OUTDIR)/Stage/ . | gzip -9c > $@
# Clean up
	$(RM) -Rf $(VBoxSkeletonIns_0_OUTDIR)/Stage/

BLDDIRS += $(VBOX_PATH_PACKAGES)/

include $(FILE_KBUILD_SUB_FOOTER)

