# $Id$
## @file
# Sub-Makefile for the Network Filter Driver (VBoxNetFlt).
#

#
# Copyright (C) 2008-2024 Oracle and/or its affiliates.
#
# This file is part of VirtualBox base platform packages, as
# available from https://www.virtualbox.org.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, in version 3 of the
# License.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <https://www.gnu.org/licenses>.
#
# The contents of this file may alternatively be used under the terms
# of the Common Development and Distribution License Version 1.0
# (CDDL), a copy of it is provided in the "COPYING.CDDL" file included
# in the VirtualBox distribution, in which case the provisions of the
# CDDL are applicable instead of those of the GPL.
#
# You may elect to license modified versions of this file under the
# terms and conditions of either the GPL or the CDDL or both.
#
# SPDX-License-Identifier: GPL-3.0-only OR CDDL-1.0
#

SUB_DEPTH = ../../../..
include $(KBUILD_PATH)/subheader.kmk


if1of ($(KBUILD_TARGET), darwin) # this ifeq must go, see @todo around elif
 #
 # The mixed case driver.
 #
 ifdef VBOX_WITH_VBOXDRV
  SYSMODS.darwin += VBoxNetFlt
 endif

 # The driver.
 VBoxNetFlt_TEMPLATE = VBoxR0Drv
 VBoxNetFlt_INST = $(INST_VBOXNETFLT)$(if $(eq $(KBUILD_TARGET),darwin),Contents/MacOS/)
 VBoxNetFlt_DEBUG_INST.darwin = $(patsubst %/,%,$(INST_VBOXNETFLT))
 VBoxNetFlt_DEFS    = IN_RT_R0 IN_SUP_STATIC
 VBoxNetFlt_INCS    = .
 VBoxNetFlt_SOURCES = \
 	darwin/VBoxNetFlt-darwin.cpp
 VBoxNetFlt_SOURCES = VBoxNetFlt.c
 #VBoxNetFlt_LDFLAGS.darwin = -v -Wl,-whyload -Wl,-v -Wl,-whatsloaded
 VBoxNetFlt_LIBS = \
 	$(PATH_STAGE_LIB)/SUPR0IdcClient$(VBOX_SUFF_LIB)

 darwin/VBoxNetFlt-darwin.cpp_DEFS = VBOX_SVN_REV=$(VBOX_SVN_REV)

 # Darwin extras.
 if "$(KBUILD_TARGET)" == "darwin" && defined(VBOX_WITH_VBOXDRV)
  INSTALLS += VBoxNetFlt.kext
  VBoxNetFlt.kext_INST    = $(INST_VBOXNETFLT)Contents/
  VBoxNetFlt.kext_SOURCES = $(VBoxNetFlt.kext_0_OUTDIR)/Contents/Info.plist
  VBoxNetFlt.kext_CLEAN   = $(VBoxNetFlt.kext_0_OUTDIR)/Contents/Info.plist
  VBoxNetFlt.kext_BLDDIRS = $(VBoxNetFlt.kext_0_OUTDIR)/Contents/

  $$(VBoxNetFlt.kext_0_OUTDIR)/Contents/Info.plist: $(PATH_SUB_CURRENT)/darwin/Info.plist $(VBOX_VERSION_MK) | $$(dir $$@)
	$(call MSG_GENERATE,VBoxNetFlt,$@,$<)
	$(QUIET)$(RM) -f $@
	$(QUIET)$(SED) \
		-e 's+@VBOX_VERSION_STRING@+$(VBOX_VERSION_STRING)+g' \
		-e 's+@VBOX_VERSION_MAJOR@+$(VBOX_VERSION_MAJOR)+g' \
		-e 's+@VBOX_VERSION_MINOR@+$(VBOX_VERSION_MINOR)+g' \
		-e 's+@VBOX_VERSION_BUILD@+$(VBOX_VERSION_BUILD)+g' \
		-e 's+@VBOX_VENDOR@+$(VBOX_VENDOR)+g' \
		-e 's+@VBOX_PRODUCT@+$(VBOX_PRODUCT)+g' \
		-e 's+@VBOX_C_YEAR@+$(VBOX_C_YEAR)+g' \
		--output $@ \
		$<

  $(evalcall2 VBOX_TEST_SIGN_KEXT,VBoxNetFlt)

  INSTALLS.darwin += Scripts-darwin
  Scripts-darwin_INST = $(INST_DIST)
  Scripts-darwin_EXEC_SOURCES = \
  	darwin/loadnetflt.sh
 endif # darwin && host-drivers

 ifeq ($(KBUILD_TARGET),win)
  #
  # VBoxNetLwf.sys - The light-weight filter driver for NDIS6 (i.e. Windows only).
  #
  ifdef VBOX_WITH_VBOXDRV
   SYSMODS.win  += VBoxNetLwf
   INSTALLS.win += VBoxNetLwf-inf
  endif
  # The driver.
  VBoxNetLwf_TEMPLATE = VBoxR0Drv
  VBoxNetLwf_INST = $(INST_VBOXNETFLT)
  if defined(VBOX_SIGNING_MODE)
   VBoxNetLwf_INSTTYPE = none
   VBoxNetLwf_DEBUG_INSTTYPE = both
  endif
  VBoxNetLwf_DEFS = IN_RT_R0 IN_SUP_STATIC
  VBoxNetLwf_DEFS.win = NDISLWF=1 DBG=1
  # VBoxNetLwf_DEFS.win += VBOXNETFLT_STATIC_CONFIG
  # VBoxNetLwf_DEFS.win += VBOXNETFLT_NO_PACKET_QUEUE
  # VBoxNetLwf_DEFS.win += NDIS_MINIPORT_DRIVER NDIS_WDM=1 BINARY_COMPATIBLE=0
  # ifdef VBOX_LOOPBACK_USEFLAGS
  #  VBoxNetLwf_DEFS.win += VBOX_LOOPBACK_USEFLAGS
  # endif
  VBoxNetLwf_DEFS.win.x86   = NDIS60=1
  VBoxNetLwf_DEFS.win.amd64 = NDIS60=1
  VBoxNetLwf_DEFS.win.arm64 = NDIS630=1 # The minimum version for non-x86/amd64.
  VBoxNetLwf_SDKS.win = ReorderCompilerIncs $(VBOX_WINDDK_WLH) $(VBOX_WINPSDK_INCS)
  VBoxNetLwf_INCS = .
  VBoxNetLwf_SOURCES = \
  	win/drv/VBoxNetLwf-win.cpp \
  	VBoxNetFlt.c \
  	VBoxNetFlt.rc
  VBoxNetLwf_LDFLAGS.win.x86   := -Entry:DriverEntry@8
  VBoxNetLwf_LDFLAGS.win.amd64 := -Entry:DriverEntry
  VBoxNetLwf_LDFLAGS.win.arm64 := -Entry:DriverEntry
  VBoxNetLwf_LIBS.win = \
  	$(PATH_SDK_$(VBOX_WINDDK_WLH)_LIB)/ntoskrnl.lib \
  	$(PATH_SDK_$(VBOX_WINDDK_WLH)_LIB)/hal.lib \
  	$(PATH_SDK_$(VBOX_WINDDK_WLH)_LIB)/ndis.lib \
  	$(PATH_SDK_$(VBOX_WINDDK_WLH)_LIB)/netio.lib \
  	$(PATH_STAGE_LIB)/RuntimeR0Drv$(VBOX_SUFF_LIB)
  VBoxNetLwf_LIBS.win.arm64 = \
  	$(PATH_SDK_$(VBOX_WINDDK_WLH)_LIB)/BufferOverflowFastFailK.lib
  VBoxNetLwf_LIBS = \
  	$(PATH_STAGE_LIB)/SUPR0IdcClient$(VBOX_SUFF_LIB)

  # VBoxNetLwf INF & CAT files.
  VBoxNetLwf-inf_TEMPLATE = VBoxR0DrvInfCat
  VBoxNetLwf-inf_SOURCES = \
  	$(PATH_TARGET)/VBoxNetLwfCat.dir/VBoxNetLwf.inf
  VBoxNetLwf-inf_CLEAN = $(VBoxNetLwf-inf_SOURCES)
  VBoxNetLwf-inf_BLDDIRS = $(PATH_TARGET)/VBoxNetLwfCat.dir

  $(PATH_TARGET)/VBoxNetLwfCat.dir/VBoxNetLwf.inf: $(PATH_SUB_CURRENT)/win/drv/VBoxNetLwf.inf $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(call MSG_GENERATE,VBoxNetLwf-inf,$@,$<)
	$(call VBOX_EDIT_INF_FN,$<,$@)

  ifdef VBOX_SIGNING_MODE
   VBoxNetLwf-inf_SOURCES += \
   	$(PATH_TARGET)/VBoxNetLwfCat.dir/VBoxNetLwf.sys \
   	$(PATH_TARGET)/VBoxNetLwfCat.dir/VBoxNetLwf.cat
   #	$(PATH_TARGET)/VBoxNetLwfCat.dir/VBoxNetLwfNobj.dll
   VBoxNetLwf-inf_SOURCES.win.x86 += \
   	$(PATH_TARGET)/VBoxNetLwfCat.dir/VBoxNetLwf.cat=>VBoxNetLwf-PreW10.cat
   VBoxNetLwf-inf_SOURCES.win.amd64 += \
   	$(PATH_TARGET)/VBoxNetLwfCat.dir/VBoxNetLwf.cat=>VBoxNetLwf-PreW10.cat

   $(PATH_TARGET)/VBoxNetLwfCat.dir/VBoxNetLwf.sys: $$(VBoxNetLwf_1_TARGET) | $$(dir $$@)
	$(INSTALL) -m 644 $< $(@D)

   #$(PATH_TARGET)/VBoxNetLwfCat.dir/VBoxNetLwfNobj.dll: $$(VBoxNetLwfNobj_1_TARGET) | $$(dir $$@)
   #	$(INSTALL) -m 644 $< $(@D)

   $(PATH_TARGET)/VBoxNetLwfCat.dir/VBoxNetLwf.cat: \
   		$(PATH_TARGET)/VBoxNetLwfCat.dir/VBoxNetLwf.sys \
   		$(PATH_TARGET)/VBoxNetLwfCat.dir/VBoxNetLwf.inf
	$(call MSG_TOOL,Inf2Cat,VBoxNetLwf-inf,$@,$<)
	$(call VBOX_MAKE_CAT_FN, $(@D),$@)
  endif # VBOX_SIGNING_MODE


  #
  # WinNetConfig - static library with host network interface config API (for the installer)
  #
  LIBRARIES.win += WinNetConfigSharedStatic
  WinNetConfigSharedStatic_TEMPLATE = VBoxR3StaticDllNoAsan
  WinNetConfigSharedStatic_SDKS    = ReorderCompilerIncs $(VBOX_WINPSDK) $(VBOX_WINDDK)
  WinNetConfigSharedStatic_DEFS    = _UNICODE UNICODE
  WinNetConfigSharedStatic_SOURCES = \
  	win/cfg/VBoxNetCfg.cpp \
  	../../Main/glue/string.cpp

  # Version for DLLs:
  LIBRARIES.win += WinNetConfigDll
  WinNetConfigDll_TEMPLATE = VBoxR3Dll
  WinNetConfigDll_EXTENDS = WinNetConfigSharedStatic

  # Version for EXEs:
  LIBRARIES.win += WinNetConfigExe
  WinNetConfigExe_TEMPLATE = VBoxR3Exe
  WinNetConfigExe_EXTENDS = WinNetConfigSharedStatic

  #
  # Template for NetFltInstall and friends.
  #
  TEMPLATE_VBoxNetFltR3 = Template for NetAdp6Install and NetAdp6Uninstall
  TEMPLATE_VBoxNetFltR3_EXTENDS   = VBoxR3Exe
  TEMPLATE_VBoxNetFltR3_SDKS      = $(TEMPLATE_VBoxR3Exe_SDKS) ReorderCompilerIncs $(VBOX_WINPSDK) $(VBOX_WINDDK) VBoxNtDll VBoxWinNewDevLib
  TEMPLATE_VBoxNetFltR3_LATE_LIBS = $(TEMPLATE_VBoxR3Exe_LATE_LIBS) \
  	$(WinNetConfigExe_1_TARGET) \
  	$(PATH_STAGE_LIB)/VBoxDrvCfgExe$(VBOX_SUFF_LIB) \
  	$(LIB_RUNTIME) \
  	$(PATH_TOOL_$(VBOX_VCC_TOOL)_LIB)/comsupp.lib \
  	$(PATH_SDK_$(VBOX_WINPSDK)_LIB)/WbemUuid.Lib

  #
  # NetAdp6Install
  #
  PROGRAMS.win += NetAdp6Install
  NetAdp6Install_TEMPLATE = VBoxNetFltR3
  NetAdp6Install_SOURCES = win/tools/VBoxNetAdpInstall.cpp
  NetAdp6Install_DEFS    = NDIS60=1

  #
  # NetAdp6Uninstall
  #
  PROGRAMS.win += NetAdp6Uninstall
  NetAdp6Uninstall_TEMPLATE = VBoxNetFltR3
  NetAdp6Uninstall_SOURCES = win/tools/VBoxNetAdpUninstall.cpp
  NetAdp6Uninstall_DEFS    = NDIS60=1

  #
  # NetLwfInstall
  #
  PROGRAMS.win += NetLwfInstall
  NetLwfInstall_TEMPLATE = VBoxNetFltR3
  NetLwfInstall_SOURCES = win/tools/VBoxNetLwfInstall.cpp

  #
  # NetLwfUninstall
  #
  PROGRAMS.win += NetLwfUninstall
  NetLwfUninstall_TEMPLATE = VBoxNetFltR3
  NetLwfUninstall_SOURCES = win/tools/VBoxNetLwfUninstall.cpp

 endif # $(KBUILD_TARGET) == win
else if1of ($(KBUILD_TARGET), solaris freebsd) ## @todo merge this with the mixed case stuff.
 #
 # vboxnetflt(.ko/.o/) - The lower case driver.
 # Note! On Solaris the name has to be <= 8 chars long.
 # The DEBUG_HASH* stuff is for CONFIG_DYNAMIC_DEBUG-enabled kernels
 #
 ifdef VBOX_WITH_VBOXDRV
  SYSMODS += vboxnetflt
  vboxnetflt_TEMPLATE      = VBoxR0Drv
  vboxnetflt_NAME.solaris  = vboxflt
  vboxnetflt_DEFS          = IN_RT_R0
  vboxnetflt_DEPS.solaris += $(VBOX_SVN_REV_KMK)
  vboxnetflt_INCS         := \
  	$(PATH_SUB_CURRENT)
  vboxnetflt_LDFLAGS.solaris += -N drv/vboxdrv -N misc/ctf
  vboxnetflt_LIBS = \
  	$(PATH_STAGE_LIB)/SUPR0IdcClient$(VBOX_SUFF_LIB)
  ## @todo vboxflt should resolves all the IPRT bits from vboxdrv.
  #vboxnetflt_LIBS += \
  #	$(PATH_STAGE_LIB)/RuntimeR0Drv$(VBOX_SUFF_LIB)
  vboxnetflt_SOURCES.solaris = solaris/VBoxNetFlt-solaris.c
  vboxnetflt_SOURCES.freebsd = freebsd/VBoxNetFlt-freebsd.c
  vboxnetflt_SOURCES = VBoxNetFlt.c
  solaris/VBoxNetFlt-solaris.c_DEFS = VBOX_SVN_REV=$(VBOX_SVN_REV)

  ifdef VBOX_WITH_NETFLT_CROSSBOW
   SYSMODS += vboxnetbow
   vboxnetbow_TEMPLATE      = VBoxR0Drv
   vboxnetbow_NAME          = vboxbow
   vboxnetbow_DEFS          = vboxnetflt_DEFS VBOX_WITH_NETFLT_CROSSBOW
   vboxnetbow_INCS         := $(PATH_SUB_CURRENT)
   vboxnetbow_LDFLAGS      += -N drv/vboxdrv -N drv/vnic -N misc/mac -N misc/dls
   vboxnetbow_LIBS = \
   	$(PATH_STAGE_LIB)/SUPR0IdcClient$(VBOX_SUFF_LIB)
   vboxnetbow_SOURCES.solaris = solaris/VBoxNetFltBow-solaris.c
   vboxnetbow_SOURCES         = VBoxNetFlt.c
   solaris/VBoxNetFltBow-solaris.c_DEFS = VBOX_SVN_REV=$(VBOX_SVN_REV)
  endif  # VBOX_WITH_NETFLT_CROSSBOW
 endif # VBOX_WITH_VBOXDRV
endif # to be removed.


ifeq ($(KBUILD_TARGET),linux)
 #
 # Install source files for compilation on Linux.
 # files_vboxnetflt defines VBOX_VBOXNETFLT_SOURCES.
 #
 include $(PATH_SUB_CURRENT)/linux/files_vboxnetflt
 INSTALLS += VBoxNetFlt-src VBoxNetFlt-sh
 VBoxNetFlt-src_INST    = bin/src/vboxnetflt/
 VBoxNetFlt-src_SOURCES = \
 	$(subst $(DQUOTE),,$(VBOX_VBOXNETFLT_SOURCES)) \
 	$(VBoxNetFlt-src_0_OUTDIR)/Makefile
 VBoxNetFlt-src_CLEAN   = \
 	$(VBoxNetFlt-src_0_OUTDIR)/Makefile \
 	$(PATH_TARGET)/VBoxNetFlt-src-1.dep

 # Scripts needed for building the kernel module.

 includedep $(PATH_TARGET)/VBoxNetFlt-src-1.dep
 $$(VBoxNetFlt-src_0_OUTDIR)/Makefile: \
 		$(PATH_SUB_CURRENT)/linux/Makefile \
 		$$(if $$(eq $$(VBoxNetFlt/linux/Makefile_VBOX_HARDENED),$$(VBOX_WITH_HARDENING)),,FORCE) \
 		| $$(dir $$@)
	$(QUIET)$(RM) -f -- $@
 ifndef VBOX_WITH_HARDENING
	$(QUIET)$(SED) -e "s;VBOX_WITH_HARDENING;;g" --output $@ $<
 else
	$(QUIET)$(CP) -f $< $@
 endif
	%$(QUIET2)$(RM) -f -- $(PATH_TARGET)/VBoxNetFlt-src-1.dep
	%$(QUIET2)$(APPEND) '$(PATH_TARGET)/VBoxNetFlt-src-1.dep' 'VBoxNetFlt/linux/Makefile_VBOX_HARDENED=$(VBOX_WITH_HARDENING)'

 #
 # Build test for the linux host kernel modules.
 #
 $(evalcall2 VBOX_LINUX_KMOD_TEST_BUILD_RULE_FN,VBoxNetFlt-src,vboxdrv-src,)
endif # linux

# Gross hack for FreeBSD 7, should figure this out properly
## @todo Properly generate opt_netgraph.h
ifeq ($(KBUILD_TARGET),freebsd)
 vboxnetflt_DEPS.freebsd += $(PATH_OUT)/opt_netgraph.h
 $(PATH_OUT)/opt_netgraph.h:
	echo > $(PATH_OUT)/opt_netgraph.h

 #
 # Install source files for compilation on FreeBSD.
 # files_vboxnetflt defines VBOX_VBOXNETFLT_SOURCES.
 #
 include $(PATH_SUB_CURRENT)/freebsd/files_vboxnetflt
 INSTALLS += VBoxNetFlt-src
 VBoxNetFlt-src_INST    = bin/src/vboxnetflt/
 VBoxNetFlt-src_SOURCES = \
 	$(subst $(DQUOTE),,$(VBOX_VBOXNETFLT_SOURCES)) \
 	$(VBoxNetFlt-src_0_OUTDIR)/Makefile
 VBoxNetFlt-src_CLEAN   = \
 	$(VBoxNetFlt-src_0_OUTDIR)/Makefile

 $$(VBoxNetFlt-src_0_OUTDIR)/Makefile: \
 		$(PATH_SUB_CURRENT)/freebsd/Makefile \
 		$$(if $$(eq $$(VBoxNetFlt/freebsd/Makefile_VBOX_HARDENED),$$(VBOX_WITH_HARDENING)),,FORCE) \
 		| $$(dir $$@)
	$(QUIET)$(RM) -f -- $@
	$(QUIET)$(CP) -f $< $@
 ifndef VBOX_WITH_HARDENING
	$(QUIET)$(SED) -e "s;VBOX_WITH_HARDENING;;g" --output $@.tmp $@
	${QUIET}$(MV) -f $@.tmp $@
 endif
 ifndef VBOX_WITH_NETFLT_VIMAGE
	$(QUIET)$(SED) -e "s;-DVIMAGE;;g" --output $@.tmp $@
	${QUIET}$(MV) -f $@.tmp $@
 endif
endif # freebsd

include $(FILE_KBUILD_SUB_FOOTER)

