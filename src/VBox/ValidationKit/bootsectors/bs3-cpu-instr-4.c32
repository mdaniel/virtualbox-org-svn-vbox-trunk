/* $Id$ */
/** @file
 * BS3Kit - bs3-cpu-instr-4 - SSE, AVX FPU instructions, C code template.
 */

/*
 * Copyright (C) 2024 Oracle and/or its affiliates.
 *
 * This file is part of VirtualBox base platform packages, as
 * available from https://www.virtualbox.org.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, in version 3 of the
 * License.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <https://www.gnu.org/licenses>.
 *
 * The contents of this file may alternatively be used under the terms
 * of the Common Development and Distribution License Version 1.0
 * (CDDL), a copy of it is provided in the "COPYING.CDDL" file included
 * in the VirtualBox distribution, in which case the provisions of the
 * CDDL are applicable instead of those of the GPL.
 *
 * You may elect to license modified versions of this file under the
 * terms and conditions of either the GPL or the CDDL or both.
 *
 * SPDX-License-Identifier: GPL-3.0-only OR CDDL-1.0
 */


/*********************************************************************************************************************************
*   Header Files                                                                                                                 *
*********************************************************************************************************************************/
#include <bs3kit.h>
#include "bs3-cpu-instr-4-asm-auto.h"
#include "bs3-cpu-instr-x-regs.c32"

#include <iprt/asm.h>
#include <iprt/asm-amd64-x86.h>


/*********************************************************************************************************************************
*   Defined Constants And Macros                                                                                                 *
*********************************************************************************************************************************/
/** Maximum length for the names of all SIMD FP exception flags combined. */
#define FP_XCPT_FLAGS_NAMES_MAXLEN          sizeof(" IE DE ZE OE UE PE ")
/** Maximum length for the names of all SIMD FP exception masks combined. */
#define FP_XCPT_MASKS_NAMES_MAXLEN          sizeof(" IM DM ZM OM UM PM ")
/** Maximum length for the names of all SIMD FP exception other bits combined. */
#define FP_XCPT_OTHERS_NAMES_MAXLEN         sizeof(" DAZ FZ MM RC=NEAREST ")

/*
 * Single-precision (32 bits) floating-point defines.
 */
/** The max exponent value for a single-precision floating-point normal. */
#define FP32_EXP_NORM_MAX                   254
/** The min exponent value for a single-precision floating-point normal. */
#define FP32_EXP_NORM_MIN                   1
/** The max fraction value for a single-precision floating-point normal. */
#define FP32_FRAC_NORM_MAX                  0x7fffff
/** The min fraction value for a single-precision floating-point normal. */
#define FP32_FRAC_NORM_MIN                  0
/** The exponent bias for the single-precision floating-point format. */
#define FP32_EXP_BIAS                       RTFLOAT32U_EXP_BIAS
/** Fraction width (in bits) for the single-precision floating-point format. */
#define FP32_FRAC_BITS                      RTFLOAT32U_FRACTION_BITS
/** The max exponent value for a single-precision floating-point integer without
 *  losing precision. */
#define FP32_EXP_SAFE_INT_MAX               FP32_EXP_BIAS + FP32_FRAC_BITS
/** The min exponent value for a single-precision floating-point integer without
 *  losing precision. */
#define FP32_EXP_SAFE_INT_MIN               1
/** The max fraction value for a single-precision floating-point denormal. */
#define FP32_FRAC_DENORM_MAX                0x7fffff
/** The min fraction value for a single-precision floating-point denormal. */
#define FP32_FRAC_DENORM_MIN                1
/** The max fraction value for a single-precision floating-point signalling NAN. */
#define FP32_FRAC_SNAN_MAX                  0x3fffff
/** The min fraction value for a single-precision floating-point signalling NAN. */
#define FP32_FRAC_SNAN_MIN                  1
/** The max fraction value for a single-precision floating-point quiet NAN. */
#define FP32_FRAC_QNAN_MAX                  0x7fffff
/** The min fraction value for a single-precision floating-point quiet NAN. */
#define FP32_FRAC_QNAN_MIN                  0x400000

#define FP32_NORM_MAX(a_Sign)               RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_NORM_MAX, FP32_EXP_NORM_MAX)
#define FP32_NORM_MIN(a_Sign)               RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_NORM_MIN, FP32_EXP_NORM_MIN)
#define FP32_0(a_Sign)                      RTFLOAT32U_INIT_ZERO(a_Sign)
#define FP32_1(a_Sign)                      RTFLOAT32U_INIT_C(a_Sign, 0, RTFLOAT32U_EXP_BIAS)
#define FP32_2(a_Sign)                      RTFLOAT32U_INIT_C(a_Sign, 0, RTFLOAT32U_EXP_BIAS + 1)
#define FP32_V(a_Sign, a_Frac, a_Exp)       RTFLOAT32U_INIT_C(a_Sign, a_Frac, a_Exp)
#define FP32_INF(a_Sign)                    RTFLOAT32U_INIT_INF(a_Sign)
#define FP32_QNAN(a_Sign)                   RTFLOAT32U_INIT_QNAN(a_Sign)
#define FP32_QNAN_V(a_Sign, a_Val)          RTFLOAT32U_INIT_QNAN_EX(a_Sign, a_Val)
#define FP32_QNAN_MAX(a_Sign)               RTFLOAT32U_INIT_QNAN_EX(a_Sign, FP32_FRAC_QNAN_MAX)
#define FP32_SNAN(a_Sign)                   RTFLOAT32U_INIT_SNAN(a_Sign)
#define FP32_SNAN_V(a_Sign, a_Val)          RTFLOAT32U_INIT_SNAN_EX(a_Sign, a_Val)
#define FP32_SNAN_MAX(a_Sign)               RTFLOAT32U_INIT_SNAN_EX(a_Sign, FP32_FRAC_SNAN_MAX)
/** @todo Move this to iprt/types.h after renaming it to RTFLOAT32U_MAKE? */
#ifdef RT_BIG_ENDIAN
# define FP32_MAKE(a_Sign, a_Frac, a_Exp)   (((a_Exp) << 1)   | ((a_Frac) << 9) | (a_Sign))
#else
# define FP32_MAKE(a_Sign, a_Frac, a_Exp)   (((a_Sign) << 31) | ((a_Exp) << 23) | (a_Frac))
#endif

/*
 * Single-precision floating normals (non-zero, non-maximum)
 * Fraction - 23 bits, all usable.
 * Exponent - 8 bits (greater than 0 and less than 254)
 */
#define FP32_FRAC_V0                        0x401ac0
#define FP32_FRAC_V1                        0x5fcabd
#define FP32_FRAC_V2                        0x7e117a
#define FP32_FRAC_V3                        0x5b5b5b
#define FP32_FRAC_V4                        0x1e0f1f
#define FP32_FRAC_V5                        0x012345
#define FP32_FRAC_V6                        0x330b3b
#define FP32_FRAC_V7                        0x7fffff
#define FP32_EXP_V0                         0x01
#define FP32_EXP_V1                         0xaf
#define FP32_EXP_V2                         0x7d
#define FP32_EXP_V3                         0xfd
#define FP32_EXP_V4                         0xbc
#define FP32_EXP_V5                         0xd1
#define FP32_EXP_V6                         0x3c
#define FP32_EXP_V7                         0x51
AssertCompile(FP32_EXP_V0 > 0 && FP32_EXP_V0 < FP32_EXP_NORM_MAX);
AssertCompile(FP32_EXP_V1 > 0 && FP32_EXP_V1 < FP32_EXP_NORM_MAX);
AssertCompile(FP32_EXP_V2 > 0 && FP32_EXP_V2 < FP32_EXP_NORM_MAX);
AssertCompile(FP32_EXP_V3 > 0 && FP32_EXP_V3 < FP32_EXP_NORM_MAX);
AssertCompile(FP32_EXP_V4 > 0 && FP32_EXP_V4 < FP32_EXP_NORM_MAX);
AssertCompile(FP32_EXP_V5 > 0 && FP32_EXP_V5 < FP32_EXP_NORM_MAX);
AssertCompile(FP32_EXP_V6 > 0 && FP32_EXP_V6 < FP32_EXP_NORM_MAX);
AssertCompile(FP32_EXP_V7 > 0 && FP32_EXP_V7 < FP32_EXP_NORM_MAX);
AssertCompile(FP32_FRAC_V0 <= FP32_FRAC_NORM_MAX);
AssertCompile(FP32_FRAC_V1 <= FP32_FRAC_NORM_MAX);
AssertCompile(FP32_FRAC_V2 <= FP32_FRAC_NORM_MAX);
AssertCompile(FP32_FRAC_V3 <= FP32_FRAC_NORM_MAX);
AssertCompile(FP32_FRAC_V4 <= FP32_FRAC_NORM_MAX);
AssertCompile(FP32_FRAC_V5 <= FP32_FRAC_NORM_MAX);
AssertCompile(FP32_FRAC_V6 <= FP32_FRAC_NORM_MAX);
AssertCompile(FP32_FRAC_V7 <= FP32_FRAC_NORM_MAX);
#define FP32_NORM_V0(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_V0, FP32_EXP_V0)
#define FP32_NORM_V1(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_V1, FP32_EXP_V1)
#define FP32_NORM_V2(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_V2, FP32_EXP_V2)
#define FP32_NORM_V3(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_V3, FP32_EXP_V3)
#define FP32_NORM_V4(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_V4, FP32_EXP_V4)
#define FP32_NORM_V5(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_V5, FP32_EXP_V5)
#define FP32_NORM_V6(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_V6, FP32_EXP_V6)
#define FP32_NORM_V7(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_V7, FP32_EXP_V7)
AssertCompile(FP32_MAKE(0, FP32_FRAC_V0, FP32_EXP_V0) != FP32_MAKE(0, 0, 0));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V1, FP32_EXP_V1) != FP32_MAKE(0, 0, 0));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V2, FP32_EXP_V2) != FP32_MAKE(0, 0, 0));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V3, FP32_EXP_V3) != FP32_MAKE(0, 0, 0));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V4, FP32_EXP_V4) != FP32_MAKE(0, 0, 0));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V5, FP32_EXP_V5) != FP32_MAKE(0, 0, 0));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V6, FP32_EXP_V6) != FP32_MAKE(0, 0, 0));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V7, FP32_EXP_V7) != FP32_MAKE(0, 0, 0));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V0, FP32_EXP_V0) != FP32_MAKE(0, 0, RTFLOAT32U_EXP_BIAS));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V1, FP32_EXP_V1) != FP32_MAKE(0, 0, RTFLOAT32U_EXP_BIAS));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V2, FP32_EXP_V2) != FP32_MAKE(0, 0, RTFLOAT32U_EXP_BIAS));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V3, FP32_EXP_V3) != FP32_MAKE(0, 0, RTFLOAT32U_EXP_BIAS));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V4, FP32_EXP_V4) != FP32_MAKE(0, 0, RTFLOAT32U_EXP_BIAS));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V5, FP32_EXP_V5) != FP32_MAKE(0, 0, RTFLOAT32U_EXP_BIAS));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V6, FP32_EXP_V6) != FP32_MAKE(0, 0, RTFLOAT32U_EXP_BIAS));
AssertCompile(FP32_MAKE(0, FP32_FRAC_V7, FP32_EXP_V7) != FP32_MAKE(0, 0, RTFLOAT32U_EXP_BIAS));
/* The maximum integer value (all 23 + 1 implied bit of the fraction part set) without losing precision. */
#define FP32_NORM_SAFE_INT_MAX(a_Sign)      RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX)

/*
 * Single-precision floating-point denormals.
 */
#define FP32_DENORM_MAX(a_Sign)             RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_DENORM_MAX, 0)
#define FP32_DENORM_MIN(a_Sign)             RTFLOAT32U_INIT_C(a_Sign, FP32_FRAC_DENORM_MIN, 0)
#define FP32_DENORM_V0(a_Sign)              RTFLOAT32U_INIT_C(a_Sign, 0x7fffff, 0)
#define FP32_DENORM_V1(a_Sign)              RTFLOAT32U_INIT_C(a_Sign, 0x701010, 0)
#define FP32_DENORM_V2(a_Sign)              RTFLOAT32U_INIT_C(a_Sign, 0x6fefbb, 0)
#define FP32_DENORM_V3(a_Sign)              RTFLOAT32U_INIT_C(a_Sign, 0x5b5b2e, 0)
#define FP32_DENORM_V4(a_Sign)              RTFLOAT32U_INIT_C(a_Sign, 0x10c01a, 0)
#define FP32_DENORM_V5(a_Sign)              RTFLOAT32U_INIT_C(a_Sign, 0x000fff, 0)
#define FP32_DENORM_V6(a_Sign)              RTFLOAT32U_INIT_C(a_Sign, 0x700b02, 0)
#define FP32_DENORM_V7(a_Sign)              RTFLOAT32U_INIT_C(a_Sign, 0x000001, 0)

/*
 * Single-precision floating-point invalids.
 * The range must be valid for both QNAN and SNANs (see compile time assertions below).
 */
#define FP32_FRAC_INV_V0                    0x3fffff
#define FP32_FRAC_INV_V1                    0x21301c
#define FP32_FRAC_INV_V2                    0x3c0de0
#define FP32_FRAC_INV_V3                    0x110110
#define FP32_FRAC_INV_V4                    0x0f0f0f
#define FP32_FRAC_INV_V5                    0x10f0f0
#define FP32_FRAC_INV_V6                    0x3ebebe
#define FP32_FRAC_INV_V7                    0x000001
AssertCompile(FP32_FRAC_INV_V0 <= FP32_FRAC_SNAN_MAX && FP32_FRAC_INV_V0 >= FP32_FRAC_SNAN_MIN);
AssertCompile(FP32_FRAC_INV_V1 <= FP32_FRAC_SNAN_MAX && FP32_FRAC_INV_V1 >= FP32_FRAC_SNAN_MIN);
AssertCompile(FP32_FRAC_INV_V2 <= FP32_FRAC_SNAN_MAX && FP32_FRAC_INV_V2 >= FP32_FRAC_SNAN_MIN);
AssertCompile(FP32_FRAC_INV_V3 <= FP32_FRAC_SNAN_MAX && FP32_FRAC_INV_V3 >= FP32_FRAC_SNAN_MIN);
AssertCompile(FP32_FRAC_INV_V4 <= FP32_FRAC_SNAN_MAX && FP32_FRAC_INV_V4 >= FP32_FRAC_SNAN_MIN);
AssertCompile(FP32_FRAC_INV_V5 <= FP32_FRAC_SNAN_MAX && FP32_FRAC_INV_V5 >= FP32_FRAC_SNAN_MIN);
AssertCompile(FP32_FRAC_INV_V6 <= FP32_FRAC_SNAN_MAX && FP32_FRAC_INV_V6 >= FP32_FRAC_SNAN_MIN);
AssertCompile(FP32_FRAC_INV_V7 <= FP32_FRAC_SNAN_MAX && FP32_FRAC_INV_V7 >= FP32_FRAC_SNAN_MIN);
/* Single-precision floating-point signalling NANs (SNAN). */
#define FP32_SNAN_V0(a_Sign)                RTFLOAT32U_INIT_SNAN_EX(a_Sign, FP32_FRAC_INV_V0)
#define FP32_SNAN_V1(a_Sign)                RTFLOAT32U_INIT_SNAN_EX(a_Sign, FP32_FRAC_INV_V1)
#define FP32_SNAN_V2(a_Sign)                RTFLOAT32U_INIT_SNAN_EX(a_Sign, FP32_FRAC_INV_V2)
#define FP32_SNAN_V3(a_Sign)                RTFLOAT32U_INIT_SNAN_EX(a_Sign, FP32_FRAC_INV_V3)
#define FP32_SNAN_V4(a_Sign)                RTFLOAT32U_INIT_SNAN_EX(a_Sign, FP32_FRAC_INV_V4)
#define FP32_SNAN_V5(a_Sign)                RTFLOAT32U_INIT_SNAN_EX(a_Sign, FP32_FRAC_INV_V5)
#define FP32_SNAN_V6(a_Sign)                RTFLOAT32U_INIT_SNAN_EX(a_Sign, FP32_FRAC_INV_V6)
#define FP32_SNAN_V7(a_Sign)                RTFLOAT32U_INIT_SNAN_EX(a_Sign, FP32_FRAC_INV_V7)
/* Single-precision floating-point quiet NANs (QNAN). */
#define FP32_QNAN_V0(a_Sign)                RTFLOAT32U_INIT_QNAN_EX(a_Sign, FP32_FRAC_INV_V0)
#define FP32_QNAN_V1(a_Sign)                RTFLOAT32U_INIT_QNAN_EX(a_Sign, FP32_FRAC_INV_V1)
#define FP32_QNAN_V2(a_Sign)                RTFLOAT32U_INIT_QNAN_EX(a_Sign, FP32_FRAC_INV_V2)
#define FP32_QNAN_V3(a_Sign)                RTFLOAT32U_INIT_QNAN_EX(a_Sign, FP32_FRAC_INV_V3)
#define FP32_QNAN_V4(a_Sign)                RTFLOAT32U_INIT_QNAN_EX(a_Sign, FP32_FRAC_INV_V4)
#define FP32_QNAN_V5(a_Sign)                RTFLOAT32U_INIT_QNAN_EX(a_Sign, FP32_FRAC_INV_V5)
#define FP32_QNAN_V6(a_Sign)                RTFLOAT32U_INIT_QNAN_EX(a_Sign, FP32_FRAC_INV_V6)
#define FP32_QNAN_V7(a_Sign)                RTFLOAT32U_INIT_QNAN_EX(a_Sign, FP32_FRAC_INV_V7)

/*
 * Single-precision random values (incl. potentially invalid values).
 * We don't care what the exact values are as these are meant to populate
 * unmodified parts of operands and be compared bitwise.
 */
#define FP32_RAND_V0(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, 0x7bacda, 0x55)
#define FP32_RAND_V1(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, 0x7010f0, 0xc0)
#define FP32_RAND_V2(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, 0x4ffcbe, 0xf1)
#define FP32_RAND_V3(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, 0x2fd7c8, 0x1f)
#define FP32_RAND_V4(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, 0x5b5b5b, 0x09)
#define FP32_RAND_V5(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, 0x3d2d1d, 0x99)
#define FP32_RAND_V6(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, 0x123456, 0x5e)
#define FP32_RAND_V7(a_Sign)                RTFLOAT32U_INIT_C(a_Sign, 0x05432f, 0xd7)

/*
 * Zeroes and a set of seven random single-precision floating-point values primarily
 * intended to be used for for unused arguments in scalar instructions.
 */
#define FP32_0_x6(a_Sign)                   FP32_0(a_Sign), FP32_0(a_Sign), FP32_0(a_Sign),      \
                                            FP32_0(a_Sign), FP32_0(a_Sign), FP32_0(a_Sign)
#define FP32_0_x7(a_Sign)                   FP32_0_x6(a_Sign), FP32_0(a_Sign)
#define FP32_RAND_x6_V0                     FP32_RAND_V0(0), FP32_RAND_V1(1), FP32_RAND_V2(0),   \
                                            FP32_RAND_V3(0), FP32_NORM_V1(1), FP32_RAND_V5(1)
#define FP32_RAND_x7_V0                     FP32_RAND_x6_V0, FP32_RAND_V6(0)
#define FP32_RAND_x6_V1                     FP32_RAND_V7(0), FP32_RAND_V6(0), FP32_RAND_V5(1),   \
                                            FP32_RAND_V4(1), FP32_QNAN(0),    FP32_RAND_V2(1)
#define FP32_RAND_x7_V1                     FP32_RAND_x6_V1, FP32_NORM_V0(1)
#define FP32_RAND_x6_V2                     FP32_RAND_V1(0), FP32_RAND_V7(1), FP32_RAND_V6(1),   \
                                            FP32_RAND_V2(1), FP32_RAND_V3(1), FP32_RAND_V4(0)
#define FP32_RAND_x7_V2                     FP32_RAND_x6_V2, FP32_INF(0)
#define FP32_RAND_x6_V3                     FP32_RAND_V6(1), FP32_QNAN(0),    FP32_RAND_V2(1),   \
                                            FP32_1(1),       FP32_RAND_V1(0), FP32_INF(1)
#define FP32_RAND_x7_V3                     FP32_RAND_x6_V3, FP32_RAND_V5(0)
#define FP32_RAND_x6_V4                     FP32_RAND_V4(1), FP32_RAND_V6(0), FP32_RAND_V0(0),   \
                                            FP32_RAND_V2(1), FP32_RAND_V1(0), FP32_1(1)
#define FP32_RAND_x7_V4                     FP32_RAND_x6_V4, FP32_SNAN_MAX(1)
#define FP32_RAND_x6_V5                     FP32_RAND_V5(1),  FP32_RAND_V4(1), FP32_QNAN_MAX(1), \
                                            FP32_QNAN_MAX(1), FP32_RAND_V1(0), FP32_RAND_V2(0)
#define FP32_RAND_x7_V5                     FP32_RAND_x6_V5, FP32_RAND_V6(0)
#define FP32_RAND_x6_V6                     FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V6(1),   \
                                            FP32_RAND_V2(0), FP32_QNAN(1),    FP32_QNAN_V(1, 0)
#define FP32_RAND_x7_V6                     FP32_RAND_x6_V6, FP32_SNAN(1)
#define FP32_RAND_x6_V7                     FP32_RAND_V7(0), FP32_RAND_V1(1),   FP32_RAND_V2(0), \
                                            FP32_RAND_V6(1), FP32_QNAN_V(0, 1), FP32_RAND_V2(1)
#define FP32_RAND_x7_V7                     FP32_RAND_x6_V7, FP32_NORM_SAFE_INT_MAX(1)
#define FP32_ROW_UNUSED                     FP32_1(0),       FP32_RAND_x7_V0
#define FP32_x6_UNUSED                      FP32_RAND_x6_V7
#define FP32_x7_UNUSED                      FP32_RAND_x7_V7


/*
 * Macros to store integer values into floating point boxes, allowing testing
 * of instructions which convert between types.
 */
#define INT32_INDEF_C 0x80000000UL
#define INT64_INDEF_C 0x8000000000000000ULL

#define FP32_INT_SIGN_PART(a_uInt32) ((((uint32_t)(a_uInt32)) >> 31) & 1)
#define FP32_INT_EXPN_PART(a_uInt32) ((((uint32_t)(a_uInt32)) >> 23) & 0xFF)
#define FP32_INT_FRAC_PART(a_uInt32) (((uint32_t)(a_uInt32)) & 0x7FFFFF)
#define FP32_INT(a_uInt32) RTFLOAT32U_INIT(FP32_INT_SIGN_PART(a_uInt32), FP32_INT_FRAC_PART(a_uInt32), FP32_INT_EXPN_PART(a_uInt32))
#define FP32_INT_C(a_uInt32) FP32_INT(UINT32_C(a_uInt32))
#define FP32_INT64(a_uInt64) FP32_INT((a_uInt64) & 0xFFFFFFFF), FP32_INT((a_uInt64) >> 32)
#define FP32_INT64_C(a_uInt64) FP32_INT64(UINT64_C(a_uInt64))
#define FP32_INT_INDEF FP32_INT(INT32_INDEF_C)
#define FP32_INT64_INDEF FP32_INT64(INT64_INDEF_C)

#define FP64_INT_SIGN_PART(a_uInt64) ((((uint64_t)(a_uInt64)) >> 63) & 1)
#define FP64_INT_EXPN_PART(a_uInt64) ((((uint64_t)(a_uInt64)) >> 52) & 0x7FF)
#define FP64_INT_FRAC_PART(a_uInt64) (((uint64_t)(a_uInt64)) & 0xFFFFFFFFFFFFF)
#define FP64_INT(a_uInt64) RTFLOAT64U_INIT(FP64_INT_SIGN_PART(a_uInt64), FP64_INT_FRAC_PART(a_uInt64), FP64_INT_EXPN_PART(a_uInt64))
#define FP64_INT_C(a_uInt64) FP64_INT(UINT64_C(a_uInt64))
#define FP64_INT32(a_uInt32_1, a_uInt32_2) FP64_INT(((uint64_t)(a_uInt32_1)) | (((uint64_t)(a_uInt32_2)) << 32))
#define FP64_INT32_C(a_uInt32_1, a_uInt32_2) FP64_INT32(UINT32_C(a_uInt32_1), UINT32_C(a_uInt32_2))
#define FP64_INT_INDEF FP64_INT(INT64_INDEF_C)
#define FP64_INT32_INDEF(a_uInt32_2) FP64_INT32(INT32_INDEF_C, a_uInt32_2)
#define FP64_INT32_INDEFx2 FP64_INT32(INT32_INDEF_C, INT32_INDEF_C)

/*
 * Double-precision (64 bits) floating-point defines.
 */
/** The max exponent value for a double-precision floating-point normal. */
#define FP64_EXP_NORM_MAX                   2046
/** The min exponent value for a double-precision floating-point normal. */
#define FP64_EXP_NORM_MIN                   1
/** The max fraction value for a double-precision floating-point normal. */
#define FP64_FRAC_NORM_MAX                  0xfffffffffffff
/** The min fraction value for a double-precision floating-point normal. */
#define FP64_FRAC_NORM_MIN                  0
/** The exponent bias for the double-precision floating-point format. */
#define FP64_EXP_BIAS                       RTFLOAT64U_EXP_BIAS
/** Fraction width (in bits) for the double-precision floating-point format. */
#define FP64_FRAC_BITS                      RTFLOAT64U_FRACTION_BITS
/** The max exponent value for a double-precision floating-point integer without
 *  losing precision. */
#define FP64_EXP_SAFE_INT_MAX               FP64_EXP_BIAS + FP64_FRAC_BITS
/** The min exponent value for a double-precision floating-point integer without
 *  losing precision. */
#define FP64_EXP_SAFE_INT_MIN               1
/** The max fraction value for a double-precision floating-point denormal. */
#define FP64_FRAC_DENORM_MAX                0xfffffffffffff
/** The min fraction value for a double-precision floating-point denormal. */
#define FP64_FRAC_DENORM_MIN                1
/** The max fraction value for a single-precision floating-point signalling NAN. */
#define FP64_FRAC_SNAN_MAX                  0x7ffffffffffff
/** The min fraction value for a single-precision floating-point signalling NAN. */
#define FP64_FRAC_SNAN_MIN                  1
/** The max fraction value for a single-precision floating-point quiet NAN. */
#define FP64_FRAC_QNAN_MAX                  0xfffffffffffff
/** The min fraction value for a single-precision floating-point quiet NAN. */
#define FP64_FRAC_QNAN_MIN                  0x8000000000000LLU

#define FP64_NORM_MAX(a_Sign)               RTFLOAT64U_INIT_C(a_Sign, FP64_FRAC_NORM_MAX, FP64_EXP_NORM_MAX)
#define FP64_NORM_MIN(a_Sign)               RTFLOAT64U_INIT_C(a_Sign, FP64_FRAC_NORM_MIN, FP64_EXP_NORM_MIN)
#define FP64_0(a_Sign)                      RTFLOAT64U_INIT_ZERO(a_Sign)
#define FP64_1(a_Sign)                      RTFLOAT64U_INIT_C(a_Sign, 0, RTFLOAT64U_EXP_BIAS)
#define FP64_2(a_Sign)                      RTFLOAT64U_INIT_C(a_Sign, 0, RTFLOAT64U_EXP_BIAS + 1)
#define FP64_V(a_Sign, a_Frac, a_Exp)       RTFLOAT64U_INIT_C(a_Sign, a_Frac, a_Exp)
#define FP64_INF(a_Sign)                    RTFLOAT64U_INIT_INF(a_Sign)
#define FP64_QNAN(a_Sign)                   RTFLOAT64U_INIT_QNAN(a_Sign)
#define FP64_QNAN_V(a_Sign, a_Val)          RTFLOAT64U_INIT_QNAN_EX(a_Sign, a_Val)
#define FP64_QNAN_MAX(a_Sign)               RTFLOAT64U_INIT_QNAN_EX(a_Sign, FP64_FRAC_QNAN_MAX)
#define FP64_SNAN(a_Sign)                   RTFLOAT64U_INIT_SNAN(a_Sign)
#define FP64_SNAN_V(a_Sign, a_Val)          RTFLOAT64U_INIT_SNAN_EX(a_Sign, a_Val)
#define FP64_SNAN_MAX(a_Sign)               RTFLOAT64U_INIT_SNAN_EX(a_Sign, FP64_FRAC_SNAN_MAX)
/** @todo Move this to iprt/types.h after renaming it to RTFLOAT64U_MAKE? */
#ifdef RT_BIG_ENDIAN
# define FP64_MAKE(a_Sign, a_Frac, a_Exp)   ((UINT64_C(a_Exp) << 1) | (UINT64_C(a_Frac) << 12) | UINT64_C(a_Sign))
#else
# define FP64_MAKE(a_Sign, a_Frac, a_Exp)   (((uint64_t)(a_Sign) << 63) | ((uint64_t)(a_Exp) << 52) | (uint64_t)(a_Frac))
#endif

/*
 * Double-precision random values (incl. potentially invalid values).
 * We don't care what the exact values are as these are meant to populate
 * unmodified parts of operands and be compared bitwise.
 */
#define FP64_RAND_V0(a_Sign)                RTFLOAT64U_INIT_C(a_Sign, 0xab07eb7bcebce, 0x777)
#define FP64_RAND_V1(a_Sign)                RTFLOAT64U_INIT_C(a_Sign, 0x2fa17e10b3c7c, 0x6b6)
#define FP64_RAND_V2(a_Sign)                RTFLOAT64U_INIT_C(a_Sign, 0xceb1703cbe310, 0x100)
#define FP64_RAND_V3(a_Sign)                RTFLOAT64U_INIT_C(a_Sign, 0x7134abcdef10f, 0x70f)

/*
 * Double-precision floating-point normals (non-zero, non-maximum)
 * Fraction - 52 bits, all usable.
 * Exponent - 11 bits (greater than 0 and less than 2046)
 */
#define FP64_FRAC_V0                        0xacc01adec0de5
#define FP64_FRAC_V1                        0xf10a7ab1ec01a
#define FP64_FRAC_V2                        0xca5cadea1b1ed
#define FP64_FRAC_V3                        0xb5b5b5b5b5b5b
#define FP64_EXP_V0                         0x001
#define FP64_EXP_V1                         0x62d
#define FP64_EXP_V2                         0x7fd
#define FP64_EXP_V3                         0x481
AssertCompile(FP64_EXP_V0 > 0 && FP64_EXP_V0 < FP64_EXP_NORM_MAX);
AssertCompile(FP64_EXP_V1 > 0 && FP64_EXP_V1 < FP64_EXP_NORM_MAX);
AssertCompile(FP64_EXP_V2 > 0 && FP64_EXP_V2 < FP64_EXP_NORM_MAX);
AssertCompile(FP64_EXP_V3 > 0 && FP64_EXP_V3 < FP64_EXP_NORM_MAX);
AssertCompile(FP64_FRAC_V0 < FP64_FRAC_NORM_MAX);
AssertCompile(FP64_FRAC_V1 < FP64_FRAC_NORM_MAX);
AssertCompile(FP64_FRAC_V2 < FP64_FRAC_NORM_MAX);
AssertCompile(FP64_FRAC_V3 < FP64_FRAC_NORM_MAX);
#define FP64_NORM_V0(a_Sign)                RTFLOAT64U_INIT_C(a_Sign, FP64_FRAC_V0, FP64_EXP_V0)
#define FP64_NORM_V1(a_Sign)                RTFLOAT64U_INIT_C(a_Sign, FP64_FRAC_V1, FP64_EXP_V1)
#define FP64_NORM_V2(a_Sign)                RTFLOAT64U_INIT_C(a_Sign, FP64_FRAC_V2, FP64_EXP_V2)
#define FP64_NORM_V3(a_Sign)                RTFLOAT64U_INIT_C(a_Sign, FP64_FRAC_V3, FP64_EXP_V3)
AssertCompile(FP64_MAKE(0, FP64_FRAC_V0, FP64_EXP_V0) != FP64_MAKE(0, 0, 0));
AssertCompile(FP64_MAKE(0, FP64_FRAC_V1, FP64_EXP_V1) != FP64_MAKE(0, 0, 0));
AssertCompile(FP64_MAKE(0, FP64_FRAC_V2, FP64_EXP_V2) != FP64_MAKE(0, 0, 0));
AssertCompile(FP64_MAKE(0, FP64_FRAC_V3, FP64_EXP_V3) != FP64_MAKE(0, 0, 0));
AssertCompile(FP64_MAKE(0, FP64_FRAC_V0, FP64_EXP_V0) != FP64_MAKE(0, 0, RTFLOAT64U_EXP_BIAS));
AssertCompile(FP64_MAKE(0, FP64_FRAC_V1, FP64_EXP_V1) != FP64_MAKE(0, 0, RTFLOAT64U_EXP_BIAS));
AssertCompile(FP64_MAKE(0, FP64_FRAC_V2, FP64_EXP_V2) != FP64_MAKE(0, 0, RTFLOAT64U_EXP_BIAS));
AssertCompile(FP64_MAKE(0, FP64_FRAC_V3, FP64_EXP_V3) != FP64_MAKE(0, 0, RTFLOAT64U_EXP_BIAS));
/* The maximum integer value (all 52 + 1 implied bit of the fraction part set) without losing precision. */
#define FP64_NORM_SAFE_INT_MAX(a_Sign)      RTFLOAT64U_INIT_C(a_Sign, FP64_FRAC_NORM_MAX, FP64_EXP_SAFE_INT_MAX)

/*
 * Double-precision floating-point denormals.
 */
#define FP64_DENORM_MAX(a_Sign)             RTFLOAT64U_INIT_C(a_Sign, FP64_FRAC_DENORM_MAX, 0)
#define FP64_DENORM_MIN(a_Sign)             RTFLOAT64U_INIT_C(a_Sign, FP64_FRAC_DENORM_MIN, 0)
#define FP64_DENORM_V0(a_Sign)              RTFLOAT64U_INIT_C(a_Sign, FP64_FRAC_INV_V2, 0)
#define FP64_DENORM_V1(a_Sign)              RTFLOAT64U_INIT_C(a_Sign, FP64_FRAC_INV_V1, 0)
#define FP64_DENORM_V2(a_Sign)              RTFLOAT64U_INIT_C(a_Sign, 0x00123456789ab, 0)
#define FP64_DENORM_V3(a_Sign)              RTFLOAT64U_INIT_C(a_Sign, 0x314159, 0)

/*
 * Double-precision floating-point invalids.
 * The range must be valid for both QNAN and SNANs (see compile time assertions below).
 */
#define FP64_FRAC_INV_V0                    0x7ffffffffffff
#define FP64_FRAC_INV_V1                    0x3ca5cadecab1e
#define FP64_FRAC_INV_V2                    0x10adedb0771e5
#define FP64_FRAC_INV_V3                    0x0000000000001
AssertCompile(FP64_FRAC_INV_V0 < FP64_FRAC_QNAN_MIN && FP64_FRAC_INV_V0 >= FP64_FRAC_SNAN_MIN);
AssertCompile(FP64_FRAC_INV_V1 < FP64_FRAC_QNAN_MIN && FP64_FRAC_INV_V1 >= FP64_FRAC_SNAN_MIN);
AssertCompile(FP64_FRAC_INV_V2 < FP64_FRAC_QNAN_MIN && FP64_FRAC_INV_V2 >= FP64_FRAC_SNAN_MIN);
AssertCompile(FP64_FRAC_INV_V3 < FP64_FRAC_QNAN_MIN && FP64_FRAC_INV_V3 >= FP64_FRAC_SNAN_MIN);
/* Double-precision floating-point signalling NANs (SNAN). */
#define FP64_SNAN_V0(a_Sign)                RTFLOAT64U_INIT_SNAN_EX(a_Sign, FP64_FRAC_INV_V0)
#define FP64_SNAN_V1(a_Sign)                RTFLOAT64U_INIT_SNAN_EX(a_Sign, FP64_FRAC_INV_V1)
#define FP64_SNAN_V2(a_Sign)                RTFLOAT64U_INIT_SNAN_EX(a_Sign, FP64_FRAC_INV_V2)
#define FP64_SNAN_V3(a_Sign)                RTFLOAT64U_INIT_SNAN_EX(a_Sign, FP64_FRAC_INV_V3)
/* Double-precision floating-point quiet NANs (QNAN). */
#define FP64_QNAN_V0(a_Sign)                RTFLOAT64U_INIT_QNAN_EX(a_Sign, FP64_FRAC_INV_V0)
#define FP64_QNAN_V1(a_Sign)                RTFLOAT64U_INIT_QNAN_EX(a_Sign, FP64_FRAC_INV_V1)
#define FP64_QNAN_V2(a_Sign)                RTFLOAT64U_INIT_QNAN_EX(a_Sign, FP64_FRAC_INV_V2)
#define FP64_QNAN_V3(a_Sign)                RTFLOAT64U_INIT_QNAN_EX(a_Sign, FP64_FRAC_INV_V3)

/*
 * Zeroes and a set of three random double-precision floating-point values primarily
 * intended to be used for for unused arguments in scalar instructions.
 */
#define FP64_0_x2(a_Sign)                   FP64_0(a_Sign), FP64_0(a_Sign)
#define FP64_0_x3(a_Sign)                   FP64_0(a_Sign), FP64_0(a_Sign), FP64_0(a_Sign)
#define FP64_RAND_x2_V0                     FP64_SNAN(1),       FP64_DENORM_MIN(0)
#define FP64_RAND_x3_V0                     FP64_RAND_x2_V0,    FP64_RAND_V2(0)
#define FP64_RAND_x2_V1                     FP64_DENORM_MAX(1), FP64_1(1)
#define FP64_RAND_x3_V1                     FP64_RAND_x2_V1,    FP64_RAND_V3(1)
#define FP64_RAND_x2_V2                     FP64_RAND_V1(1),    FP64_RAND_V0(0)
#define FP64_RAND_x3_V2                     FP64_RAND_x2_V2,    FP64_QNAN(0)
#define FP64_RAND_x2_V3                     FP64_NORM_V1(0),    FP64_INF(1)
#define FP64_RAND_x3_V3                     FP64_RAND_x2_V3,    FP64_NORM_V0(1)
#define FP64_ROW_UNUSED                     FP64_1(0),          FP64_RAND_x3_V0
#define FP64_x3_UNUSED                      FP64_RAND_x3_V1


/*********************************************************************************************************************************
*   Structures and Typedefs                                                                                                      *
*********************************************************************************************************************************/
/** Instruction set type and operand width. */
typedef enum BS3CPUINSTRX_INSTRTYPE_T
{
    T_INVALID,
    T_MMX,
    T_MMX_SSE,      /**< MMX instruction, but require the SSE CPUID to work. */
    T_MMX_SSE2,     /**< MMX instruction, but require the SSE2 CPUID to work. */
    T_MMX_SSSE3,    /**< MMX instruction, but require the SSSE3 CPUID to work. */
    T_AXMMX,
    T_AXMMX_OR_SSE,
    T_SSE,
    T_128BITS = T_SSE,
    T_SSE2,
    T_SSE3,
    T_SSSE3,
    T_SSE4_1,
    T_SSE4_2,
    T_SSE4A,
    T_PCLMUL,
    T_SHA,
    T_AVX_128,
    T_AVX2_128,
    T_AVX_PCLMUL,
    T_AVX_256,
    T_256BITS = T_AVX_256,
    T_AVX2_256,
    T_MAX
} BS3CPUINSTRX_INSTRTYPE_T;

/** Memory or register rm variant. */
enum {
    RM_REG = 0,
    RM_MEM,
    RM_MEM8,   /**< Memory operand is   8 bits. */
    RM_MEM16,  /**< Memory operand is  16 bits. */
    RM_MEM32,  /**< Memory operand is  32 bits. */
    RM_MEM64,  /**< Memory operand is  64 bits. */
    RM_MEM128, /**< Memory operand is 128 bits. */
    RM_MEM256, /**< Memory operand is 256 bits. */
};

/**
 * Execution environment configuration.
 */
typedef struct BS3CPUINSTR4_CONFIG_T
{
    uint16_t    fCr0Mp          : 1;
    uint16_t    fCr0Em          : 1;
    uint16_t    fCr0Ts          : 1;
    uint16_t    fCr4OsFxSR      : 1;
    uint16_t    fCr4OsXSave     : 1;
    uint16_t    fCr4OsXmmExcpt  : 1;
    uint16_t    fXcr0Sse        : 1;
    uint16_t    fXcr0Avx        : 1;
    uint16_t    fX87XcptPending : 1; /** unmasked x87 exception pending. */
    uint16_t    fAligned        : 1; /**< Aligned mem operands. If 0, they will be misaligned and tests w/o mem operands skipped. */
    uint16_t    fAlignCheck     : 1;
    uint16_t    fMxCsrMM        : 1; /**< AMD only */
    uint8_t     bXcptSse;
    uint8_t     bXcptAvx;
    char *const pszCfgName;
} BS3CPUINSTR4_CONFIG_T;
/** Pointer to an execution environment configuration. */
typedef BS3CPUINSTR4_CONFIG_T const BS3_FAR *PCBS3CPUINSTR4_CONFIG_T;

/** State saved by bs3CpuInstr4ConfigReconfigure. */
typedef struct BS3CPUINSTRX_CONFIG_SAVED_T
{
    uint32_t uCr0;
    uint32_t uCr4;
    uint32_t uEfl;
    uint16_t uFcw;
    uint16_t uFsw;
    uint32_t uMxCsr;
} BS3CPUINSTRX_CONFIG_SAVED_T;
typedef BS3CPUINSTRX_CONFIG_SAVED_T BS3_FAR *PBS3CPUINSTRX_CONFIG_SAVED_T;
typedef BS3CPUINSTRX_CONFIG_SAVED_T const BS3_FAR *PCBS3CPUINSTRX_CONFIG_SAVED_T;

/**
 * YMM packed single-precision floating-point register.
 * @todo move to x86.h?
 */
typedef union X86YMMFLOATPSREG
{
    /** Packed single-precision floating-point view. */
    RTFLOAT32U  ar32[8];
    /** 256-bit integer view. */
    RTUINT256U  ymm;
} X86YMMFLOATPSREG;
# ifndef VBOX_FOR_DTRACE_LIB
AssertCompileSize(X86YMMFLOATPSREG, 32);
AssertCompileSize(X86YMMFLOATPSREG, sizeof(X86YMMREG));
# endif
/** Pointer to a YMM packed single-precision floating-point register. */
typedef X86YMMFLOATPSREG BS3_FAR *PX86YMMFLOATPSREG;
/** Pointer to a const YMM single-precision packed floating-point register. */
typedef X86YMMFLOATPSREG const BS3_FAR *PCX86YMMFLOATPSREG;

/**
 * YMM packed double-precision floating-point register.
 * @todo move to x86.h?
 */
typedef union X86YMMFLOATPDREG
{
    /** Packed double-precision floating-point view. */
    RTFLOAT64U  ar64[4];
    /** 256-bit integer view. */
    RTUINT256U  ymm;
} X86YMMFLOATPDREG;
# ifndef VBOX_FOR_DTRACE_LIB
AssertCompileSize(X86YMMFLOATPDREG, 32);
AssertCompileSize(X86YMMFLOATPDREG, sizeof(X86YMMREG));
# endif
/** Pointer to a YMM packed floating-point register. */
typedef X86YMMFLOATPDREG BS3_FAR *PX86YMMFLOATPDREG;
/** Pointer to a const YMM packed floating-point register. */
typedef X86YMMFLOATPDREG const BS3_FAR *PCX86YMMFLOATPDREG;

/**
 * YMM scalar single-precision floating-point register.
 * @todo move to x86.h?
 */
typedef union X86YMMFLOATSSREG
{
    /** Scalar single-precision floating-point view. */
    RTFLOAT32U  ar32[8];
    /** 256-bit integer view. */
    RTUINT256U  ymm;
} X86YMMFLOATSSREG;
# ifndef VBOX_FOR_DTRACE_LIB
AssertCompileSize(X86YMMFLOATSSREG, 32);
AssertCompileSize(X86YMMFLOATSSREG, sizeof(X86YMMREG));
# endif
/** Pointer to a YMM scalar single-precision floating-point register. */
typedef X86YMMFLOATSSREG BS3_FAR *PX86YMMFLOATSSREG;
/** Pointer to a const YMM scalar single-precision floating-point register. */
typedef X86YMMFLOATSSREG const BS3_FAR *PCX86YMMFLOATSSREG;

/**
 * YMM scalar double-precision floating-point register.
 * @todo move to x86.h?
 */
typedef union X86YMMFLOATSDREG
{
    /** Scalar double-precision floating-point view. */
    RTFLOAT64U  ar64[4];
    /** 256-bit integer view. */
    RTUINT256U  ymm;
} X86YMMFLOATSDREG;
# ifndef VBOX_FOR_DTRACE_LIB
AssertCompileSize(X86YMMFLOATSDREG, 32);
AssertCompileSize(X86YMMFLOATSDREG, sizeof(X86YMMREG));
# endif
/** Pointer to a YMM scalar double-precision floating-point register. */
typedef X86YMMFLOATSDREG BS3_FAR *PX86YMMFLOATSDREG;
/** Pointer to a const YMM scalar double-precision floating-point register. */
typedef X86YMMFLOATSDREG const BS3_FAR *PCX86YMMFLOATSDREG;


/*********************************************************************************************************************************
*   Global Variables                                                                                                             *
*********************************************************************************************************************************/
static bool     g_afTypeSupports[T_MAX] = { false, false, false, false, false, false, false, false, false, false };
static bool     g_fAmdMisalignedSse     = false;
static uint8_t  g_enmExtCtxMethod       = BS3EXTCTXMETHOD_INVALID;
static bool     g_fMxCsrDazSupported    = false;

/** Size of g_pbBuf - at least three pages. */
static uint32_t         g_cbBuf;
/** Buffer of g_cbBuf size. */
static uint8_t BS3_FAR *g_pbBuf;
/** RW alias for the buffer memory at g_pbBuf. Set up by bs3CpuInstrXBufSetup. */
static uint8_t BS3_FAR *g_pbBufAlias;
/** RW alias for the memory at g_pbBuf. */
static uint8_t BS3_FAR *g_pbBufAliasAlloc;

/** Exceptions type 2 (>=16 Byte Memory Reference, not explicitly aligned) test configurations. */
/** Intel 64 & IA-32 Architecture SDM Vol 2A Table 2-19, "Type 2 Class Exception Conditions." */
static const BS3CPUINSTR4_CONFIG_T g_aXcptConfig2[] =
{
/*   X87 SSE SSE SSE     AVX      SSE+AVX    AVX  AVX  MMX(SSE) SSE       AVX+    AMD/SSE <-- applies to
 *   CR0 CR0 CR0 CR4     CR4      CR4        XCR0 XCR0 FCW                AMD/SSE MXCSR
 *   MP, EM, TS, OSFXSR, OSXSAVE, OSXMMEXCPT SSE, AVX, ES+,     fAligned, AC/AM,  MM,     bXcptSse,    bXcptAvx */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "(Normal)" }, /* #0 - normal */
    { 0, 0,  0,  1,      1,       0,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "!MMEXCPT" }, /* #1 - CR4:OSXMMEXCPT: #UD instead of #XF for SIMD exceptions */
    { 1, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "CR0:MP=1" }, /* #2 - CR0:MP: no effect by itself */
    { 0, 1,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "CR0:EM=1" }, /* #3 - CR0:EM: MMX/SSE => #UD */
    { 0, 0,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_NM, X86_XCPT_NM, "CR0:TS=1" }, /* #4 - CR0:TS: MMX/SSE/AVX => #NM */
    { 0, 1,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_NM, "CR0:EMTS" }, /* #5 - CR0:EM+TS: MMX/SSE => #UD, AVX => #NM */
    { 0, 0,  0,  0,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "OSFXSR=0" }, /* #6 - CR4:OSFXSR=0: SSE => #UD */
    { 0, 0,  0,  1,      0,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_UD, "!OSXSAVE" }, /* #7 - CR4:OSXSAVE=0: AVX => #UD */
    { 0, 0,  0,  1,      1,       1,         1,   0,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_UD, "XCR0!AVX" }, /* #8 - XCR0:AVX=0: AVX => #UD */
    { 0, 0,  0,  1,      1,       1,         0,   0,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_UD, "XCR0!SSE" }, /* #9 - XCR0:SSE+AVX=0: AVX => #UD */
    /* Memory misalignment and alignment checks: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      0,      X86_XCPT_GP, X86_XCPT_DB, "Misalign" }, /* #10 - misaligned data: SSE => #GP */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      0,      X86_XCPT_GP, X86_XCPT_DB, "AlChkMis" }, /* #11 - misaligned data + CR0:AM + fl:AC: SSE => #GP */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        1,      0,      X86_XCPT_DB, X86_XCPT_DB, "AlChkAli" }, /* #12 - aligned data + CR0:AM + fl:AC: no effect */
    /* AMD only: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      1,      X86_XCPT_DB, X86_XCPT_GP, "AMDmm-AC" }, /* #13 */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      1,      X86_XCPT_AC, X86_XCPT_GP, "AMDmm+AC" }, /* #14 */
};

/** Exceptions type 3 (<16 Byte Memory Reference) test configurations. */
/** Intel 64 & IA-32 Architecture SDM Vol 2A Table 2-20, "Type 3 Class Exception Conditions." */
static const BS3CPUINSTR4_CONFIG_T g_aXcptConfig3[] =
{
/*   X87 SSE SSE SSE     AVX      SSE+AVX    AVX  AVX  MMX(SSE) SSE       AVX+    AMD/SSE <-- applies to
 *   CR0 CR0 CR0 CR4     CR4      CR4        XCR0 XCR0 FCW                AMD/SSE MXCSR
 *   MP, EM, TS, OSFXSR, OSXSAVE, OSXMMEXCPT SSE, AVX, ES+,     fAligned, AC/AM,  MM,     bXcptSse,    bXcptAvx */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "(Normal)" }, /* #0 - normal */
    { 0, 0,  0,  1,      1,       0,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "!MMEXCPT" }, /* #1 - CR4:OSXMMEXCPT: #UD instead of #XF for SIMD exceptions */
    { 1, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "CR0:MP=1" }, /* #2 - CR0:MP: no effect by itself */
    { 0, 1,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "CR0:EM=1" }, /* #3 - CR0:EM: MMX/SSE => #UD */
    { 0, 0,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_NM, X86_XCPT_NM, "CR0:TS=1" }, /* #4 - CR0:TS: MMX/SSE/AVX => #NM */
    { 0, 1,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_NM, "CR0:EMTS" }, /* #5 - CR0:EM+TS: MMX/SSE => #UD, AVX => #NM */
    { 0, 0,  0,  0,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "OSFXSR=0" }, /* #6 - CR4:OSFXSR=0: SSE => #UD */
    { 0, 0,  0,  1,      0,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_UD, "!OSXSAVE" }, /* #7 - CR4:OSXSAVE=0: AVX => #UD */
    { 0, 0,  0,  1,      1,       1,         1,   0,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_UD, "XCR0!AVX" }, /* #8 - XCR0:AVX=0: AVX => #UD */
    { 0, 0,  0,  1,      1,       1,         0,   0,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_UD, "XCR0!SSE" }, /* #9 - XCR0:SSE+AVX=0: AVX => #UD */
    /* Memory misalignment and alignment checks: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "Misalign" }, /* #10 - misaligned data: no effect */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      0,      X86_XCPT_AC, X86_XCPT_AC, "AlChkMis" }, /* #11 - misaligned data + CR0:AM + fl:AC: MMX/SSE/AVX => #AC */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        1,      0,      X86_XCPT_DB, X86_XCPT_DB, "AlChkAli" }, /* #12 - aligned data + CR0:AM + fl:AC: no effect */
    /* AMD only: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      1,      X86_XCPT_DB, X86_XCPT_GP, "AMDmm-AC" }, /* #13 */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      1,      X86_XCPT_AC, X86_XCPT_GP, "AMDmm+AC" }, /* #14 */
};

/** Exceptions type 4 (>=16 Byte Memory Reference, not explicitly aligned, No Floating-point Exceptions) test configurations. */
/** Intel 64 & IA-32 Architecture SDM Vol 2A Table 2-21, "Type 4 Class Exception Conditions." */
/** Identical to g_aXcptConfig2 except no '!MMEXCPT' test for instructions which cannot raise SIMD exceptions */
static const BS3CPUINSTR4_CONFIG_T g_aXcptConfig4[] =
{
/*   X87 SSE SSE SSE     AVX      SSE+AVX    AVX  AVX  MMX(SSE) SSE       AVX+    AMD/SSE <-- applies to
 *   CR0 CR0 CR0 CR4     CR4      CR4        XCR0 XCR0 FCW                AMD/SSE MXCSR
 *   MP, EM, TS, OSFXSR, OSXSAVE, OSXMMEXCPT SSE, AVX, ES+,     fAligned, AC/AM,  MM,     bXcptSse,    bXcptAvx */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "(Normal)" }, /* #0 - normal */
    { 1, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "CR0:MP=1" }, /* #1 - CR0:MP: no effect by itself */
    { 0, 1,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "CR0:EM=1" }, /* #2 - CR0:EM: MMX/SSE => #UD */
    { 0, 0,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_NM, X86_XCPT_NM, "CR0:TS=1" }, /* #3 - CR0:TS: MMX/SSE/AVX => #NM */
    { 0, 1,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_NM, "CR0:EMTS" }, /* #4 - CR0:EM+TS: MMX/SSE => #UD, AVX => #NM */
    { 0, 0,  0,  0,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "OSFXSR=0" }, /* #5 - CR4:OSFXSR=0: SSE => #UD */
    { 0, 0,  0,  1,      0,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_UD, "!OSXSAVE" }, /* #6 - CR4:OSXSAVE=0: AVX => #UD */
    { 0, 0,  0,  1,      1,       1,         1,   0,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_UD, "XCR0!AVX" }, /* #7 - XCR0:AVX=0: AVX => #UD */
    { 0, 0,  0,  1,      1,       1,         0,   0,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_UD, "XCR0!SSE" }, /* #8 - XCR0:SSE+AVX=0: AVX => #UD */
    /* Memory misalignment and alignment checks: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      0,      X86_XCPT_GP, X86_XCPT_DB, "Misalign" }, /* #9 - misaligned data: SSE => #GP */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      0,      X86_XCPT_GP, X86_XCPT_DB, "AlChkMis" }, /* #10 - misaligned data + CR0:AM + fl:AC: SSE => #GP */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        1,      0,      X86_XCPT_DB, X86_XCPT_DB, "AlChkAli" }, /* #11 - aligned data + CR0:AM + fl:AC: no effect */
    /* AMD only: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      1,      X86_XCPT_DB, X86_XCPT_GP, "AMDmm-AC" }, /* #12 */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      1,      X86_XCPT_AC, X86_XCPT_GP, "AMDmm+AC" }, /* #1j */
};

/** Exceptions type 5 (<16 Byte Memory Reference, No Floating-point Exceptions) test configurations. */
/** Intel 64 & IA-32 Architecture SDM Vol 2A Table 2-22, "Type 5 Class Exception Conditions." */
/** Identical to g_aXcptConfig3 except no '!MMEXCPT' test for instructions which cannot raise SIMD exceptions */
static const BS3CPUINSTR4_CONFIG_T g_aXcptConfig5[] =
{
/*   X87 SSE SSE SSE     AVX      SSE+AVX    AVX  AVX  MMX(SSE) SSE       AVX+    AMD/SSE <-- applies to
 *   CR0 CR0 CR0 CR4     CR4      CR4        XCR0 XCR0 FCW                AMD/SSE MXCSR
 *   MP, EM, TS, OSFXSR, OSXSAVE, OSXMMEXCPT SSE, AVX, ES+,     fAligned, AC/AM,  MM,     bXcptSse,    bXcptAvx */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "(Normal)" }, /* #0 - normal */
    { 1, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "CR0:MP=1" }, /* #1 - CR0:MP: no effect by itself */
    { 0, 1,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "CR0:EM=1" }, /* #2 - CR0:EM: MMX/SSE => #UD */
    { 0, 0,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_NM, X86_XCPT_NM, "CR0:TS=1" }, /* #3 - CR0:TS: MMX/SSE/AVX => #NM */
    { 0, 1,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_NM, "CR0:EMTS" }, /* #4 - CR0:EM+TS: MMX/SSE => #UD, AVX => #NM */
    { 0, 0,  0,  0,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "OSFXSR=0" }, /* #5 - CR4:OSFXSR=0: SSE => #UD */
    { 0, 0,  0,  1,      0,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_UD, "!OSXSAVE" }, /* #6 - CR4:OSXSAVE=0: AVX => #UD */
    { 0, 0,  0,  1,      1,       1,         1,   0,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_UD, "XCR0!AVX" }, /* #7 - XCR0:AVX=0: AVX => #UD */
    { 0, 0,  0,  1,      1,       1,         0,   0,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_UD, "XCR0!SSE" }, /* #8 - XCR0:SSE+AVX=0: AVX => #UD */
    /* Memory misalignment and alignment checks: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "Misalign" }, /* #9 - misaligned data: no effect */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      0,      X86_XCPT_AC, X86_XCPT_AC, "AlChkMis" }, /* #10 - misaligned data + CR0:AM + fl:AC: MMX/SSE/AVX => #AC */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        1,      0,      X86_XCPT_DB, X86_XCPT_DB, "AlChkAli" }, /* #11 - aligned data + CR0:AM + fl:AC: no effect */
    /* AMD only: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      1,      X86_XCPT_DB, X86_XCPT_GP, "AMDmm-AC" }, /* #12 */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      1,      X86_XCPT_AC, X86_XCPT_GP, "AMDmm+AC" }, /* #13 */
};

/** Exceptions type 23_4 test configurations. */
/** Intel 64 & IA-32 Architecture SDM Vol 3B Table 23-4, "Exception Conditions for Legacy SIMD/MMX Instructions with FP Exception and 16-Byte Alignment" */
/** For our purposes: same as g_aXcptConfig3 except drop the OSXSAVE & XCR0 tests, add pending x87 exception test */
/** Instructions: cvtpd2pi, cvttpd2pi */
static const BS3CPUINSTR4_CONFIG_T g_aXcptConfig23_4[] =
{
/*   X87 SSE SSE SSE     AVX      SSE+AVX    AVX  AVX  MMX(SSE) SSE       AVX+    AMD/SSE <-- applies to
 *   CR0 CR0 CR0 CR4     CR4      CR4        XCR0 XCR0 FCW                AMD/SSE MXCSR
 *   MP, EM, TS, OSFXSR, OSXSAVE, OSXMMEXCPT SSE, AVX, ES+,     fAligned, AC/AM,  MM,     bXcptSse,    bXcptAvx */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "(Normal)" }, /* #0 - normal */
    { 0, 0,  0,  1,      1,       0,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "!MMEXCPT" }, /* #1 - CR4:OSXMMEXCPT: #UD instead of #XF for SIMD exceptions */
    { 1, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "CR0:MP=1" }, /* #2 - CR0:MP: no effect by itself */
    { 0, 1,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "CR0:EM=1" }, /* #3 - CR0:EM: MMX/SSE => #UD */
    { 0, 0,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_NM, X86_XCPT_NM, "CR0:TS=1" }, /* #4 - CR0:TS: MMX/SSE/AVX => #NM */
    { 0, 1,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_NM, "CR0:EMTS" }, /* #5 - CR0:EM+TS: MMX/SSE => #UD, AVX => #NM */
    { 0, 0,  0,  0,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "OSFXSR=0" }, /* #6 - CR4:OSFXSR=0: SSE => #UD */
    { 0, 0,  0,  1,      1,       1,         1,   1,   1,       1,        0,      0,      X86_XCPT_MF, X86_XCPT_DB, "x87Excpt" }, /* #7 - pending x87 exception */
    /* AMD only: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      1,      X86_XCPT_DB, X86_XCPT_GP, "AMDmm-AC" }, /* #8 */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      1,      X86_XCPT_AC, X86_XCPT_GP, "AMDmm+AC" }, /* #9 */
    /* Memory misalignment and alignment checks: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      0,      X86_XCPT_GP, X86_XCPT_DB, "Misalign" }, /* #10 - misaligned data: SSE => #GP */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      0,      X86_XCPT_GP, X86_XCPT_DB, "AlChkMis" }, /* #11 - misaligned data + CR0:AM + fl:AC: SSE => #GP */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        1,      0,      X86_XCPT_DB, X86_XCPT_DB, "AlChkAli" }, /* #12 - aligned data + CR0:AM + fl:AC: no effect */
};

/** Exceptions type 23_5 test configurations. */
/** Intel 64 & IA-32 Architecture SDM Vol 3B Table 23-5, "Exception Conditions for Legacy SIMD/MMX Instructions with XMM and FP Exception" */
/** For our purposes: same as g_aXcptConfig4 except drop the OSXSAVE & XCR0 tests, add pending x87 exception test */
/** Instructions: cvtpi2ps, cvtps2pi, cvttps2pi */
static const BS3CPUINSTR4_CONFIG_T g_aXcptConfig23_5[] =
{
/*   X87 SSE SSE SSE     AVX      SSE+AVX    AVX  AVX  MMX(SSE) SSE       AVX+    AMD/SSE <-- applies to
 *   CR0 CR0 CR0 CR4     CR4      CR4        XCR0 XCR0 FCW                AMD/SSE MXCSR
 *   MP, EM, TS, OSFXSR, OSXSAVE, OSXMMEXCPT SSE, AVX, ES+,     fAligned, AC/AM,  MM,     bXcptSse,    bXcptAvx */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "(Normal)" }, /* #0 - normal */
    { 0, 0,  0,  1,      1,       0,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "!MMEXCPT" }, /* #1 - CR4:OSXMMEXCPT: #UD instead of #XF for SIMD exceptions */
    { 1, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "CR0:MP=1" }, /* #2 - CR0:MP: no effect by itself */
    { 0, 1,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "CR0:EM=1" }, /* #3 - CR0:EM: MMX/SSE => #UD */
    { 0, 0,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_NM, X86_XCPT_NM, "CR0:TS=1" }, /* #4 - CR0:TS: MMX/SSE/AVX => #NM */
    { 0, 1,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_NM, "CR0:EMTS" }, /* #5 - CR0:EM+TS: MMX/SSE => #UD, AVX => #NM */
    { 0, 0,  0,  0,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "OSFXSR=0" }, /* #6 - CR4:OSFXSR=0: SSE => #UD */
    { 0, 0,  0,  1,      1,       1,         1,   1,   1,       1,        0,      0,      X86_XCPT_MF, X86_XCPT_DB, "x87Excpt" }, /* #7 - pending x87 exception */
    /* AMD only: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      1,      X86_XCPT_DB, X86_XCPT_GP, "AMDmm-AC" }, /* #8 */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      1,      X86_XCPT_AC, X86_XCPT_GP, "AMDmm+AC" }, /* #9 */
    /* Memory misalignment and alignment checks: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "Misalign" }, /* #10 - misaligned data: no effect */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      0,      X86_XCPT_AC, X86_XCPT_AC, "AlChkMis" }, /* #11 - misaligned data + CR0:AM + fl:AC: MMX/SSE/AVX => #AC */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        1,      0,      X86_XCPT_DB, X86_XCPT_DB, "AlChkAli" }, /* #12 - aligned data + CR0:AM + fl:AC: no effect */
};

/** Exceptions type 23_6 test configurations. */
/** Intel 64 & IA-32 Architecture SDM Vol 3B Table 23-6, "Exception Conditions for Legacy SIMD/MMX Instructions with XMM and without FP Exception" */
/** For our purposes: same as g_aXcptConfig4 except drop the OSXSAVE, OSXMMEXCPT, XCR0 tests */
/** Instructions: cvtpi2pd */
static const BS3CPUINSTR4_CONFIG_T g_aXcptConfig23_6[] =
{
/*   X87 SSE SSE SSE     AVX      SSE+AVX    AVX  AVX  MMX(SSE) SSE       AVX+    AMD/SSE <-- applies to
 *   CR0 CR0 CR0 CR4     CR4      CR4        XCR0 XCR0 FCW                AMD/SSE MXCSR
 *   MP, EM, TS, OSFXSR, OSXSAVE, OSXMMEXCPT SSE, AVX, ES+,     fAligned, AC/AM,  MM,     bXcptSse,    bXcptAvx */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "(Normal)" }, /* #0 - normal */
    { 1, 0,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "CR0:MP=1" }, /* #1 - CR0:MP: no effect by itself */
    { 0, 1,  0,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "CR0:EM=1" }, /* #2 - CR0:EM: MMX/SSE => #UD */
    { 0, 0,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_NM, X86_XCPT_NM, "CR0:TS=1" }, /* #3 - CR0:TS: MMX/SSE/AVX => #NM */
    { 0, 1,  1,  1,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_NM, "CR0:EMTS" }, /* #4 - CR0:EM+TS: MMX/SSE => #UD, AVX => #NM */
    { 0, 0,  0,  0,      1,       1,         1,   1,   0,       1,        0,      0,      X86_XCPT_UD, X86_XCPT_DB, "OSFXSR=0" }, /* #5 - CR4:OSFXSR=0: SSE => #UD */
    /* Memory misalignment and alignment checks: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      0,      X86_XCPT_DB, X86_XCPT_DB, "Misalign" }, /* #6 - misaligned data: no effect */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      0,      X86_XCPT_AC, X86_XCPT_AC, "AlChkMis" }, /* #7 - misaligned data + CR0:AM + fl:AC: MMX/SSE/AVX => #AC */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       1,        1,      0,      X86_XCPT_DB, X86_XCPT_DB, "AlChkAli" }, /* #8 - aligned data + CR0:AM + fl:AC: no effect */
    /* AMD only: */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        0,      1,      X86_XCPT_DB, X86_XCPT_GP, "AMDmm-AC" }, /* #9 */
    { 0, 0,  0,  1,      1,       1,         1,   1,   0,       0,        1,      1,      X86_XCPT_AC, X86_XCPT_GP, "AMDmm+AC" }, /* #10 */
};

/**
 * Table D-1: Packed single-precision floating-point invalid values.
 * For instructions: addps, subps, mulps, divps, addsubps.
 **/
#define FP32_TABLE_D1_PS_INVALIDS \
    /* 0*/{ { /*src2     */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } },       \
            { /*src1     */ { FP32_QNAN(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } },       \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } },       \
              /*mxcsr:in */ 0,                                                                                                                                                 \
              /*128:out  */ 0,                                                                                                                                                 \
              /*256:out  */ 0 },                                                                                                                                               \
          { { /*src2     */ { FP32_QNAN(0),      FP32_QNAN_MAX(0),  FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } }, \
            { /*src1     */ { FP32_SNAN(0),      FP32_SNAN(0),      FP32_SNAN_MAX(0), FP32_SNAN_V2(0), FP32_SNAN_V6(0), FP32_SNAN_V2(0), FP32_SNAN_V1(0), FP32_SNAN_V4(0) } }, \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_V(0, 1), FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                                 \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                      \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                                    \
          { { /*src2     */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V1(0), FP32_SNAN_V3(0), FP32_SNAN_V4(0), FP32_SNAN_V5(0), FP32_SNAN_V6(0) } },        \
            { /*src1     */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0) } },        \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0) } },        \
              /*mxcsr:in */ X86_MXCSR_FZ,                                                                                                                                      \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,                                                                                                                       \
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },                                                                                                                     \
          { { /*src2     */ { FP32_SNAN(0),      FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V2(0), FP32_SNAN_V7(0), FP32_SNAN_V1(0), FP32_SNAN_V6(0), FP32_SNAN_V1(0) } },   \
            { /*src1     */ { FP32_SNAN(0),      FP32_SNAN_MAX(0), FP32_SNAN_V4(0), FP32_SNAN_V3(0), FP32_SNAN_V5(0), FP32_SNAN_V3(0), FP32_SNAN_V1(0), FP32_SNAN_V2(0) } },   \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_MAX(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V5(0), FP32_QNAN_V3(0), FP32_QNAN_V1(0), FP32_QNAN_V2(0) } },   \
              /*mxcsr:in */ 0,                                                                                                                                                 \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                      \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                                    \
          { { /*src2     */ { FP32_QNAN(0), FP32_QNAN_MAX(1), FP32_NORM_V0(1),  FP32_QNAN_V1(0), FP32_NORM_V3(0), FP32_QNAN_V3(1), FP32_NORM_V5(0), FP32_QNAN_V5(1) } },       \
            { /*src1     */ { FP32_1(0),    FP32_1(1),        FP32_QNAN_V0(1),  FP32_NORM_V2(1), FP32_QNAN_V2(0), FP32_NORM_V4(0), FP32_QNAN_V4(1), FP32_NORM_V6(1) } },       \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1), FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(1), FP32_QNAN_V4(1), FP32_QNAN_V5(1) } },       \
              /*mxcsr:in */ 0,                                                                                                                                                 \
              /*128:out  */ 0,                                                                                                                                                 \
              /*256:out  */ 0 },                                                                                                                                               \
          { { /*src2     */ { FP32_SNAN(1),      FP32_SNAN_MAX(1), FP32_NORM_V0(1), FP32_SNAN_V1(0), FP32_NORM_V3(0), FP32_SNAN_V3(1), FP32_NORM_V5(0), FP32_SNAN_V5(1) } },   \
            { /*src1     */ { FP32_1(0),         FP32_1(0),        FP32_SNAN_V0(1), FP32_NORM_V2(1), FP32_SNAN_V2(1), FP32_NORM_V4(0), FP32_SNAN_V4(1), FP32_NORM_V6(1) } },   \
            { /* =>      */ { FP32_QNAN_V(1, 1), FP32_QNAN_MAX(1), FP32_QNAN_V0(1), FP32_QNAN_V1(0), FP32_QNAN_V2(1), FP32_QNAN_V3(1), FP32_QNAN_V4(1), FP32_QNAN_V5(1) } },   \
              /*mxcsr:in */ 0,                                                                                                                                                 \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                      \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                                    \
          { { /*src2     */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } },       \
            { /*src1     */ { FP32_QNAN(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } },       \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } },       \
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,                                                                                                                  \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,                                                                                                                  \
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },                                                                                                                \
          { { /*src2     */ { FP32_QNAN(0),      FP32_QNAN_MAX(0),  FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } }, \
            { /*src1     */ { FP32_SNAN(0),      FP32_SNAN(0),      FP32_SNAN_MAX(0), FP32_SNAN_V2(0), FP32_SNAN_V6(0), FP32_SNAN_V2(0), FP32_SNAN_V1(0), FP32_SNAN_V4(0) } }, \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_V(0, 1), FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } }, \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,                                                                                                  \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,                                                                                   \
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },                                                                                 \
          { { /*src2     */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V1(0), FP32_SNAN_V3(0), FP32_SNAN_V4(0), FP32_SNAN_V5(0), FP32_SNAN_V6(0) } },        \
            { /*src1     */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0) } },        \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0) } },        \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,                                                                                                    \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,                                                                                     \
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },                                                                                   \
          { { /*src2     */ { FP32_SNAN(0),      FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V2(0), FP32_SNAN_V7(0), FP32_SNAN_V1(0), FP32_SNAN_V6(0), FP32_SNAN_V1(0) } },   \
            { /*src1     */ { FP32_SNAN(0),      FP32_SNAN_MAX(0), FP32_SNAN_V4(0), FP32_SNAN_V3(0), FP32_SNAN_V5(0), FP32_SNAN_V3(0), FP32_SNAN_V1(0), FP32_SNAN_V2(0) } },   \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_MAX(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V5(0), FP32_QNAN_V3(0), FP32_QNAN_V1(0), FP32_QNAN_V2(0) } },   \
              /*mxcsr:in */ X86_MXCSR_RC_UP,                                                                                                                                   \
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_IE,                                                                                                                    \
              /*256:out  */ X86_MXCSR_RC_UP | X86_MXCSR_IE },                                                                                                                  \
          { { /*src2     */ { FP32_QNAN(0), FP32_QNAN_MAX(1), FP32_NORM_V0(1), FP32_QNAN_V1(0), FP32_NORM_V3(0), FP32_QNAN_V3(1), FP32_NORM_V5(0), FP32_QNAN_V5(1) } },        \
            { /*src1     */ { FP32_1(0),    FP32_1(1),        FP32_QNAN_V0(1), FP32_NORM_V2(1), FP32_QNAN_V2(0), FP32_NORM_V4(0), FP32_QNAN_V4(1), FP32_NORM_V6(1) } },        \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN_MAX(1), FP32_QNAN_V0(1), FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(1), FP32_QNAN_V4(1), FP32_QNAN_V5(1) } },        \
              /*mxcsr:in */ 0,                                                                                                                                                 \
              /*128:out  */ 0,                                                                                                                                                 \
              /*256:out  */ 0 },                                                                                                                                               \
    /*11*/{ { /*src2     */ { FP32_SNAN(1),      FP32_SNAN_MAX(1), FP32_NORM_V0(1), FP32_SNAN_V1(0), FP32_NORM_V3(0), FP32_SNAN_V3(1), FP32_NORM_V5(0), FP32_SNAN_V5(1) } },   \
            { /*src1     */ { FP32_1(0),         FP32_1(0),        FP32_SNAN_V0(1), FP32_NORM_V2(1), FP32_SNAN_V2(1), FP32_NORM_V4(0), FP32_SNAN_V4(1), FP32_NORM_V6(1) } },   \
            { /* =>      */ { FP32_QNAN_V(1, 1), FP32_QNAN_MAX(1), FP32_QNAN_V0(1), FP32_QNAN_V1(0), FP32_QNAN_V2(1), FP32_QNAN_V3(1), FP32_QNAN_V4(1), FP32_QNAN_V5(1) } },   \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,                                                                                                                 \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,                                                                                                  \
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },                                                                                                \

/**
 * Table D-1: Packed double-precision floating-point invalid values.
 * For instructions: addpd, subpd, mulpd, divpd, addsubpd.
 **/
#define FP64_TABLE_D1_PD_INVALIDS \
    /* 0*/{ { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } },       \
            { /*src1     */ { FP64_QNAN(0), FP64_QNAN(0),     FP64_QNAN_MAX(0), FP64_QNAN_V2(0) } },       \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN(0),     FP64_QNAN_MAX(0), FP64_QNAN_V2(0) } },       \
              /*mxcsr:in */ 0,                                                                             \
              /*128:out  */ 0,                                                                             \
              /*256:out  */ 0 },                                                                           \
          { { /*src2     */ { FP64_QNAN(0),      FP64_QNAN_MAX(0),  FP64_QNAN_V0(0),  FP64_QNAN_V2(0) } }, \
            { /*src1     */ { FP64_SNAN(0),      FP64_SNAN(0),      FP64_SNAN_MAX(0), FP64_SNAN_V1(0) } }, \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_QNAN_V(0, 1), FP64_QNAN_MAX(0), FP64_QNAN_V1(0) } }, \
              /*mxcsr:in */ 0,                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                  \
              /*256:out  */ X86_MXCSR_IE },                                                                \
          { { /*src2     */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_V0(0), FP64_SNAN_V1(0) } },        \
            { /*src1     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V2(0), FP64_QNAN_V3(0) } },        \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V2(0), FP64_QNAN_V3(0) } },        \
              /*mxcsr:in */ 0,                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                  \
              /*256:out  */ X86_MXCSR_IE },                                                                \
          { { /*src2     */ { FP64_SNAN(0),      FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V2(0) } },   \
            { /*src1     */ { FP64_SNAN(0),      FP64_SNAN_MAX(0), FP64_SNAN_V3(0), FP64_SNAN_V0(0) } },   \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_QNAN_MAX(0), FP64_QNAN_V3(0), FP64_QNAN_V0(0) } },   \
              /*mxcsr:in */ 0,                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                  \
              /*256:out  */ X86_MXCSR_IE },                                                                \
          { { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(1), FP64_NORM_V0(1), FP64_QNAN_V1(0) } },        \
            { /*src1     */ { FP64_1(0),    FP64_1(1),        FP64_QNAN_V0(1), FP64_NORM_V2(1) } },        \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN_MAX(1), FP64_QNAN_V0(1), FP64_QNAN_V1(0) } },        \
              /*mxcsr:in */ 0,                                                                             \
              /*128:out  */ 0,                                                                             \
              /*256:out  */ 0 },                                                                           \
          { { /*src2     */ { FP64_SNAN(1),      FP64_SNAN_MAX(1), FP64_NORM_V0(1), FP64_SNAN_V1(0) } },   \
            { /*src1     */ { FP64_1(0),         FP64_1(0),        FP64_SNAN_V0(1), FP64_NORM_V2(1) } },   \
            { /* =>      */ { FP64_QNAN_V(1, 1), FP64_QNAN_MAX(1), FP64_QNAN_V0(1), FP64_QNAN_V1(0) } },   \
              /*mxcsr:in */ 0,                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                  \
              /*256:out  */ X86_MXCSR_IE },                                                                \
          { { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V2(0) } },       \
            { /*src1     */ { FP64_QNAN(0), FP64_QNAN(0),     FP64_QNAN_MAX(0), FP64_QNAN_V3(0) } },       \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN(0),     FP64_QNAN_MAX(0), FP64_QNAN_V3(0) } },       \
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,                                              \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,                                              \
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },                                            \
          { { /*src2     */ { FP64_QNAN(0),      FP64_QNAN_MAX(0),  FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } }, \
            { /*src1     */ { FP64_SNAN(0),      FP64_SNAN(0),      FP64_SNAN_MAX(0), FP64_SNAN_V2(0) } }, \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_QNAN_V(0, 1), FP64_QNAN_MAX(0), FP64_QNAN_V2(0) } }, \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,                              \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,               \
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },             \
          { { /*src2     */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V1(0) } },        \
            { /*src1     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V3(0), FP64_QNAN_V2(0) } },        \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V3(0), FP64_QNAN_V2(0) } },        \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,                              \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,               \
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },             \
          { { /*src2     */ { FP64_SNAN(0),      FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V2(0) } },   \
            { /*src1     */ { FP64_SNAN(0),      FP64_SNAN_MAX(0), FP64_SNAN_V0(0), FP64_SNAN_V3(0) } },   \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_QNAN_MAX(0), FP64_QNAN_V0(0), FP64_QNAN_V3(0) } },   \
              /*mxcsr:in */ X86_MXCSR_RC_UP,                                                               \
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_IE,                                                \
              /*256:out  */ X86_MXCSR_RC_UP | X86_MXCSR_IE },                                              \
          { { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(1), FP64_NORM_V0(1), FP64_QNAN_V1(0) } },        \
            { /*src1     */ { FP64_1(0),    FP64_1(1),        FP64_QNAN_V3(1), FP64_NORM_V2(1) } },        \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN_MAX(1), FP64_QNAN_V3(1), FP64_QNAN_V1(0) } },        \
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,                                                             \
              /*128:out  */ X86_MXCSR_RC_DOWN,                                                             \
              /*256:out  */ X86_MXCSR_RC_DOWN },                                                           \
    /*11*/{ { /*src2     */ { FP64_SNAN(1),      FP64_SNAN_MAX(1), FP64_NORM_V0(1), FP64_SNAN_V2(0) } },   \
            { /*src1     */ { FP64_1(0),         FP64_1(0),        FP64_SNAN_V3(1), FP64_NORM_V2(1) } },   \
            { /* =>      */ { FP64_QNAN_V(1, 1), FP64_QNAN_MAX(1), FP64_QNAN_V3(1), FP64_QNAN_V2(0) } },   \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,                                             \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,                              \
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },                            \

/**
 * Table D-1: Scalar single-precision floating-point invalid values.
 * For instructions: addss, subss, mulss, divss.
 **/
#define FP32_TABLE_D1_SS_INVALIDS \
    /* QNan, QNan */                                                                                                                                                          \
    /* 0*/{ { /*src2     */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } },      \
            { /*src1     */ { FP32_QNAN(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } },      \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } },      \
              /*mxcsr:in */ 0,                                                                                                                                                \
              /*128:out  */ 0,                                                                                                                                                \
              /*256:out  */ -1 },                                                                                                                                             \
          { { /*src2     */ { FP32_QNAN_MAX(0), FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0) } },                     \
            { /*src1     */ { FP32_QNAN(0),     FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0), FP32_QNAN_V1(0) } },                     \
            { /* =>      */ { FP32_QNAN(0),     FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0), FP32_QNAN_V1(0) } },                     \
              /*mxcsr:in */ 0,                                                                                                                                                \
              /*128:out  */ 0,                                                                                                                                                \
              /*256:out  */ -1 },                                                                                                                                             \
          { { /*src2     */ { FP32_QNAN_V1(0), FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0) } },                      \
            { /*src1     */ { FP32_QNAN_V2(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0), FP32_QNAN_V1(0) } },                      \
            { /* =>      */ { FP32_QNAN_V2(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0), FP32_QNAN_V1(0) } },                      \
              /*mxcsr:in */ 0,                                                                                                                                                \
              /*128:out  */ 0,                                                                                                                                                \
              /*256:out  */ -1 },                                                                                                                                             \
    /* QNan, SNan */                                                                                                                                                          \
          { { /*src2     */ { FP32_QNAN(0),      FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0) } },                    \
            { /*src1     */ { FP32_SNAN(0),      FP32_SNAN_V2(0), FP32_SNAN_V6(0), FP32_SNAN_V2(0), FP32_SNAN_V1(0), FP32_SNAN_V4(0), FP32_SNAN_V1(0) } },                    \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_SNAN_V2(0), FP32_SNAN_V6(0), FP32_SNAN_V2(0), FP32_SNAN_V1(0), FP32_SNAN_V4(0), FP32_QNAN_V1(0) } },                    \
              /*mxcsr:in */ 0,                                                                                                                                                \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                     \
              /*256:out  */ -1 },                                                                                                                                             \
          { { /*src2     */ { FP32_QNAN_MAX(0),  FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } }, \
            { /*src1     */ { FP32_SNAN(0),      FP32_SNAN(0),     FP32_SNAN_MAX(0), FP32_SNAN_V2(0), FP32_SNAN_V6(0), FP32_SNAN_V2(0), FP32_SNAN_V1(0), FP32_SNAN_V4(0) } }, \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_SNAN(0),     FP32_SNAN_MAX(0), FP32_SNAN_V2(0), FP32_SNAN_V6(0), FP32_SNAN_V2(0), FP32_SNAN_V1(0), FP32_SNAN_V4(0) } }, \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,                                                                                                 \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,                                                                                  \
              /*256:out  */ -1 },                                                                                                                                             \
          { { /*src2     */ { FP32_QNAN_V1(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } },   \
            { /*src1     */ { FP32_SNAN_V2(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } },   \
            { /* =>      */ { FP32_QNAN_V2(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } },   \
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,                                                                                                                 \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                             \
    /* SNan, QNan */                                                                                                                                                          \
          { { /*src2     */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V1(0), FP32_SNAN_V3(0), FP32_SNAN_V4(0), FP32_SNAN_V5(0), FP32_SNAN_V6(0) } },       \
            { /*src1     */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0) } },       \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0) } },       \
              /*mxcsr:in */ X86_MXCSR_DAZ,                                                                                                                                    \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE,                                                                                                                     \
              /*256:out  */ -1 },                                                                                                                                             \
          { { /*src2     */ { FP32_SNAN_MAX(0), FP32_SNAN_MAX(0), FP32_SNAN_V1(0), FP32_SNAN_V1(0), FP32_SNAN_V3(0), FP32_SNAN_V4(0), FP32_SNAN_V5(0), FP32_SNAN_V6(0) } },   \
            { /*src1     */ { FP32_QNAN(0),     FP32_QNAN(0),     FP32_QNAN_V6(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0) } },   \
            { /* =>      */ { FP32_QNAN(0),     FP32_QNAN(0),     FP32_QNAN_V6(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0) } },   \
              /*mxcsr:in */ X86_MXCSR_RC_UP,                                                                                                                                  \
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_IE,                                                                                                                   \
              /*256:out  */ -1 },                                                                                                                                             \
          { { /*src2     */ { FP32_SNAN_V0(0), FP32_SNAN_MAX(0), FP32_SNAN_V1(0), FP32_SNAN_V1(0), FP32_SNAN_V3(0), FP32_SNAN_V4(0), FP32_SNAN_V5(0), FP32_SNAN_V6(0) } },    \
            { /*src1     */ { FP32_QNAN_V6(0), FP32_QNAN(0),     FP32_QNAN_V6(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0) } },    \
            { /* =>      */ { FP32_QNAN_V6(0), FP32_QNAN(0),     FP32_QNAN_V6(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0) } },    \
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,                                                                                                                 \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                             \
    /* SNan, SNan */                                                                                                                                                          \
          { { /*src2     */ { FP32_SNAN(0),      FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V2(0), FP32_SNAN_V7(0), FP32_SNAN_V1(0), FP32_SNAN_V6(0), FP32_SNAN_V1(0) } },  \
            { /*src1     */ { FP32_SNAN(0),      FP32_SNAN_MAX(0), FP32_SNAN_V4(0), FP32_SNAN_V3(0), FP32_SNAN_V5(0), FP32_SNAN_V3(0), FP32_SNAN_V1(0), FP32_SNAN_V2(0) } },  \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_SNAN_MAX(0), FP32_SNAN_V4(0), FP32_SNAN_V3(0), FP32_SNAN_V5(0), FP32_SNAN_V3(0), FP32_SNAN_V1(0), FP32_SNAN_V2(0) } },  \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,                                                                                                                     \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_IE,                                                                                                      \
              /*256:out  */ -1 },                                                                                                                                             \
          { { /*src2     */ { FP32_SNAN(0),     FP32_SNAN_V2(0), FP32_SNAN_V1(0), FP32_SNAN_V2(0), FP32_SNAN_V7(0), FP32_SNAN_V1(0), FP32_SNAN_V6(0), FP32_SNAN_V1(0) } },    \
            { /*src1     */ { FP32_SNAN_MAX(0), FP32_SNAN_V0(0), FP32_SNAN_V4(0), FP32_SNAN_V3(0), FP32_SNAN_V5(0), FP32_SNAN_V3(0), FP32_SNAN_V1(0), FP32_SNAN_V2(0) } },    \
            { /* =>      */ { FP32_QNAN_MAX(0), FP32_SNAN_V0(0), FP32_SNAN_V4(0), FP32_SNAN_V3(0), FP32_SNAN_V5(0), FP32_SNAN_V3(0), FP32_SNAN_V1(0), FP32_SNAN_V2(0) } },    \
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,                                                                                                                                \
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE,                                                                                                                 \
              /*256:out  */ -1 },                                                                                                                                             \
          { { /*src2     */ { FP32_SNAN_V1(0), FP32_SNAN_V2(0), FP32_SNAN_V1(0), FP32_SNAN_V2(0), FP32_SNAN_V7(0), FP32_SNAN_V1(0), FP32_SNAN_V6(0), FP32_SNAN_V1(0) } },     \
            { /*src1     */ { FP32_SNAN_V4(0), FP32_SNAN_V3(0), FP32_SNAN_V4(0), FP32_SNAN_V3(0), FP32_SNAN_V5(0), FP32_SNAN_V3(0), FP32_SNAN_V1(0), FP32_SNAN_V0(0) } },     \
            { /* =>      */ { FP32_QNAN_V4(0), FP32_SNAN_V3(0), FP32_SNAN_V4(0), FP32_SNAN_V3(0), FP32_SNAN_V5(0), FP32_SNAN_V3(0), FP32_SNAN_V1(0), FP32_SNAN_V0(0) } },     \
              /*mxcsr:in */ 0,                                                                                                                                                \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                     \
              /*256:out  */ -1 },                                                                                                                                             \
    /* QNan, Norm FP */                                                                                                                                                       \
          { { /*src2     */ { FP32_QNAN(0), FP32_QNAN_MAX(1), FP32_NORM_V0(1), FP32_QNAN_V1(0), FP32_NORM_V3(0), FP32_QNAN_V3(1), FP32_NORM_V5(0), FP32_QNAN_V5(1) } },       \
            { /*src1     */ { FP32_1(0),    FP32_1(1),        FP32_QNAN_V0(1), FP32_NORM_V2(1), FP32_QNAN_V2(0), FP32_NORM_V4(0), FP32_QNAN_V4(1), FP32_NORM_V6(1) } },       \
            { /* =>      */ { FP32_QNAN(0), FP32_1(1),        FP32_QNAN_V0(1), FP32_NORM_V2(1), FP32_QNAN_V2(0), FP32_NORM_V4(0), FP32_QNAN_V4(1), FP32_NORM_V6(1) } },       \
              /*mxcsr:in */ X86_MXCSR_FZ,                                                                                                                                     \
              /*128:out  */ X86_MXCSR_FZ,                                                                                                                                     \
              /*256:out  */ -1 },                                                                                                                                             \
    /* SNan, Norm FP */                                                                                                                                                       \
    /*13*/{ { /*src2     */ { FP32_SNAN(1),      FP32_SNAN_MAX(1), FP32_NORM_V0(1), FP32_SNAN_V1(0), FP32_NORM_V3(0), FP32_SNAN_V3(1), FP32_NORM_V5(0), FP32_SNAN_V5(1) } },  \
            { /*src1     */ { FP32_1(0),         FP32_1(0),        FP32_SNAN_V0(1), FP32_NORM_V2(1), FP32_SNAN_V2(1), FP32_NORM_V4(0), FP32_SNAN_V4(1), FP32_NORM_V6(1) } },  \
            { /* =>      */ { FP32_QNAN_V(1, 1), FP32_1(0),        FP32_SNAN_V0(1), FP32_NORM_V2(1), FP32_SNAN_V2(1), FP32_NORM_V4(0), FP32_SNAN_V4(1), FP32_NORM_V6(1) } },  \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,                                                                                                 \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,                                                                                  \
              /*256:out  */ -1 },                                                                                                                                             \

/**
 * Table D-1: Scalar double-precision floating-point invalid values.
 * For instructions: addsd, subsd, mulsd, divsd.
 **/
#define FP64_TABLE_D1_SD_INVALIDS \
    /* QNan, QNan (Masked). */                                                                            \
    /* 0*/{ { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } },      \
            { /*src1     */ { FP64_QNAN(0), FP64_QNAN(1),     FP64_QNAN_MAX(1), FP64_QNAN_V2(0) } },      \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN(1),     FP64_QNAN_MAX(1), FP64_QNAN_V2(0) } },      \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ 0,                                                                            \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_QNAN_MAX(0), FP64_QNAN_V1(1), FP64_QNAN_V2(0), FP64_INF(0)  } },       \
            { /*src1     */ { FP64_QNAN(0),     FP64_QNAN_V2(1), FP64_QNAN_V3(1), FP64_SNAN(1) } },       \
            { /* =>      */ { FP64_QNAN(0),     FP64_QNAN_V2(1), FP64_QNAN_V3(1), FP64_SNAN(1) } },       \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ 0,                                                                            \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_QNAN_V1(0), FP64_QNAN_V1(0), FP64_QNAN_V2(0), FP64_INF(1)  } },        \
            { /*src1     */ { FP64_QNAN_V0(0), FP64_QNAN_V2(0), FP64_QNAN_V3(1), FP64_QNAN(0) } },        \
            { /* =>      */ { FP64_QNAN_V0(0), FP64_QNAN_V2(0), FP64_QNAN_V3(1), FP64_QNAN(0) } },        \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ 0,                                                                            \
              /*256:out  */ -1 },                                                                         \
    /* QNan, SNan (Masked). */                                                                            \
          { { /*src2     */ { FP64_QNAN(0),      FP64_QNAN_V1(0), FP64_QNAN_V2(0), FP64_QNAN_V3(0) } },   \
            { /*src1     */ { FP64_SNAN(0),      FP64_SNAN_V2(1), FP64_SNAN_V1(0), FP64_SNAN_V2(1) } },   \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_SNAN_V2(1), FP64_SNAN_V1(0), FP64_SNAN_V2(1) } },   \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ X86_MXCSR_IE,                                                                 \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_QNAN_MAX(0),  FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } }, \
            { /*src1     */ { FP64_SNAN(0),      FP64_SNAN(1),     FP64_SNAN_MAX(1), FP64_SNAN_V2(0) } }, \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_SNAN(1),     FP64_SNAN_MAX(1), FP64_SNAN_V2(0) } }, \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ X86_MXCSR_IE,                                                                 \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_QNAN_V1(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_INF(0)  } },      \
            { /*src1     */ { FP64_SNAN_V2(0), FP64_QNAN(0),     FP64_QNAN_MAX(1), FP64_QNAN(1) } },      \
            { /* =>      */ { FP64_QNAN_V2(0), FP64_QNAN(0),     FP64_QNAN_MAX(1), FP64_QNAN(1) } },      \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ X86_MXCSR_IE,                                                                 \
              /*256:out  */ -1 },                                                                         \
    /* SNan, QNan (Masked). */                                                                            \
          { { /*src2     */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V1(1) } },       \
            { /*src1     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V3(1), FP64_QNAN_V2(1) } },       \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V3(1), FP64_QNAN_V2(1) } },       \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ X86_MXCSR_IE,                                                                 \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_SNAN_MAX(0), FP64_SNAN_MAX(1), FP64_SNAN_V1(0), FP64_SNAN_V1(0) } },   \
            { /*src1     */ { FP64_QNAN(0),     FP64_QNAN(1),     FP64_QNAN_V3(1), FP64_QNAN_V2(0) } },   \
            { /* =>      */ { FP64_QNAN(0),     FP64_QNAN(1),     FP64_QNAN_V3(1), FP64_QNAN_V2(0) } },   \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ X86_MXCSR_IE,                                                                 \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_SNAN_V0(0), FP64_SNAN_MAX(0), FP64_SNAN_V1(0), FP64_SNAN_V1(0) } },    \
            { /*src1     */ { FP64_QNAN_V1(0), FP64_QNAN(1),     FP64_QNAN_V2(1), FP64_QNAN_V3(1) } },    \
            { /* =>      */ { FP64_QNAN_V1(0), FP64_QNAN(1),     FP64_QNAN_V2(1), FP64_QNAN_V3(1) } },    \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ X86_MXCSR_IE,                                                                 \
              /*256:out  */ -1 },                                                                         \
    /* SNan, SNan (Masked). */                                                                            \
          { { /*src2     */ { FP64_SNAN(0),      FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V2(0) } },  \
            { /*src1     */ { FP64_SNAN(0),      FP64_SNAN_MAX(0), FP64_SNAN_V0(0), FP64_SNAN_V3(0) } },  \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_SNAN_MAX(0), FP64_SNAN_V0(0), FP64_SNAN_V3(0) } },  \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ X86_MXCSR_IE,                                                                 \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_SNAN(0),     FP64_SNAN_V2(0), FP64_SNAN_V1(0), FP64_SNAN_V2(0) } },    \
            { /*src1     */ { FP64_SNAN_MAX(0), FP64_SNAN_V0(0), FP64_SNAN_V2(0), FP64_SNAN_V3(1) } },    \
            { /* =>      */ { FP64_QNAN_MAX(0), FP64_SNAN_V0(0), FP64_SNAN_V2(0), FP64_SNAN_V3(1) } },    \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ X86_MXCSR_IE,                                                                 \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_SNAN_V1(0), FP64_SNAN_V2(0), FP64_SNAN_V1(0), FP64_SNAN_V2(0) } },     \
            { /*src1     */ { FP64_SNAN_V0(0), FP64_SNAN_V3(0), FP64_SNAN_V0(0), FP64_SNAN_V3(0) } },     \
            { /* =>      */ { FP64_QNAN_V0(0), FP64_SNAN_V3(0), FP64_SNAN_V0(0), FP64_SNAN_V3(0) } },     \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ X86_MXCSR_IE,                                                                 \
              /*256:out  */ -1 },                                                                         \
    /* QNan, Norm FP (Masked). */                                                                         \
          { { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(1), FP64_NORM_V0(1), FP64_QNAN_V1(0) } },       \
            { /*src1     */ { FP64_1(0),    FP64_1(1),        FP64_QNAN_V0(1), FP64_NORM_V2(1) } },       \
            { /* =>      */ { FP64_QNAN(0), FP64_1(1),        FP64_QNAN_V0(1), FP64_NORM_V2(1) } },       \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ 0,                                                                            \
              /*256:out  */ -1 },                                                                         \
    /* SNan, Norm FP (Masked). */                                                                         \
          { { /*src2     */ { FP64_SNAN(1),      FP64_SNAN_MAX(1), FP64_NORM_V0(1), FP64_SNAN_V1(0) } },  \
            { /*src1     */ { FP64_1(0),         FP64_1(0),        FP64_SNAN_V0(1), FP64_NORM_V2(1) } },  \
            { /* =>      */ { FP64_QNAN_V(1, 1), FP64_1(0),        FP64_SNAN_V0(1), FP64_NORM_V2(1) } },  \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ X86_MXCSR_IE,                                                                 \
              /*256:out  */ -1 },                                                                         \
    /* QNan, QNan (Unmasked). */                                                                          \
    /*14*/{ { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } },      \
            { /*src1     */ { FP64_QNAN(0), FP64_QNAN(0),     FP64_QNAN_MAX(0), FP64_QNAN_V2(0) } },      \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN(0),     FP64_QNAN_MAX(0), FP64_QNAN_V2(0) } },      \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ 0,                                                                            \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_QNAN_MAX(0), FP64_QNAN_V1(0), FP64_QNAN_V2(0), FP64_QNAN_V3(0) } },    \
            { /*src1     */ { FP64_QNAN(0),     FP64_QNAN_V2(0), FP64_QNAN_V0(0), FP64_QNAN_V2(0) } },    \
            { /* =>      */ { FP64_QNAN(0),     FP64_QNAN_V2(0), FP64_QNAN_V0(0), FP64_QNAN_V2(0) } },    \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ 0,                                                                            \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_QNAN_V1(0), FP64_QNAN_V1(0), FP64_QNAN_V2(0), FP64_QNAN_V3(0) } },     \
            { /*src1     */ { FP64_QNAN_V2(0), FP64_QNAN_V2(1), FP64_QNAN_V0(0), FP64_QNAN_V0(1) } },     \
            { /* =>      */ { FP64_QNAN_V2(0), FP64_QNAN_V2(1), FP64_QNAN_V0(0), FP64_QNAN_V0(1) } },     \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ 0,                                                                            \
              /*256:out  */ -1 },                                                                         \
    /* QNan, SNan (Unmasked). */                                                                          \
          { { /*src2     */ { FP64_QNAN(0),      FP64_QNAN_V1(0), FP64_QNAN_V2(0), FP64_QNAN_V3(0) } },   \
            { /*src1     */ { FP64_SNAN(0),      FP64_SNAN_V2(1), FP64_SNAN_V3(1), FP64_SNAN_V2(0) } },   \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_SNAN_V2(1), FP64_SNAN_V3(1), FP64_SNAN_V2(0) } },   \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ X86_MXCSR_IE,                                                                 \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_QNAN_MAX(0),  FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } }, \
            { /*src1     */ { FP64_SNAN(0),      FP64_SNAN(0),     FP64_SNAN_MAX(0), FP64_SNAN_V2(0) } }, \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_SNAN(0),     FP64_SNAN_MAX(0), FP64_SNAN_V2(0) } }, \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,                             \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,              \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_QNAN_V1(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } },   \
            { /*src1     */ { FP64_SNAN_V2(0), FP64_QNAN(0),     FP64_QNAN_MAX(0), FP64_QNAN_V2(0) } },   \
            { /* =>      */ { FP64_QNAN_V2(0), FP64_QNAN(0),     FP64_QNAN_MAX(0), FP64_QNAN_V2(0) } },   \
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,                                             \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,                              \
              /*256:out  */ -1 },                                                                         \
    /* SNan, QNan (Unmasked). */                                                                          \
          { { /*src2     */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V1(0) } },       \
            { /*src1     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V3(0), FP64_QNAN_V2(0) } },       \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V3(0), FP64_QNAN_V2(0) } },       \
              /*mxcsr:in */ X86_MXCSR_DAZ,                                                                \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE,                                                 \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_SNAN_MAX(0), FP64_SNAN_MAX(0), FP64_SNAN_V1(0), FP64_SNAN_V1(1) } },   \
            { /*src1     */ { FP64_QNAN(0),     FP64_QNAN(0),     FP64_QNAN_V2(1), FP64_QNAN_V0(1) } },   \
            { /* =>      */ { FP64_QNAN(0),     FP64_QNAN(0),     FP64_QNAN_V2(1), FP64_QNAN_V0(1) } },   \
              /*mxcsr:in */ X86_MXCSR_RC_UP,                                                              \
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_IE,                                               \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_SNAN_V0(0), FP64_SNAN_MAX(0), FP64_SNAN_V1(0), FP64_SNAN_V1(1) } },    \
            { /*src1     */ { FP64_QNAN_V3(0), FP64_QNAN(0),     FP64_QNAN_V2(1), FP64_QNAN_V3(1) } },    \
            { /* =>      */ { FP64_QNAN_V3(0), FP64_QNAN(0),     FP64_QNAN_V2(1), FP64_QNAN_V3(1) } },    \
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,                                             \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,                              \
              /*256:out  */ -1 },                                                                         \
    /* SNan, SNan (Unmasked). */                                                                          \
    /*23*/{ { /*src2     */ { FP64_SNAN(0),      FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V2(0) } },  \
            { /*src1     */ { FP64_SNAN(0),      FP64_SNAN_MAX(0), FP64_SNAN_V2(0), FP64_SNAN_V0(1) } },  \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_SNAN_MAX(0), FP64_SNAN_V2(0), FP64_SNAN_V0(1) } },  \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,                                                 \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_IE,                                  \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_SNAN(0),     FP64_SNAN_V2(0), FP64_SNAN_V1(0), FP64_SNAN_V2(1) } },    \
            { /*src1     */ { FP64_SNAN_MAX(0), FP64_SNAN_V0(0), FP64_SNAN_V2(1), FP64_SNAN_V3(1) } },    \
            { /* =>      */ { FP64_QNAN_MAX(0), FP64_SNAN_V0(0), FP64_SNAN_V2(1), FP64_SNAN_V3(1) } },    \
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,                                                            \
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE,                                             \
              /*256:out  */ -1 },                                                                         \
          { { /*src2     */ { FP64_SNAN_V1(0), FP64_SNAN_V2(0), FP64_SNAN_V0(1), FP64_SNAN_V2(0) } },     \
            { /*src1     */ { FP64_SNAN_V2(0), FP64_SNAN_V3(1), FP64_SNAN_V3(1), FP64_SNAN_V3(0) } },     \
            { /* =>      */ { FP64_QNAN_V2(0), FP64_SNAN_V3(1), FP64_SNAN_V3(1), FP64_SNAN_V3(0) } },     \
              /*mxcsr:in */ 0,                                                                            \
              /*128:out  */ X86_MXCSR_IE,                                                                 \
              /*256:out  */ -1 },                                                                         \
    /* QNan, Norm FP (Unmasked). */                                                                       \
          { { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(1), FP64_NORM_V0(1), FP64_QNAN_V1(0) } },       \
            { /*src1     */ { FP64_1(0),    FP64_INF(1),      FP64_QNAN_V0(1), FP64_NORM_V2(1) } },       \
            { /* =>      */ { FP64_QNAN(0), FP64_INF(1),      FP64_QNAN_V0(1), FP64_NORM_V2(1) } },       \
              /*mxcsr:in */ X86_MXCSR_FZ,                                                                 \
              /*128:out  */ X86_MXCSR_FZ,                                                                 \
              /*256:out  */ -1 },                                                                         \
    /* SNan, Norm FP (Unmasked). */                                                                       \
    /*27*/{ { /*src2     */ { FP64_SNAN(1),      FP64_SNAN_MAX(1), FP64_NORM_V0(1), FP64_SNAN_V1(0) } },  \
            { /*src1     */ { FP64_1(0),         FP64_INF(0),      FP64_SNAN_V0(1), FP64_NORM_V2(1) } },  \
            { /* =>      */ { FP64_QNAN_V(1, 1), FP64_INF(0),      FP64_SNAN_V0(1), FP64_NORM_V2(1) } },  \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,                             \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,              \
              /*256:out  */ -1 },                                                                         \

/**
 * Table D-1: Horizontally packed single-precision floating-point invalid values.
 * For instructions: haddps, hsubps.
 **/
#define FP32_TABLE_D1_H_PS_INVALIDS \
    /* 0*/{ { /*src2     */ { FP32_QNAN_MAX(0), FP32_QNAN(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0),  FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V3(0), FP32_QNAN_V5(0) } },        \
            { /*src1     */ { FP32_QNAN(0),     FP32_QNAN(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } },        \
            { /* =>      */ { FP32_QNAN(0),     FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V6(0), FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0) } },        \
              /*mxcsr:in */ 0,                                                                                                                                                   \
              /*128:out  */ 0,                                                                                                                                                   \
              /*256:out  */ 0 },                                                                                                                                                 \
          { { /*src2     */ { FP32_QNAN(0), FP32_SNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V1(0),  FP32_QNAN_V2(0), FP32_SNAN_V3(0), FP32_QNAN_V4(0), FP32_SNAN_V5(0) } },            \
            { /*src1     */ { FP32_QNAN(0), FP32_SNAN(0), FP32_QNAN(0),     FP32_SNAN_V2(0),  FP32_QNAN_V6(0), FP32_SNAN_V2(0), FP32_QNAN_V1(0), FP32_SNAN_V4(0) } },            \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V4(0) } },            \
              /*mxcsr:in */ 0,                                                                                                                                                   \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                        \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                                      \
          { { /*src2     */ { FP32_SNAN_MAX(0),  FP32_QNAN_V2(0),   FP32_SNAN_V1(0),  FP32_QNAN_V2(0), FP32_SNAN_V3(0), FP32_QNAN_V4(0), FP32_SNAN_V5(0), FP32_QNAN_V6(0) } },   \
            { /*src1     */ { FP32_SNAN(0),      FP32_QNAN(0),      FP32_SNAN(0),     FP32_QNAN_V5(0), FP32_SNAN_V4(0), FP32_QNAN_V3(0), FP32_SNAN_V2(0), FP32_QNAN_V1(0) } },   \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_V(0, 1), FP32_QNAN_MAX(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V5(0) } },   \
              /*mxcsr:in */ 0,                                                                                                                                                   \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                        \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                                      \
          { { /*src2     */ { FP32_SNAN(0),      FP32_SNAN_MAX(0),  FP32_SNAN_MAX(0),  FP32_SNAN(0),     FP32_SNAN_V7(0), FP32_SNAN_V1(0), FP32_SNAN_V6(0), FP32_SNAN_V1(0) } }, \
            { /*src1     */ { FP32_SNAN(0),      FP32_SNAN(0),      FP32_SNAN(0),      FP32_SNAN_MAX(0), FP32_SNAN_V5(0), FP32_SNAN_V3(0), FP32_SNAN_V1(0), FP32_SNAN_V2(0) } }, \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_V(0, 1), FP32_QNAN_V(0, 1), FP32_QNAN_MAX(0), FP32_QNAN_V5(0), FP32_QNAN_V1(0), FP32_QNAN_V7(0), FP32_QNAN_V6(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                                   \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                        \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                                      \
          { { /*src2     */ { FP32_QNAN(0), FP32_NORM_V1(0),  FP32_QNAN_MAX(0), FP32_QNAN_V1(0),  FP32_QNAN_V1(0), FP32_NORM_V3(1), FP32_QNAN_V5(0), FP32_NORM_V5(1) } },        \
            { /*src1     */ { FP32_QNAN(0), FP32_1(1),        FP32_QNAN_MAX(1), FP32_NORM_V2(1),  FP32_QNAN_V2(0), FP32_NORM_V4(0), FP32_QNAN_V4(1), FP32_NORM_V6(1) } },        \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN_MAX(1), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V4(1), FP32_QNAN_V1(0), FP32_QNAN_V5(0) } },        \
              /*mxcsr:in */ 0,                                                                                                                                                   \
              /*128:out  */ 0,                                                                                                                                                   \
              /*256:out  */ 0 },                                                                                                                                                 \
          { { /*src2     */ { FP32_SNAN_MAX(1),  FP32_1(0),        FP32_SNAN_V1(0),  FP32_NORM_V3(0), FP32_SNAN_V0(0), FP32_NORM_V3(1), FP32_SNAN_V6(0), FP32_NORM_V7(1) } },    \
            { /*src1     */ { FP32_SNAN(0),      FP32_1(1),        FP32_SNAN_MAX(0), FP32_NORM_V2(1), FP32_SNAN_V2(1), FP32_NORM_V4(0), FP32_SNAN_V4(1), FP32_NORM_V6(1) } },    \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_MAX(0), FP32_QNAN_MAX(1), FP32_QNAN_V1(0), FP32_QNAN_V2(1), FP32_QNAN_V4(1), FP32_QNAN_V0(0), FP32_QNAN_V6(0) } },    \
              /*mxcsr:in */ 0,                                                                                                                                                   \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                        \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                                      \
          { { /*src2     */ { FP32_QNAN_MAX(0), FP32_QNAN(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0),  FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V3(0), FP32_QNAN_V5(0) } },        \
            { /*src1     */ { FP32_QNAN(0),     FP32_QNAN(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } },        \
            { /* =>      */ { FP32_QNAN(0),     FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V6(0), FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0) } },        \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,                                                                                                    \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,                                                                                                    \
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },                                                                                                  \
          { { /*src2     */ { FP32_QNAN(0), FP32_SNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V1(0),  FP32_QNAN_V2(0), FP32_SNAN_V3(0), FP32_QNAN_V4(0), FP32_SNAN_V5(0) } },            \
            { /*src1     */ { FP32_QNAN(0), FP32_SNAN(0), FP32_QNAN(0),     FP32_SNAN_V2(0),  FP32_QNAN_V6(0), FP32_SNAN_V2(0), FP32_QNAN_V1(0), FP32_SNAN_V4(0) } },            \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V4(0) } },            \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,                                                                                                                     \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,                                                                                                      \
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },                                                                                                    \
          { { /*src2     */ { FP32_SNAN_MAX(0),  FP32_QNAN_V2(0),   FP32_SNAN_V1(0),  FP32_QNAN_V2(0), FP32_SNAN_V3(0), FP32_QNAN_V4(0), FP32_SNAN_V5(0), FP32_QNAN_V6(0) } },   \
            { /*src1     */ { FP32_SNAN(0),      FP32_QNAN(0),      FP32_SNAN(0),     FP32_QNAN_V5(0), FP32_SNAN_V4(0), FP32_QNAN_V3(0), FP32_SNAN_V2(0), FP32_QNAN_V1(0) } },   \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_V(0, 1), FP32_QNAN_MAX(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V5(0) } },   \
              /*mxcsr:in */ 0,                                                                                                                                                   \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                        \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                                      \
          { { /*src2     */ { FP32_SNAN(0),      FP32_SNAN_MAX(0),  FP32_SNAN_MAX(0),  FP32_SNAN(0),     FP32_SNAN_V7(0), FP32_SNAN_V1(0), FP32_SNAN_V6(0), FP32_SNAN_V1(0) } }, \
            { /*src1     */ { FP32_SNAN(0),      FP32_SNAN(0),      FP32_SNAN(0),      FP32_SNAN_MAX(0), FP32_SNAN_V5(0), FP32_SNAN_V3(0), FP32_SNAN_V1(0), FP32_SNAN_V2(0) } }, \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_V(0, 1), FP32_QNAN_V(0, 1), FP32_QNAN_MAX(0), FP32_QNAN_V5(0), FP32_QNAN_V1(0), FP32_QNAN_V7(0), FP32_QNAN_V6(0) } }, \
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,                                                                                                                      \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,                                                                                                       \
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },                                                                                                     \
          { { /*src2     */ { FP32_QNAN(0), FP32_NORM_V1(0),  FP32_QNAN_MAX(0), FP32_QNAN_V1(0),  FP32_QNAN_V1(0), FP32_NORM_V3(1), FP32_QNAN_V5(0), FP32_NORM_V5(1) } },        \
            { /*src1     */ { FP32_QNAN(0), FP32_1(1),        FP32_QNAN_MAX(1), FP32_NORM_V2(1),  FP32_QNAN_V2(0), FP32_NORM_V4(0), FP32_QNAN_V4(1), FP32_NORM_V6(1) } },        \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN_MAX(1), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V4(1), FP32_QNAN_V1(0), FP32_QNAN_V5(0) } },        \
              /*mxcsr:in */ 0,                                                                                                                                                   \
              /*128:out  */ 0,                                                                                                                                                   \
              /*256:out  */ 0 },                                                                                                                                                 \
          { { /*src2     */ { FP32_SNAN_MAX(1),  FP32_1(0),        FP32_SNAN_V1(0),  FP32_NORM_V3(0), FP32_SNAN_V0(0), FP32_NORM_V3(1), FP32_SNAN_V6(0), FP32_NORM_V7(1) } },    \
            { /*src1     */ { FP32_SNAN(0),      FP32_1(1),        FP32_SNAN_MAX(0), FP32_NORM_V2(1), FP32_SNAN_V2(1), FP32_NORM_V4(0), FP32_SNAN_V4(1), FP32_NORM_V6(1) } },    \
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_MAX(0), FP32_QNAN_MAX(1), FP32_QNAN_V1(0), FP32_QNAN_V2(1), FP32_QNAN_V4(1), FP32_QNAN_V0(0), FP32_QNAN_V6(0) } },    \
              /*mxcsr:in */ X86_MXCSR_RC_UP,                                                                                                                                     \
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_IE,                                                                                                                      \
              /*256:out  */ X86_MXCSR_RC_UP | X86_MXCSR_IE },                                                                                                                    \

/**
 * Table D-1: Horizontally packed double-precision floating-point invalid values.
 * For instructions: haddpd, hsubpd.
 **/
#define FP64_TABLE_D1_H_PD_INVALIDS \
    /* 0*/{ { /*src2     */ { FP64_QNAN_MAX(0), FP64_QNAN(0),     FP64_QNAN_V0(0), FP64_QNAN_V1(0)  } },     \
            { /*src1     */ { FP64_QNAN(0),     FP64_QNAN(0),     FP64_QNAN(0),    FP64_QNAN_MAX(0) } },     \
            { /* =>      */ { FP64_QNAN(0),     FP64_QNAN_MAX(0), FP64_QNAN(0),    FP64_QNAN_V0(0)  } },     \
              /*mxcsr:in */ 0,                                                                               \
              /*128:out  */ 0,                                                                               \
              /*256:out  */ 0 },                                                                             \
          { { /*src2     */ { FP64_QNAN(0), FP64_SNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V1(0)  } },            \
            { /*src1     */ { FP64_QNAN(0), FP64_SNAN(0), FP64_QNAN(0),     FP64_SNAN_V2(0)  } },            \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN(0), FP64_QNAN(0),     FP64_QNAN_MAX(0) } },            \
              /*mxcsr:in */ 0,                                                                               \
              /*128:out  */ X86_MXCSR_IE,                                                                    \
              /*256:out  */ X86_MXCSR_IE },                                                                  \
          { { /*src2     */ { FP64_SNAN_MAX(0),  FP64_QNAN_V2(0),  FP64_SNAN_V1(0),   FP64_QNAN_V2(0) } },   \
            { /*src1     */ { FP64_SNAN(0),      FP64_QNAN(0),     FP64_SNAN(0),      FP64_QNAN_V3(0) } },   \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_QNAN_MAX(0), FP64_QNAN_V(0, 1), FP64_QNAN_V1(0) } },   \
              /*mxcsr:in */ 0,                                                                               \
              /*128:out  */ X86_MXCSR_IE,                                                                    \
              /*256:out  */ X86_MXCSR_IE },                                                                  \
          { { /*src2     */ { FP64_SNAN(0),      FP64_SNAN_MAX(0),  FP64_SNAN_MAX(0),  FP64_SNAN(0)     } }, \
            { /*src1     */ { FP64_SNAN(0),      FP64_SNAN(0),      FP64_SNAN(0),      FP64_SNAN_MAX(0) } }, \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_QNAN_V(0, 1), FP64_QNAN_V(0, 1), FP64_QNAN_MAX(0) } }, \
              /*mxcsr:in */ 0,                                                                               \
              /*128:out  */ X86_MXCSR_IE,                                                                    \
              /*256:out  */ X86_MXCSR_IE },                                                                  \
          { { /*src2     */ { FP64_QNAN(0), FP64_NORM_V1(0), FP64_QNAN_MAX(0), FP64_QNAN_V1(0)  } },         \
            { /*src1     */ { FP64_QNAN(0), FP64_1(1),       FP64_QNAN_MAX(1), FP64_NORM_V2(1)  } },         \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN(0),    FP64_QNAN_MAX(1), FP64_QNAN_MAX(0) } },         \
              /*mxcsr:in */ 0,                                                                               \
              /*128:out  */ 0,                                                                               \
              /*256:out  */ 0 },                                                                             \
          { { /*src2     */ { FP64_SNAN_MAX(1),  FP64_1(0),        FP64_SNAN_V1(0),  FP64_NORM_V3(0) } },    \
            { /*src1     */ { FP64_SNAN(0),      FP64_1(1),        FP64_SNAN_MAX(0), FP64_NORM_V2(1) } },    \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_QNAN_MAX(1), FP64_QNAN_MAX(0), FP64_QNAN_V1(0) } },    \
              /*mxcsr:in */ 0,                                                                               \
              /*128:out  */ X86_MXCSR_IE,                                                                    \
              /*256:out  */ X86_MXCSR_IE },                                                                  \
          { { /*src2     */ { FP64_QNAN_MAX(0), FP64_QNAN(0),     FP64_QNAN_V0(0), FP64_QNAN_V1(0)  } },     \
            { /*src1     */ { FP64_QNAN(0),     FP64_QNAN(0),     FP64_QNAN(0),    FP64_QNAN_MAX(0) } },     \
            { /* =>      */ { FP64_QNAN(0),     FP64_QNAN_MAX(0), FP64_QNAN(0),    FP64_QNAN_V0(0)  } },     \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,                                \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,                                \
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },                              \
          { { /*src2     */ { FP64_QNAN(0), FP64_SNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V1(0)  } },            \
            { /*src1     */ { FP64_QNAN(0), FP64_SNAN(0), FP64_QNAN(0),     FP64_SNAN_V2(0)  } },            \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN(0), FP64_QNAN(0),     FP64_QNAN_MAX(0) } },            \
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,                                                 \
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,                                  \
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },                                \
          { { /*src2     */ { FP64_SNAN_MAX(0),  FP64_QNAN_V2(0),  FP64_SNAN_V1(0),   FP64_QNAN_V2(0) } },   \
            { /*src1     */ { FP64_SNAN(0),      FP64_QNAN(0),     FP64_SNAN(0),      FP64_QNAN_V3(0) } },   \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_QNAN_MAX(0), FP64_QNAN_V(0, 1), FP64_QNAN_V1(0) } },   \
              /*mxcsr:in */ 0,                                                                               \
              /*128:out  */ X86_MXCSR_IE,                                                                    \
              /*256:out  */ X86_MXCSR_IE },                                                                  \
          { { /*src2     */ { FP64_SNAN(0),      FP64_SNAN_MAX(0),  FP64_SNAN_MAX(0),  FP64_SNAN(0)     } }, \
            { /*src1     */ { FP64_SNAN(0),      FP64_SNAN(0),      FP64_SNAN(0),      FP64_SNAN_MAX(0) } }, \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_QNAN_V(0, 1), FP64_QNAN_V(0, 1), FP64_QNAN_MAX(0) } }, \
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,                                                  \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,                                   \
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },                                 \
          { { /*src2     */ { FP64_QNAN(0), FP64_NORM_V1(0), FP64_QNAN_MAX(0), FP64_QNAN_V1(0)  } },         \
            { /*src1     */ { FP64_QNAN(0), FP64_1(1),       FP64_QNAN_MAX(1), FP64_NORM_V2(1)  } },         \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN(0),    FP64_QNAN_MAX(1), FP64_QNAN_MAX(0) } },         \
              /*mxcsr:in */ 0,                                                                               \
              /*128:out  */ 0,                                                                               \
              /*256:out  */ 0 },                                                                             \
    /*11*/{ { /*src2     */ { FP64_SNAN_MAX(1),  FP64_1(0),        FP64_SNAN_V1(0),  FP64_NORM_V3(0) } },    \
            { /*src1     */ { FP64_SNAN(0),      FP64_1(1),        FP64_SNAN_MAX(0), FP64_NORM_V2(1) } },    \
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_QNAN_MAX(1), FP64_QNAN_MAX(0), FP64_QNAN_V1(0) } },    \
              /*mxcsr:in */ X86_MXCSR_RC_UP,                                                                 \
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_IE,                                                  \
              /*256:out  */ X86_MXCSR_RC_UP | X86_MXCSR_IE },                                                \

/**
 * Table D-9: Packed single-precision floating-point invalid values.
 * For instructions: maxps, minps.
 **/
#define FP32_TABLE_D9_PS_INVALIDS \
    /* 0*/{ { /*src2     */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } }, \
            { /*src1     */ { FP32_QNAN(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } }, \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                           \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                              \
          { { /*src2     */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } }, \
            { /*src1     */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_MAX(0), FP32_SNAN_V2(0), FP32_SNAN_V6(0), FP32_SNAN_V2(0), FP32_SNAN_V1(0), FP32_SNAN_V4(0) } }, \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                           \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                              \
          { { /*src2     */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V1(0), FP32_SNAN_V3(0), FP32_SNAN_V4(0), FP32_SNAN_V5(0), FP32_SNAN_V6(0) } },  \
            { /*src1     */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0) } },  \
            { /* =>      */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V1(0), FP32_SNAN_V3(0), FP32_SNAN_V4(0), FP32_SNAN_V5(0), FP32_SNAN_V6(0) } },  \
              /*mxcsr:in */ X86_MXCSR_FZ,                                                                                                                                \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,                                                                                                                 \
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },                                                                                                               \
          { { /*src2     */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V2(0), FP32_SNAN_V7(0), FP32_SNAN_V1(0), FP32_SNAN_V6(0), FP32_SNAN_V1(0) } },  \
            { /*src1     */ { FP32_SNAN(0), FP32_SNAN_MAX(0), FP32_SNAN_V4(0), FP32_SNAN_V3(0), FP32_SNAN_V5(0), FP32_SNAN_V3(0), FP32_SNAN_V1(0), FP32_SNAN_V2(0) } },  \
            { /* =>      */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V2(0), FP32_SNAN_V7(0), FP32_SNAN_V1(0), FP32_SNAN_V6(0), FP32_SNAN_V1(0) } },  \
              /*mxcsr:in */ 0,                                                                                                                                           \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                              \
          { { /*src2     */ { FP32_QNAN(0), FP32_QNAN_MAX(1), FP32_NORM_V0(1), FP32_QNAN_V1(0), FP32_NORM_V3(0), FP32_QNAN_V3(1), FP32_NORM_V5(0), FP32_QNAN_V5(1) } },  \
            { /*src1     */ { FP32_1(0),    FP32_1(1),        FP32_QNAN_V0(1), FP32_NORM_V2(1), FP32_QNAN_V2(0), FP32_NORM_V4(0), FP32_QNAN_V4(1), FP32_NORM_V6(1) } },  \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN_MAX(1), FP32_NORM_V0(1), FP32_QNAN_V1(0), FP32_NORM_V3(0), FP32_QNAN_V3(1), FP32_NORM_V5(0), FP32_QNAN_V5(1) } },  \
              /*mxcsr:in */ 0,                                                                                                                                           \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                              \
          { { /*src2     */ { FP32_SNAN(1), FP32_SNAN_MAX(1), FP32_NORM_V0(1), FP32_SNAN_V1(0), FP32_NORM_V3(0), FP32_SNAN_V3(1), FP32_NORM_V5(0), FP32_SNAN_V5(1) } },  \
            { /*src1     */ { FP32_1(0),    FP32_1(0),        FP32_SNAN_V0(1), FP32_NORM_V2(1), FP32_SNAN_V2(1), FP32_NORM_V4(0), FP32_SNAN_V4(1), FP32_NORM_V6(1) } },  \
            { /* =>      */ { FP32_SNAN(1), FP32_SNAN_MAX(1), FP32_NORM_V0(1), FP32_SNAN_V1(0), FP32_NORM_V3(0), FP32_SNAN_V3(1), FP32_NORM_V5(0), FP32_SNAN_V5(1) } },  \
              /*mxcsr:in */ 0,                                                                                                                                           \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                              \
          { { /*src2     */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } }, \
            { /*src1     */ { FP32_QNAN(0), FP32_QNAN(0),     FP32_QNAN_MAX(0), FP32_QNAN_V2(0), FP32_QNAN_V6(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0), FP32_QNAN_V4(0) } }, \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                           \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                              \
          { { /*src2     */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } }, \
            { /*src1     */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_MAX(0), FP32_SNAN_V2(0), FP32_SNAN_V6(0), FP32_SNAN_V2(0), FP32_SNAN_V1(0), FP32_SNAN_V4(0) } }, \
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V0(0),  FP32_QNAN_V1(0), FP32_QNAN_V2(0), FP32_QNAN_V3(0), FP32_QNAN_V4(0), FP32_QNAN_V5(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                           \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                              \
          { { /*src2     */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V1(0), FP32_SNAN_V3(0), FP32_SNAN_V4(0), FP32_SNAN_V5(0), FP32_SNAN_V6(0) } },  \
            { /*src1     */ { FP32_QNAN(0), FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V5(0), FP32_QNAN_V4(0), FP32_QNAN_V3(0), FP32_QNAN_V2(0), FP32_QNAN_V1(0) } },  \
            { /* =>      */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V1(0), FP32_SNAN_V3(0), FP32_SNAN_V4(0), FP32_SNAN_V5(0), FP32_SNAN_V6(0) } },  \
              /*mxcsr:in */ 0,                                                                                                                                           \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                              \
          { { /*src2     */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V2(0), FP32_SNAN_V7(0), FP32_SNAN_V1(0), FP32_SNAN_V6(0), FP32_SNAN_V1(0) } },  \
            { /*src1     */ { FP32_SNAN(0), FP32_SNAN_MAX(0), FP32_SNAN_V4(0), FP32_SNAN_V3(0), FP32_SNAN_V5(0), FP32_SNAN_V3(0), FP32_SNAN_V1(0), FP32_SNAN_V2(0) } },  \
            { /* =>      */ { FP32_SNAN(0), FP32_SNAN(0),     FP32_SNAN_V1(0), FP32_SNAN_V2(0), FP32_SNAN_V7(0), FP32_SNAN_V1(0), FP32_SNAN_V6(0), FP32_SNAN_V1(0) } },  \
              /*mxcsr:in */ 0,                                                                                                                                           \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                \
              /*256:out  */ X86_MXCSR_IE },                                                                                                                              \

/**
 * Table D-9: Packed double-precision floating-point invalid values.
 * For instructions: maxpd, minpd.
 **/
#define FP64_TABLE_D9_PD_INVALIDS \
    /* 0*/{ { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } }, \
            { /*src1     */ { FP64_QNAN(0), FP64_QNAN(0),     FP64_QNAN_MAX(0), FP64_QNAN_V2(0) } }, \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } }, \
              /*mxcsr:in */ 0,                                                                       \
              /*128:out  */ X86_MXCSR_IE,                                                            \
              /*256:out  */ X86_MXCSR_IE },                                                          \
          { { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } }, \
            { /*src1     */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_MAX(0), FP64_SNAN_V2(0) } }, \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } }, \
              /*mxcsr:in */ 0,                                                                       \
              /*128:out  */ X86_MXCSR_IE,                                                            \
              /*256:out  */ X86_MXCSR_IE },                                                          \
          { { /*src2     */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V1(0) } },  \
            { /*src1     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V2(0), FP64_QNAN_V3(0) } },  \
            { /* =>      */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V1(0) } },  \
              /*mxcsr:in */ X86_MXCSR_FZ,                                                            \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,                                             \
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },                                           \
          { { /*src2     */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V2(0) } },  \
            { /*src1     */ { FP64_SNAN(0), FP64_SNAN_MAX(0), FP64_SNAN_V2(0), FP64_SNAN_V3(0) } },  \
            { /* =>      */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V2(0) } },  \
              /*mxcsr:in */ 0,                                                                       \
              /*128:out  */ X86_MXCSR_IE,                                                            \
              /*256:out  */ X86_MXCSR_IE },                                                          \
          { { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(1), FP64_NORM_V0(1), FP64_QNAN_V1(0) } },  \
            { /*src1     */ { FP64_1(0),    FP64_1(1),        FP64_QNAN_V0(1), FP64_NORM_V2(1) } },  \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN_MAX(1), FP64_NORM_V0(1), FP64_QNAN_V1(0) } },  \
              /*mxcsr:in */ 0,                                                                       \
              /*128:out  */ X86_MXCSR_IE,                                                            \
              /*256:out  */ X86_MXCSR_IE },                                                          \
          { { /*src2     */ { FP64_SNAN(1), FP64_SNAN_MAX(1), FP64_NORM_V0(1), FP64_SNAN_V1(0) } },  \
            { /*src1     */ { FP64_1(0),    FP64_1(0),        FP64_SNAN_V0(1), FP64_NORM_V2(1) } },  \
            { /* =>      */ { FP64_SNAN(1), FP64_SNAN_MAX(1), FP64_NORM_V0(1), FP64_SNAN_V1(0) } },  \
              /*mxcsr:in */ 0,                                                                       \
              /*128:out  */ X86_MXCSR_IE,                                                            \
              /*256:out  */ X86_MXCSR_IE },                                                          \
          { { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } }, \
            { /*src1     */ { FP64_QNAN(0), FP64_QNAN(0),     FP64_QNAN_MAX(0), FP64_QNAN_V2(0) } }, \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } }, \
              /*mxcsr:in */ 0,                                                                       \
              /*128:out  */ X86_MXCSR_IE,                                                            \
              /*256:out  */ X86_MXCSR_IE },                                                          \
          { { /*src2     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } }, \
            { /*src1     */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_MAX(0), FP64_SNAN_V2(0) } }, \
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V0(0),  FP64_QNAN_V1(0) } }, \
              /*mxcsr:in */ 0,                                                                       \
              /*128:out  */ X86_MXCSR_IE,                                                            \
              /*256:out  */ X86_MXCSR_IE },                                                          \
          { { /*src2     */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V1(0) } },  \
            { /*src1     */ { FP64_QNAN(0), FP64_QNAN_MAX(0), FP64_QNAN_V2(0), FP64_QNAN_V3(0) } },  \
            { /* =>      */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V1(0) } },  \
              /*mxcsr:in */ 0,                                                                       \
              /*128:out  */ X86_MXCSR_IE,                                                            \
              /*256:out  */ X86_MXCSR_IE },                                                          \
          { { /*src2     */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V2(0) } },  \
            { /*src1     */ { FP64_SNAN(0), FP64_SNAN_MAX(0), FP64_SNAN_V2(0), FP64_SNAN_V3(0) } },  \
            { /* =>      */ { FP64_SNAN(0), FP64_SNAN(0),     FP64_SNAN_V1(0), FP64_SNAN_V2(0) } },  \
              /*mxcsr:in */ 0,                                                                       \
              /*128:out  */ X86_MXCSR_IE,                                                            \
              /*256:out  */ X86_MXCSR_IE },                                                          \

/**
 * Table D-9: Scalar single-precision floating-point invalid values.
 * For instructions: maxss, minss.
 **/
#define FP32_TABLE_D9_SS_INVALIDS \
    /* QNan, QNan (Masked). */                                                                                                                                             \
    /* 0*/{ { /*src2     */ { FP32_QNAN(0), FP32_RAND_V2(0), FP32_RAND_V7(1), FP32_RAND_V6(0), FP32_RAND_V2(0), FP32_RAND_V1(1), FP32_RAND_V7(0), FP32_RAND_V2(1) } },     \
            { /*src1     */ { FP32_QNAN(0), FP32_RAND_V3(0), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V5(1), FP32_RAND_V6(1), FP32_RAND_V7(1), FP32_RAND_V1(1) } },     \
            { /* =>      */ { FP32_QNAN(0), FP32_RAND_V3(0), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V5(1), FP32_RAND_V6(1), FP32_RAND_V7(1), FP32_RAND_V1(1) } },     \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_QNAN_MAX(0), FP32_RAND_V0(0), FP32_RAND_V1(1), FP32_RAND_V2(0), FP32_RAND_V3(0), FP32_RAND_V4(1), FP32_RAND_V5(0), FP32_RAND_V6(1) } }, \
            { /*src1     */ { FP32_QNAN(0),     FP32_RAND_V7(1), FP32_RAND_V6(0), FP32_RAND_V5(1), FP32_RAND_V4(1), FP32_RAND_V3(1), FP32_RAND_V2(0), FP32_RAND_V1(0) } }, \
            { /* =>      */ { FP32_QNAN_MAX(0), FP32_RAND_V7(1), FP32_RAND_V6(0), FP32_RAND_V5(1), FP32_RAND_V4(1), FP32_RAND_V3(1), FP32_RAND_V2(0), FP32_RAND_V1(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_QNAN_V0(0),  FP32_RAND_V0(1), FP32_RAND_V7(1), FP32_RAND_V2(0), FP32_RAND_V3(1), FP32_RAND_V4(0), FP32_RAND_V1(0), FP32_RAND_V2(0) } }, \
            { /*src1     */ { FP32_QNAN_MAX(0), FP32_RAND_V1(0), FP32_RAND_V7(0), FP32_RAND_V2(1), FP32_RAND_V6(1), FP32_RAND_V3(1), FP32_RAND_V5(0), FP32_RAND_V4(1) } }, \
            { /* =>      */ { FP32_QNAN_V0(0),  FP32_RAND_V1(0), FP32_RAND_V7(0), FP32_RAND_V2(1), FP32_RAND_V6(1), FP32_RAND_V3(1), FP32_RAND_V5(0), FP32_RAND_V4(1) } }, \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
    /* QNan, SNan (Masked). */                                                                                                                                             \
          { { /*src2     */ { FP32_QNAN(0), FP32_RAND_V6(0), FP32_RAND_V5(1), FP32_RAND_V4(0), FP32_RAND_V2(0), FP32_RAND_V2(1), FP32_RAND_V1(0), FP32_RAND_V0(1) } },     \
            { /*src1     */ { FP32_SNAN(0), FP32_RAND_V0(1), FP32_RAND_V1(0), FP32_RAND_V2(0), FP32_RAND_V3(1), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V6(0) } },     \
            { /* =>      */ { FP32_QNAN(0), FP32_RAND_V0(1), FP32_RAND_V1(0), FP32_RAND_V2(0), FP32_RAND_V3(1), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V6(0) } },     \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_QNAN_MAX(0), FP32_RAND_V2(1), FP32_RAND_V3(0), FP32_RAND_V1(1), FP32_RAND_V0(1), FP32_RAND_V4(1), FP32_RAND_V5(1), FP32_RAND_V6(1) } }, \
            { /*src1     */ { FP32_SNAN(0),     FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V5(0), FP32_RAND_V2(1), FP32_RAND_V0(0), FP32_RAND_V1(0), FP32_RAND_V3(0) } }, \
            { /* =>      */ { FP32_QNAN_MAX(0), FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V5(0), FP32_RAND_V2(1), FP32_RAND_V0(0), FP32_RAND_V1(0), FP32_RAND_V3(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_QNAN_V0(0),  FP32_RAND_V1(1), FP32_RAND_V3(0), FP32_RAND_V1(1), FP32_RAND_V0(0), FP32_RAND_V4(1), FP32_RAND_V5(1), FP32_RAND_V6(1) } }, \
            { /*src1     */ { FP32_SNAN_MAX(0), FP32_RAND_V3(0), FP32_RAND_V5(0), FP32_RAND_V2(1), FP32_RAND_V0(0), FP32_RAND_V6(0), FP32_RAND_V7(1), FP32_RAND_V1(0) } }, \
            { /* =>      */ { FP32_QNAN_V0(0),  FP32_RAND_V3(0), FP32_RAND_V5(0), FP32_RAND_V2(1), FP32_RAND_V0(0), FP32_RAND_V6(0), FP32_RAND_V7(1), FP32_RAND_V1(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
    /* SNan, QNan (Masked). */                                                                                                                                             \
          { { /*src2     */ { FP32_SNAN(0), FP32_RAND_V2(1), FP32_RAND_V3(0), FP32_RAND_V1(1), FP32_RAND_V0(1), FP32_RAND_V4(1), FP32_RAND_V5(1), FP32_RAND_V6(1) } },     \
            { /*src1     */ { FP32_QNAN(0), FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V5(0), FP32_RAND_V2(1), FP32_RAND_V0(0), FP32_RAND_V1(0), FP32_RAND_V3(0) } },     \
            { /* =>      */ { FP32_SNAN(0), FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V5(0), FP32_RAND_V2(1), FP32_RAND_V0(0), FP32_RAND_V1(0), FP32_RAND_V3(0) } },     \
              /*mxcsr:in */ X86_MXCSR_FZ,                                                                                                                                  \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,                                                                                                                   \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_SNAN(0),     FP32_RAND_V1(1), FP32_RAND_V3(0), FP32_RAND_V1(1), FP32_RAND_V3(0), FP32_RAND_V4(1), FP32_RAND_V5(1), FP32_RAND_V7(1) } }, \
            { /*src1     */ { FP32_QNAN_MAX(0), FP32_RAND_V2(0), FP32_RAND_V4(0), FP32_RAND_V3(1), FP32_RAND_V2(0), FP32_RAND_V6(0), FP32_RAND_V7(1), FP32_RAND_V2(0) } }, \
            { /* =>      */ { FP32_SNAN(0),     FP32_RAND_V2(0), FP32_RAND_V4(0), FP32_RAND_V3(1), FP32_RAND_V2(0), FP32_RAND_V6(0), FP32_RAND_V7(1), FP32_RAND_V2(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_SNAN_V1(0), FP32_RAND_V1(1), FP32_RAND_V7(1), FP32_RAND_V2(0), FP32_RAND_V3(1), FP32_RAND_V4(0), FP32_RAND_V1(0), FP32_RAND_V2(0) } },  \
            { /*src1     */ { FP32_QNAN_V6(0), FP32_RAND_V2(0), FP32_RAND_V3(0), FP32_RAND_V4(1), FP32_RAND_V5(1), FP32_RAND_V0(1), FP32_RAND_V2(0), FP32_RAND_V3(1) } },  \
            { /* =>      */ { FP32_SNAN_V1(0), FP32_RAND_V2(0), FP32_RAND_V3(0), FP32_RAND_V4(1), FP32_RAND_V5(1), FP32_RAND_V0(1), FP32_RAND_V2(0), FP32_RAND_V3(1) } },  \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
    /* SNan, SNan (Masked). */                                                                                                                                             \
          { { /*src2     */ { FP32_SNAN(0), FP32_RAND_V1(1), FP32_RAND_V7(1), FP32_RAND_V2(0), FP32_RAND_V3(1), FP32_RAND_V4(0), FP32_RAND_V1(0), FP32_RAND_V2(0) } },     \
            { /*src1     */ { FP32_SNAN(0), FP32_RAND_V3(0), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V2(1), FP32_RAND_V0(1), FP32_RAND_V1(0), FP32_RAND_V7(0) } },     \
            { /* =>      */ { FP32_SNAN(0), FP32_RAND_V3(0), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V2(1), FP32_RAND_V0(1), FP32_RAND_V1(0), FP32_RAND_V7(0) } },     \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_SNAN(0),     FP32_RAND_V1(0), FP32_RAND_V7(1), FP32_RAND_V2(1), FP32_RAND_V3(0), FP32_RAND_V4(1), FP32_RAND_V1(1), FP32_RAND_V2(1) } }, \
            { /*src1     */ { FP32_SNAN_MAX(0), FP32_RAND_V7(0), FP32_RAND_V5(0), FP32_RAND_V7(1), FP32_RAND_V6(1), FP32_RAND_V5(1), FP32_RAND_V3(0), FP32_RAND_V2(1) } }, \
            { /* =>      */ { FP32_SNAN(0),     FP32_RAND_V7(0), FP32_RAND_V5(0), FP32_RAND_V7(1), FP32_RAND_V6(1), FP32_RAND_V5(1), FP32_RAND_V3(0), FP32_RAND_V2(1) } }, \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_SNAN_V1(0), FP32_RAND_V1(1), FP32_RAND_V6(1), FP32_RAND_V2(0), FP32_RAND_V3(1), FP32_RAND_V4(0), FP32_RAND_V1(0), FP32_RAND_V2(0) } },  \
            { /*src1     */ { FP32_SNAN_V4(0), FP32_RAND_V2(1), FP32_RAND_V3(1), FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V3(0), FP32_RAND_V0(0), FP32_RAND_V0(1) } },  \
            { /* =>      */ { FP32_SNAN_V1(0), FP32_RAND_V2(1), FP32_RAND_V3(1), FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V3(0), FP32_RAND_V0(0), FP32_RAND_V0(1) } },  \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
    /* QNan, Normal (Masked). */                                                                                                                                           \
          { { /*src2     */ { FP32_QNAN(0), FP32_RAND_V3(1), FP32_RAND_V2(1), FP32_RAND_V2(0), FP32_RAND_V5(1), FP32_RAND_V4(0), FP32_RAND_V1(0), FP32_RAND_V2(0) } },     \
            { /*src1     */ { FP32_1(0),    FP32_RAND_V2(1), FP32_RAND_V4(1), FP32_RAND_V6(1), FP32_RAND_V2(1), FP32_RAND_V7(0), FP32_RAND_V3(0), FP32_RAND_V4(1) } },     \
            { /* =>      */ { FP32_QNAN(0), FP32_RAND_V2(1), FP32_RAND_V4(1), FP32_RAND_V6(1), FP32_RAND_V2(1), FP32_RAND_V7(0), FP32_RAND_V3(0), FP32_RAND_V4(1) } },     \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
    /* SNan, Normal (Masked). */                                                                                                                                           \
          { { /*src2     */ { FP32_SNAN(1), FP32_RAND_V0(1), FP32_RAND_V2(1), FP32_RAND_V2(0), FP32_RAND_V5(1), FP32_RAND_V4(0), FP32_RAND_V1(0), FP32_RAND_V2(0) } },     \
            { /*src1     */ { FP32_1(0),    FP32_RAND_V0(1), FP32_RAND_V1(1), FP32_RAND_V3(1), FP32_RAND_V4(1), FP32_RAND_V6(0), FP32_RAND_V7(0), FP32_RAND_V1(1) } },     \
            { /* =>      */ { FP32_SNAN(1), FP32_RAND_V0(1), FP32_RAND_V1(1), FP32_RAND_V3(1), FP32_RAND_V4(1), FP32_RAND_V6(0), FP32_RAND_V7(0), FP32_RAND_V1(1) } },     \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
    /* QNan, QNan (Unmasked). */                                                                                                                                           \
          { { /*src2     */ { FP32_QNAN(0), FP32_RAND_V2(0), FP32_RAND_V7(1), FP32_RAND_V6(0), FP32_RAND_V2(0), FP32_RAND_V1(1), FP32_RAND_V7(0), FP32_RAND_V2(1) } },     \
            { /*src1     */ { FP32_QNAN(0), FP32_RAND_V3(0), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V5(1), FP32_RAND_V6(1), FP32_RAND_V7(1), FP32_RAND_V1(1) } },     \
            { /* =>      */ { FP32_QNAN(0), FP32_RAND_V3(0), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V5(1), FP32_RAND_V6(1), FP32_RAND_V7(1), FP32_RAND_V1(1) } },     \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_QNAN_MAX(0), FP32_RAND_V0(0), FP32_RAND_V1(1), FP32_RAND_V2(0), FP32_RAND_V3(0), FP32_RAND_V4(1), FP32_RAND_V5(0), FP32_RAND_V6(1) } }, \
            { /*src1     */ { FP32_QNAN(0),     FP32_RAND_V7(1), FP32_RAND_V6(0), FP32_RAND_V5(1), FP32_RAND_V4(1), FP32_RAND_V3(1), FP32_RAND_V2(0), FP32_RAND_V1(0) } }, \
            { /* =>      */ { FP32_QNAN_MAX(0), FP32_RAND_V7(1), FP32_RAND_V6(0), FP32_RAND_V5(1), FP32_RAND_V4(1), FP32_RAND_V3(1), FP32_RAND_V2(0), FP32_RAND_V1(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_QNAN_V0(0),  FP32_RAND_V0(1), FP32_RAND_V7(1), FP32_RAND_V2(0), FP32_RAND_V3(1), FP32_RAND_V4(0), FP32_RAND_V1(0), FP32_RAND_V2(0) } }, \
            { /*src1     */ { FP32_QNAN_MAX(0), FP32_RAND_V1(0), FP32_RAND_V7(0), FP32_RAND_V2(1), FP32_RAND_V6(1), FP32_RAND_V3(1), FP32_RAND_V5(0), FP32_RAND_V4(1) } }, \
            { /* =>      */ { FP32_QNAN_V0(0),  FP32_RAND_V1(0), FP32_RAND_V7(0), FP32_RAND_V2(1), FP32_RAND_V6(1), FP32_RAND_V3(1), FP32_RAND_V5(0), FP32_RAND_V4(1) } }, \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
    /* QNan, SNan (Unmasked). */                                                                                                                                           \
          { { /*src2     */ { FP32_QNAN(0), FP32_RAND_V6(0), FP32_RAND_V5(1), FP32_RAND_V4(0), FP32_RAND_V2(0), FP32_RAND_V2(1), FP32_RAND_V1(0), FP32_RAND_V0(1) } },     \
            { /*src1     */ { FP32_SNAN(0), FP32_RAND_V0(1), FP32_RAND_V1(0), FP32_RAND_V2(0), FP32_RAND_V3(1), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V6(0) } },     \
            { /* =>      */ { FP32_QNAN(0), FP32_RAND_V0(1), FP32_RAND_V1(0), FP32_RAND_V2(0), FP32_RAND_V3(1), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V6(0) } },     \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_QNAN_MAX(0), FP32_RAND_V2(1), FP32_RAND_V3(0), FP32_RAND_V1(1), FP32_RAND_V0(1), FP32_RAND_V4(1), FP32_RAND_V5(1), FP32_RAND_V6(1) } }, \
            { /*src1     */ { FP32_SNAN(0),     FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V5(0), FP32_RAND_V2(1), FP32_RAND_V0(0), FP32_RAND_V1(0), FP32_RAND_V3(0) } }, \
            { /* =>      */ { FP32_QNAN_MAX(0), FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V5(0), FP32_RAND_V2(1), FP32_RAND_V0(0), FP32_RAND_V1(0), FP32_RAND_V3(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_QNAN_V0(0),  FP32_RAND_V1(1), FP32_RAND_V3(0), FP32_RAND_V1(1), FP32_RAND_V0(0), FP32_RAND_V4(1), FP32_RAND_V5(1), FP32_RAND_V6(1) } }, \
            { /*src1     */ { FP32_SNAN_MAX(0), FP32_RAND_V3(0), FP32_RAND_V5(0), FP32_RAND_V2(1), FP32_RAND_V0(0), FP32_RAND_V6(0), FP32_RAND_V7(1), FP32_RAND_V1(0) } }, \
            { /* =>      */ { FP32_QNAN_V0(0),  FP32_RAND_V3(0), FP32_RAND_V5(0), FP32_RAND_V2(1), FP32_RAND_V0(0), FP32_RAND_V6(0), FP32_RAND_V7(1), FP32_RAND_V1(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
    /* SNan, QNan (Unmasked). */                                                                                                                                           \
          { { /*src2     */ { FP32_SNAN(0), FP32_RAND_V2(1), FP32_RAND_V3(0), FP32_RAND_V1(1), FP32_RAND_V0(1), FP32_RAND_V4(1), FP32_RAND_V5(1), FP32_RAND_V6(1) } },     \
            { /*src1     */ { FP32_QNAN(0), FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V5(0), FP32_RAND_V2(1), FP32_RAND_V0(0), FP32_RAND_V1(0), FP32_RAND_V3(0) } },     \
            { /* =>      */ { FP32_SNAN(0), FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V5(0), FP32_RAND_V2(1), FP32_RAND_V0(0), FP32_RAND_V1(0), FP32_RAND_V3(0) } },     \
              /*mxcsr:in */ X86_MXCSR_FZ,                                                                                                                                  \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,                                                                                                                   \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_SNAN(0),     FP32_RAND_V1(1), FP32_RAND_V3(0), FP32_RAND_V1(1), FP32_RAND_V3(0), FP32_RAND_V4(1), FP32_RAND_V5(1), FP32_RAND_V7(1) } }, \
            { /*src1     */ { FP32_QNAN_MAX(0), FP32_RAND_V2(0), FP32_RAND_V4(0), FP32_RAND_V3(1), FP32_RAND_V2(0), FP32_RAND_V6(0), FP32_RAND_V7(1), FP32_RAND_V2(0) } }, \
            { /* =>      */ { FP32_SNAN(0),     FP32_RAND_V2(0), FP32_RAND_V4(0), FP32_RAND_V3(1), FP32_RAND_V2(0), FP32_RAND_V6(0), FP32_RAND_V7(1), FP32_RAND_V2(0) } }, \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_SNAN_V1(0), FP32_RAND_V1(1), FP32_RAND_V7(1), FP32_RAND_V2(0), FP32_RAND_V3(1), FP32_RAND_V4(0), FP32_RAND_V1(0), FP32_RAND_V2(0) } },  \
            { /*src1     */ { FP32_QNAN_V6(0), FP32_RAND_V2(0), FP32_RAND_V3(0), FP32_RAND_V4(1), FP32_RAND_V5(1), FP32_RAND_V0(1), FP32_RAND_V2(0), FP32_RAND_V3(1) } },  \
            { /* =>      */ { FP32_SNAN_V1(0), FP32_RAND_V2(0), FP32_RAND_V3(0), FP32_RAND_V4(1), FP32_RAND_V5(1), FP32_RAND_V0(1), FP32_RAND_V2(0), FP32_RAND_V3(1) } },  \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
    /* SNan, SNan (Unmasked). */                                                                                                                                           \
          { { /*src2     */ { FP32_SNAN(0), FP32_RAND_V1(1), FP32_RAND_V7(1), FP32_RAND_V2(0), FP32_RAND_V3(1), FP32_RAND_V4(0), FP32_RAND_V1(0), FP32_RAND_V2(0) } },     \
            { /*src1     */ { FP32_SNAN(0), FP32_RAND_V3(0), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V2(1), FP32_RAND_V0(1), FP32_RAND_V1(0), FP32_RAND_V7(0) } },     \
            { /* =>      */ { FP32_SNAN(0), FP32_RAND_V3(0), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V2(1), FP32_RAND_V0(1), FP32_RAND_V1(0), FP32_RAND_V7(0) } },     \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_SNAN(0),     FP32_RAND_V1(0), FP32_RAND_V7(1), FP32_RAND_V2(1), FP32_RAND_V3(0), FP32_RAND_V4(1), FP32_RAND_V1(1), FP32_RAND_V2(1) } }, \
            { /*src1     */ { FP32_SNAN_MAX(0), FP32_RAND_V7(0), FP32_RAND_V5(0), FP32_RAND_V7(1), FP32_RAND_V6(1), FP32_RAND_V5(1), FP32_RAND_V3(0), FP32_RAND_V2(1) } }, \
            { /* =>      */ { FP32_SNAN(0),     FP32_RAND_V7(0), FP32_RAND_V5(0), FP32_RAND_V7(1), FP32_RAND_V6(1), FP32_RAND_V5(1), FP32_RAND_V3(0), FP32_RAND_V2(1) } }, \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
          { { /*src2     */ { FP32_SNAN_V1(0), FP32_RAND_V1(1), FP32_RAND_V6(1), FP32_RAND_V2(0), FP32_RAND_V3(1), FP32_RAND_V4(0), FP32_RAND_V1(0), FP32_RAND_V2(0) } },  \
            { /*src1     */ { FP32_SNAN_V4(0), FP32_RAND_V2(1), FP32_RAND_V3(1), FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V3(0), FP32_RAND_V0(0), FP32_RAND_V0(1) } },  \
            { /* =>      */ { FP32_SNAN_V1(0), FP32_RAND_V2(1), FP32_RAND_V3(1), FP32_RAND_V1(1), FP32_RAND_V4(0), FP32_RAND_V3(0), FP32_RAND_V0(0), FP32_RAND_V0(1) } },  \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
    /* QNan, Normal (Unmasked). */                                                                                                                                         \
          { { /*src2     */ { FP32_QNAN(0), FP32_RAND_V3(1), FP32_RAND_V2(1), FP32_RAND_V2(0), FP32_RAND_V5(1), FP32_RAND_V4(0), FP32_RAND_V1(0), FP32_RAND_V2(0) } },     \
            { /*src1     */ { FP32_1(0),    FP32_RAND_V2(1), FP32_RAND_V4(1), FP32_RAND_V6(1), FP32_RAND_V2(1), FP32_RAND_V7(0), FP32_RAND_V3(0), FP32_RAND_V4(1) } },     \
            { /* =>      */ { FP32_QNAN(0), FP32_RAND_V2(1), FP32_RAND_V4(1), FP32_RAND_V6(1), FP32_RAND_V2(1), FP32_RAND_V7(0), FP32_RAND_V3(0), FP32_RAND_V4(1) } },     \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \
    /* SNan, Normal (Unmasked). */                                                                                                                                         \
          { { /*src2     */ { FP32_SNAN(1), FP32_RAND_V0(1), FP32_RAND_V2(1), FP32_RAND_V2(0), FP32_RAND_V5(1), FP32_RAND_V4(0), FP32_RAND_V1(0), FP32_RAND_V2(0) } },     \
            { /*src1     */ { FP32_1(0),    FP32_RAND_V0(1), FP32_RAND_V1(1), FP32_RAND_V3(1), FP32_RAND_V4(1), FP32_RAND_V6(0), FP32_RAND_V7(0), FP32_RAND_V1(1) } },     \
            { /* =>      */ { FP32_SNAN(1), FP32_RAND_V0(1), FP32_RAND_V1(1), FP32_RAND_V3(1), FP32_RAND_V4(1), FP32_RAND_V6(0), FP32_RAND_V7(0), FP32_RAND_V1(1) } },     \
              /*mxcsr:in */ 0,                                                                                                                                             \
              /*128:out  */ X86_MXCSR_IE,                                                                                                                                  \
              /*256:out  */ -1 },                                                                                                                                          \

/**
 * Table D-9: Scalar double-precision floating-point invalid values.
 * For instructions: maxsd, minsd.
 **/
#define FP64_TABLE_D9_SD_INVALIDS \
    /* QNan, QNan (Masked). */                                                                         \
    /* 0*/{ { /*src2     */ { FP64_QNAN(0), FP64_RAND_V2(0), FP64_RAND_V0(1), FP64_RAND_V1(0) } },     \
            { /*src1     */ { FP64_QNAN(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },     \
            { /* =>      */ { FP64_QNAN(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },     \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_QNAN_MAX(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(0) } }, \
            { /*src1     */ { FP64_QNAN(0),     FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V3(1) } }, \
            { /* =>      */ { FP64_QNAN_MAX(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V3(1) } }, \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_QNAN_V0(0),  FP64_RAND_V0(1), FP64_RAND_V0(1), FP64_RAND_V2(0) } }, \
            { /*src1     */ { FP64_QNAN_MAX(0), FP64_RAND_V1(0), FP64_RAND_V0(0), FP64_RAND_V2(1) } }, \
            { /* =>      */ { FP64_QNAN_V0(0),  FP64_RAND_V1(0), FP64_RAND_V0(0), FP64_RAND_V2(1) } }, \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
    /* QNan, SNan (Masked). */                                                                         \
          { { /*src2     */ { FP64_QNAN(0), FP64_RAND_V1(0), FP64_RAND_V3(1), FP64_RAND_V2(0) } },     \
            { /*src1     */ { FP64_SNAN(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(0) } },     \
            { /* =>      */ { FP64_QNAN(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(0) } },     \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_QNAN_MAX(0), FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V1(1) } }, \
            { /*src1     */ { FP64_SNAN(0),     FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } }, \
            { /* =>      */ { FP64_QNAN_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } }, \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_QNAN_V0(0),  FP64_RAND_V1(1), FP64_RAND_V3(0), FP64_RAND_V1(1) } }, \
            { /*src1     */ { FP64_SNAN_MAX(0), FP64_RAND_V3(0), FP64_RAND_V3(0), FP64_RAND_V2(1) } }, \
            { /* =>      */ { FP64_QNAN_V0(0),  FP64_RAND_V3(0), FP64_RAND_V3(0), FP64_RAND_V2(1) } }, \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
    /* SNan, QNan (Masked). */                                                                         \
          { { /*src2     */ { FP64_SNAN(0), FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V1(1) } },     \
            { /*src1     */ { FP64_QNAN(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } },     \
            { /* =>      */ { FP64_SNAN(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } },     \
              /*mxcsr:in */ X86_MXCSR_FZ,                                                              \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,                                               \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_SNAN(0),     FP64_RAND_V1(1), FP64_RAND_V3(0), FP64_RAND_V1(1) } }, \
            { /*src1     */ { FP64_QNAN_MAX(0), FP64_RAND_V2(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } }, \
            { /* =>      */ { FP64_SNAN(0),     FP64_RAND_V2(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } }, \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_SNAN_V1(0), FP64_RAND_V1(1), FP64_RAND_V0(1), FP64_RAND_V2(0) } },  \
            { /*src1     */ { FP64_QNAN_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V2(1) } },  \
            { /* =>      */ { FP64_SNAN_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V2(1) } },  \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
    /* SNan, SNan (Masked). */                                                                         \
          { { /*src2     */ { FP64_SNAN(0), FP64_RAND_V1(1), FP64_RAND_V0(1), FP64_RAND_V2(0) } },     \
            { /*src1     */ { FP64_SNAN(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },     \
            { /* =>      */ { FP64_SNAN(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },     \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_SNAN(0),     FP64_RAND_V1(0), FP64_RAND_V0(1), FP64_RAND_V2(1) } }, \
            { /*src1     */ { FP64_SNAN_MAX(0), FP64_RAND_V0(0), FP64_RAND_V3(0), FP64_RAND_V0(1) } }, \
            { /* =>      */ { FP64_SNAN(0),     FP64_RAND_V0(0), FP64_RAND_V3(0), FP64_RAND_V0(1) } }, \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_SNAN_V1(0), FP64_RAND_V1(1), FP64_RAND_V1(1), FP64_RAND_V2(0) } },  \
            { /*src1     */ { FP64_SNAN_V2(0), FP64_RAND_V2(1), FP64_RAND_V3(1), FP64_RAND_V1(1) } },  \
            { /* =>      */ { FP64_SNAN_V1(0), FP64_RAND_V2(1), FP64_RAND_V3(1), FP64_RAND_V1(1) } },  \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
    /* QNan, Normal (Masked). */                                                                       \
          { { /*src2     */ { FP64_QNAN(0), FP64_RAND_V3(1), FP64_RAND_V2(1), FP64_RAND_V2(0) } },     \
            { /*src1     */ { FP64_1(0),    FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V1(1) } },     \
            { /* =>      */ { FP64_QNAN(0), FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V1(1) } },     \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
    /* SNan, Normal (Masked). */                                                                       \
          { { /*src2     */ { FP64_SNAN(1), FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V2(0) } },     \
            { /*src1     */ { FP64_1(0),    FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V3(1) } },     \
            { /* =>      */ { FP64_SNAN(1), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V3(1) } },     \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
    /* QNan, QNan (Unmasked). */                                                                       \
    /* 0*/{ { /*src2     */ { FP64_QNAN(0), FP64_RAND_V2(0), FP64_RAND_V0(1), FP64_RAND_V1(0) } },     \
            { /*src1     */ { FP64_QNAN(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },     \
            { /* =>      */ { FP64_QNAN(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },     \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_QNAN_MAX(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(0) } }, \
            { /*src1     */ { FP64_QNAN(0),     FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V3(1) } }, \
            { /* =>      */ { FP64_QNAN_MAX(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V3(1) } }, \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_QNAN_V0(0),  FP64_RAND_V0(1), FP64_RAND_V0(1), FP64_RAND_V2(0) } }, \
            { /*src1     */ { FP64_QNAN_MAX(0), FP64_RAND_V1(0), FP64_RAND_V0(0), FP64_RAND_V2(1) } }, \
            { /* =>      */ { FP64_QNAN_V0(0),  FP64_RAND_V1(0), FP64_RAND_V0(0), FP64_RAND_V2(1) } }, \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
    /* QNan, SNan (Unmasked). */                                                                       \
          { { /*src2     */ { FP64_QNAN(0), FP64_RAND_V1(0), FP64_RAND_V3(1), FP64_RAND_V2(0) } },     \
            { /*src1     */ { FP64_SNAN(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(0) } },     \
            { /* =>      */ { FP64_QNAN(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(0) } },     \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_QNAN_MAX(0), FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V1(1) } }, \
            { /*src1     */ { FP64_SNAN(0),     FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } }, \
            { /* =>      */ { FP64_QNAN_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } }, \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_QNAN_V0(0),  FP64_RAND_V1(1), FP64_RAND_V3(0), FP64_RAND_V1(1) } }, \
            { /*src1     */ { FP64_SNAN_MAX(0), FP64_RAND_V3(0), FP64_RAND_V3(0), FP64_RAND_V2(1) } }, \
            { /* =>      */ { FP64_QNAN_V0(0),  FP64_RAND_V3(0), FP64_RAND_V3(0), FP64_RAND_V2(1) } }, \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
    /* SNan, QNan (Unmasked). */                                                                       \
          { { /*src2     */ { FP64_SNAN(0), FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V1(1) } },     \
            { /*src1     */ { FP64_QNAN(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } },     \
            { /* =>      */ { FP64_SNAN(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } },     \
              /*mxcsr:in */ X86_MXCSR_FZ,                                                              \
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,                                               \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_SNAN(0),     FP64_RAND_V1(1), FP64_RAND_V3(0), FP64_RAND_V1(1) } }, \
            { /*src1     */ { FP64_QNAN_MAX(0), FP64_RAND_V2(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } }, \
            { /* =>      */ { FP64_SNAN(0),     FP64_RAND_V2(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } }, \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_SNAN_V1(0), FP64_RAND_V1(1), FP64_RAND_V0(1), FP64_RAND_V2(0) } },  \
            { /*src1     */ { FP64_QNAN_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V2(1) } },  \
            { /* =>      */ { FP64_SNAN_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V2(1) } },  \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
    /* SNan, SNan (Unmasked). */                                                                       \
          { { /*src2     */ { FP64_SNAN(0), FP64_RAND_V1(1), FP64_RAND_V0(1), FP64_RAND_V2(0) } },     \
            { /*src1     */ { FP64_SNAN(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },     \
            { /* =>      */ { FP64_SNAN(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },     \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_SNAN(0),     FP64_RAND_V1(0), FP64_RAND_V0(1), FP64_RAND_V2(1) } }, \
            { /*src1     */ { FP64_SNAN_MAX(0), FP64_RAND_V0(0), FP64_RAND_V3(0), FP64_RAND_V0(1) } }, \
            { /* =>      */ { FP64_SNAN(0),     FP64_RAND_V0(0), FP64_RAND_V3(0), FP64_RAND_V0(1) } }, \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
          { { /*src2     */ { FP64_SNAN_V1(0), FP64_RAND_V1(1), FP64_RAND_V1(1), FP64_RAND_V2(0) } },  \
            { /*src1     */ { FP64_SNAN_V2(0), FP64_RAND_V2(1), FP64_RAND_V3(1), FP64_RAND_V1(1) } },  \
            { /* =>      */ { FP64_SNAN_V1(0), FP64_RAND_V2(1), FP64_RAND_V3(1), FP64_RAND_V1(1) } },  \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
    /* QNan, Normal (Unmasked). */                                                                     \
          { { /*src2     */ { FP64_QNAN(0), FP64_RAND_V3(1), FP64_RAND_V2(1), FP64_RAND_V2(0) } },     \
            { /*src1     */ { FP64_1(0),    FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V1(1) } },     \
            { /* =>      */ { FP64_QNAN(0), FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V1(1) } },     \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \
    /* SNan, Normal (Unmasked). */                                                                     \
          { { /*src2     */ { FP64_SNAN(1), FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V2(0) } },     \
            { /*src1     */ { FP64_1(0),    FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V3(1) } },     \
            { /* =>      */ { FP64_SNAN(1), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V3(1) } },     \
              /*mxcsr:in */ 0,                                                                         \
              /*128:out  */ X86_MXCSR_IE,                                                              \
              /*256:out  */ -1 },                                                                      \


/**
 * Returns the name of an X86 exception given the vector.
 *
 * @returns Name of the exception.
 * @param   uVector     The exception vector.
 */
static const char BS3_FAR *bs3CpuInstr4XcptName(uint8_t uVector)
{
    switch (uVector)
    {
        case X86_XCPT_DE:             return "#DE";
        case X86_XCPT_DB:             return "#DB";
        case X86_XCPT_NMI:            return "#NMI";
        case X86_XCPT_BP:             return "#BP";
        case X86_XCPT_OF:             return "#OF";
        case X86_XCPT_BR:             return "#BR";
        case X86_XCPT_UD:             return "#UD";
        case X86_XCPT_NM:             return "#NM";
        case X86_XCPT_DF:             return "#DF";
        case X86_XCPT_CO_SEG_OVERRUN: return "#CO_SEG_OVERRUN";
        case X86_XCPT_TS:             return "#TS";
        case X86_XCPT_NP:             return "#NP";
        case X86_XCPT_SS:             return "#SS";
        case X86_XCPT_GP:             return "#GP";
        case X86_XCPT_PF:             return "#PF";
        case X86_XCPT_MF:             return "#MF";
        case X86_XCPT_AC:             return "#AC";
        case X86_XCPT_MC:             return "#MC";
        case X86_XCPT_XF:             return "#XF";
        case X86_XCPT_VE:             return "#VE";
        case X86_XCPT_CP:             return "#CP";
        case X86_XCPT_VC:             return "#VC";
        case X86_XCPT_SX:             return "#SX";
    }
    return "UNKNOWN";
}


DECL_FORCE_INLINE(bool) bs3CpuInstr4IsSse(uint8_t enmType)
{
    return enmType >= T_SSE && enmType < T_AVX_128;
}


DECL_FORCE_INLINE(bool) bs3CpuInstr4IsAvx(uint8_t enmType)
{
    return enmType >= T_AVX_128;
}


DECL_FORCE_INLINE(uint8_t) bs3CpuInstr4GetOperandSize(uint8_t enmType)
{
    return enmType < T_128BITS ?  64/8
         : enmType < T_256BITS ? 128/8 : 256/8;
}


/**
 * Gets the names of floating-point exception flags that are set for a given MXCSR.
 *
 * @returns Names of floating-point exception flags that are set.
 * @param   pszBuf  Where to store the floating-point exception flags.
 * @param   cchBuf  The size of the buffer.
 * @param   uMxCsr  The MXCSR value.
 */
static size_t bs3CpuInstr4GetXcptFlags(char BS3_FAR *pszBuf, size_t cchBuf, uint32_t uMxCsr)
{
    BS3_ASSERT(cchBuf >= FP_XCPT_FLAGS_NAMES_MAXLEN);
    return Bs3StrPrintf(pszBuf, cchBuf, "%s%s%s%s%s%s", uMxCsr & X86_MXCSR_IE ? " IE" : "", uMxCsr & X86_MXCSR_DE ? " DE" : "",
                                                        uMxCsr & X86_MXCSR_ZE ? " ZE" : "", uMxCsr & X86_MXCSR_OE ? " OE" : "",
                                                        uMxCsr & X86_MXCSR_UE ? " UE" : "", uMxCsr & X86_MXCSR_PE ? " PE" : "");
}

/**
 * Gets the names of floating-point exception mask that are set for a given MXCSR.
 *
 * @returns Names of floating-point exception flags that are set.
 * @param   pszBuf  Where to store the floating-point exception flags.
 * @param   cchBuf  The size of the buffer.
 * @param   uMxCsr  The MXCSR value.
 */
static size_t bs3CpuInstr4GetXcptMasks(char BS3_FAR *pszBuf, size_t cchBuf, uint32_t uMxCsr)
{
    BS3_ASSERT(cchBuf >= FP_XCPT_MASKS_NAMES_MAXLEN);
    return Bs3StrPrintf(pszBuf, cchBuf, "%s%s%s%s%s%s", uMxCsr & X86_MXCSR_IM ? " IM"  : "", uMxCsr & X86_MXCSR_DM ? " DM" : "",
                                                        uMxCsr & X86_MXCSR_ZM ? " ZM"  : "", uMxCsr & X86_MXCSR_OM ? " OM" : "",
                                                        uMxCsr & X86_MXCSR_UM ? " UM"  : "", uMxCsr & X86_MXCSR_PM ? " PM" : "");
}


/**
 * Gets the names of floating-point bits other than flags and masks that are set for
 * a given MXCSR.
 *
 * @returns Names of floating-point exception flags that are set.
 * @param   pszBuf  Where to store the floating-point exception flags.
 * @param   cchBuf  The size of the buffer.
 * @param   uMxCsr  The MXCSR value.
 */
static size_t bs3CpuInstr4GetXcptOthers(char BS3_FAR *pszBuf, size_t cchBuf, uint32_t uMxCsr)
{
    uint32_t const fMxCsrRc = uMxCsr & X86_MXCSR_RC_MASK;
    BS3_ASSERT(cchBuf >= FP_XCPT_OTHERS_NAMES_MAXLEN);
    return Bs3StrPrintf(pszBuf, cchBuf, "%s%s%s%s", uMxCsr   & X86_MXCSR_DAZ ? " DAZ" : "",
                                                    uMxCsr   & X86_MXCSR_FZ  ? " FZ"  : "",
                                                    uMxCsr   & X86_MXCSR_MM  ? " MM"  : "",
                                                    fMxCsrRc == X86_MXCSR_RC_NEAREST ? " RC=NEAREST" :
                                                    fMxCsrRc == X86_MXCSR_RC_DOWN    ? " RC=DOWN"    :
                                                    fMxCsrRc == X86_MXCSR_RC_UP      ? " RC=UP"      :
                                                    fMxCsrRc == X86_MXCSR_RC_ZERO    ? " RC=ZERO"    : "");
}


/**
 * Reconfigures the execution environment according to @a pConfig.
 *
 * Call bs3CpuInstrXConfigRestore to undo the changes.
 *
 * @returns true on success, false if the configuration cannot be applied. In
 *          the latter case, no context changes are made.
 * @param   pSavedCfg   Where to save state we modify.
 * @param   pCtx        The register context to modify.
 * @param   pExtCtx     The extended register context to modify.
 * @param   pConfig     The configuration to apply.
 * @param   bMode       The target mode.
 */
static bool bs3CpuInstr4ConfigReconfigure(PBS3CPUINSTRX_CONFIG_SAVED_T pSavedCfg, PBS3REGCTX pCtx, PBS3EXTCTX pExtCtx,
                                          PCBS3CPUINSTR4_CONFIG_T pConfig, uint8_t bMode)
{
    /*
     * Save context bits we may change here
     */
    pSavedCfg->uCr0   = pCtx->cr0.u32;
    pSavedCfg->uCr4   = pCtx->cr4.u32;
    pSavedCfg->uEfl   = pCtx->rflags.u32;
    pSavedCfg->uFcw   = Bs3ExtCtxGetFcw(pExtCtx);
    pSavedCfg->uFsw   = Bs3ExtCtxGetFsw(pExtCtx);
    pSavedCfg->uMxCsr = Bs3ExtCtxGetMxCsr(pExtCtx);

    /*
     * Can we make these changes?
     */
    if (pConfig->fMxCsrMM && !g_fAmdMisalignedSse)
        return false;

    /* Currently we skip pending x87 exceptions in real mode as they cannot be
       caught, given that we preserve the bios int10h. */
    if (pConfig->fX87XcptPending && BS3_MODE_IS_RM_OR_V86(bMode))
        return false;

    /*
     * Modify the test context.
     */
    if (pConfig->fCr0Mp)
        pCtx->cr0.u32 |= X86_CR0_MP;
    else
        pCtx->cr0.u32 &= ~X86_CR0_MP;
    if (pConfig->fCr0Em)
        pCtx->cr0.u32 |= X86_CR0_EM;
    else
        pCtx->cr0.u32 &= ~X86_CR0_EM;
    if (pConfig->fCr0Ts)
        pCtx->cr0.u32 |= X86_CR0_TS;
    else
        pCtx->cr0.u32 &= ~X86_CR0_TS;

    if (pConfig->fCr4OsFxSR)
        pCtx->cr4.u32 |= X86_CR4_OSFXSR;
    else
        pCtx->cr4.u32 &= ~X86_CR4_OSFXSR;

    if (pConfig->fCr4OsXmmExcpt && g_afTypeSupports[T_SSE])
        pCtx->cr4.u32 |= X86_CR4_OSXMMEEXCPT;
    else
        pCtx->cr4.u32 &= ~X86_CR4_OSXMMEEXCPT;

    if (pConfig->fCr4OsFxSR)
        pCtx->cr4.u32 |= X86_CR4_OSFXSR;
    else
        pCtx->cr4.u32 &= ~X86_CR4_OSFXSR;

    if (pConfig->fCr4OsXSave)
        pCtx->cr4.u32 |= X86_CR4_OSXSAVE;
    else
        pCtx->cr4.u32 &= ~X86_CR4_OSXSAVE;

    if (pConfig->fXcr0Sse)
        pExtCtx->fXcr0Saved |= XSAVE_C_SSE;
    else
        pExtCtx->fXcr0Saved &= ~XSAVE_C_SSE;
    if (pConfig->fXcr0Avx && g_afTypeSupports[T_AVX_256])
        pExtCtx->fXcr0Saved |= XSAVE_C_YMM;
    else
        pExtCtx->fXcr0Saved &= ~XSAVE_C_YMM;

    if (pConfig->fAlignCheck)
    {
        pCtx->rflags.u32 |= X86_EFL_AC;
        pCtx->cr0.u32    |= X86_CR0_AM;
    }
    else
    {
        pCtx->rflags.u32 &= ~X86_EFL_AC;
        pCtx->cr0.u32    &= ~X86_CR0_AM;
    }

    if (!pConfig->fX87XcptPending)
        Bs3ExtCtxSetFsw(pExtCtx, pSavedCfg->uFsw & ~(X86_FSW_ES | X86_FSW_B));
    else
    {
        Bs3ExtCtxSetFcw(pExtCtx, pSavedCfg->uFcw & ~X86_FCW_ZM);
        Bs3ExtCtxSetFsw(pExtCtx, pSavedCfg->uFsw | X86_FSW_ZE | X86_FSW_ES | X86_FSW_B);
        pCtx->cr0.u32 |= X86_CR0_NE;
    }

    if (pConfig->fMxCsrMM)
        Bs3ExtCtxSetMxCsr(pExtCtx, pSavedCfg->uMxCsr | X86_MXCSR_MM);
    else
        Bs3ExtCtxSetMxCsr(pExtCtx, pSavedCfg->uMxCsr & ~X86_MXCSR_MM);
    return true;
}


/**
 * Undoes changes made by bs3CpuInstr4ConfigReconfigure.
 */
static void bs3CpuInstrXConfigRestore(PCBS3CPUINSTRX_CONFIG_SAVED_T pSavedCfg, PBS3REGCTX pCtx, PBS3EXTCTX pExtCtx)
{
    pCtx->cr0.u32       = pSavedCfg->uCr0;
    pCtx->cr4.u32       = pSavedCfg->uCr4;
    pCtx->rflags.u32    = pSavedCfg->uEfl;
    pExtCtx->fXcr0Saved = pExtCtx->fXcr0Nominal;
    Bs3ExtCtxSetFcw(pExtCtx, pSavedCfg->uFcw);
    Bs3ExtCtxSetFsw(pExtCtx, pSavedCfg->uFsw);
    Bs3ExtCtxSetMxCsr(pExtCtx, pSavedCfg->uMxCsr);
}


/**
 * Allocates three extended CPU contexts and initializes the first one
 * with random data.
 * @returns First extended context, initialized with randomish data. NULL on
 *          failure (complained).
 * @param   ppExtCtx2   Where to return the 2nd context.
 */
static PBS3EXTCTX bs3CpuInstrXAllocExtCtxs(PBS3EXTCTX BS3_FAR *ppExtCtx2)
{
    /* Allocate extended context structures. */
    uint64_t   fFlags;
    uint16_t   cb       = Bs3ExtCtxGetSize(&fFlags);
    PBS3EXTCTX pExtCtx1 = Bs3MemAlloc(BS3MEMKIND_TILED, cb * 2);
    PBS3EXTCTX pExtCtx2 = (PBS3EXTCTX)((uint8_t BS3_FAR *)pExtCtx1 + cb);
    if (pExtCtx1)
    {
        Bs3ExtCtxInit(pExtCtx1, cb, fFlags);
        /** @todo populate with semi-random stuff. */

        Bs3ExtCtxInit(pExtCtx2, cb, fFlags);
        *ppExtCtx2 = pExtCtx2;
        return pExtCtx1;
    }
    Bs3TestFailedF("Bs3MemAlloc(tiled,%#x)", cb * 2);
    *ppExtCtx2 = NULL;
    return NULL;
}


/**
 * Frees the extended CPU contexts allocated by bs3CpuInstrXAllocExtCtxs.
 *
 * @param   pExtCtx1        The first extended context.
 * @param   pExtCtx2        The second extended context.
 */
static void bs3CpuInstrXFreeExtCtxs(PBS3EXTCTX pExtCtx1, PBS3EXTCTX BS3_FAR pExtCtx2)
{
    RT_NOREF_PV(pExtCtx2);
    Bs3MemFree(pExtCtx1, pExtCtx1->cb * 2);
}


/**
 * Sets up SSE and AVX bits relevant for FPU instructions.
 */
static void bs3CpuInstr4SetupSseAndAvx(PBS3REGCTX pCtx, PCBS3EXTCTX pExtCtx)
{
    /* CR0: */
    uint32_t cr0 = Bs3RegGetCr0();
    cr0 &= ~(X86_CR0_TS | X86_CR0_MP | X86_CR0_EM);
    cr0 |= X86_CR0_NE;
    Bs3RegSetCr0(cr0);

    /* If real mode context, the cr0 value will differ from the current one (we're in PE32 mode). */
    pCtx->cr0.u32 &= ~(X86_CR0_TS | X86_CR0_MP | X86_CR0_EM);
    pCtx->cr0.u32 |= X86_CR0_NE;

    /* CR4: */
    BS3_ASSERT(   pExtCtx->enmMethod == BS3EXTCTXMETHOD_FXSAVE
               || pExtCtx->enmMethod == BS3EXTCTXMETHOD_XSAVE);
    {
        uint32_t cr4 = Bs3RegGetCr4();
        if (pExtCtx->enmMethod == BS3EXTCTXMETHOD_XSAVE)
        {
            cr4 |= X86_CR4_OSFXSR | X86_CR4_OSXMMEEXCPT | X86_CR4_OSXSAVE;
            Bs3RegSetCr4(cr4);
            Bs3RegSetXcr0(pExtCtx->fXcr0Nominal);
        }
        else if (pExtCtx->enmMethod == BS3EXTCTXMETHOD_FXSAVE)
        {
            cr4 |= X86_CR4_OSFXSR | X86_CR4_OSXMMEEXCPT;
            Bs3RegSetCr4(cr4);
        }
        pCtx->cr4.u32 = cr4;
    }
}


/**
 * Configures the buffer with electric fences in paged modes.
 *
 * @returns Adjusted buffer pointer.
 * @param   pbBuf       The buffer pointer.
 * @param   pcbBuf      Pointer to the buffer size (input & output).
 * @param   bMode       The testing target mode.
 */
DECLINLINE(uint8_t BS3_FAR *) bs3CpuInstrXBufSetup(uint8_t BS3_FAR *pbBuf, uint32_t *pcbBuf, uint8_t bMode)
{
    if (BS3_MODE_IS_PAGED(bMode))
    {
        int      rc;
        uint32_t cbBuf = *pcbBuf;
        Bs3PagingProtectPtr(&pbBuf[0], X86_PAGE_SIZE, 0, X86_PTE_P);
        Bs3PagingProtectPtr(&pbBuf[cbBuf - X86_PAGE_SIZE], X86_PAGE_SIZE, 0, X86_PTE_P);
        pbBuf  += X86_PAGE_SIZE;
        cbBuf  -= X86_PAGE_SIZE * 2;
        *pcbBuf = cbBuf;

        g_pbBufAlias = g_pbBufAliasAlloc;
        rc = Bs3PagingAlias((uintptr_t)g_pbBufAlias, (uintptr_t)pbBuf, cbBuf + X86_PAGE_SIZE, /* must include the tail guard pg */
                            X86_PTE_P | X86_PTE_A | X86_PTE_D | X86_PTE_RW);
        if (RT_FAILURE(rc))
            Bs3TestFailedF("Bs3PagingAlias failed on %p/%p LB %#x: %d", g_pbBufAlias, pbBuf, cbBuf, rc);
    }
    else
        g_pbBufAlias = pbBuf;
    return pbBuf;
}


/**
 * Undoes what bs3CpuInstrXBufSetup did.
 *
 * @param   pbBuf       The buffer pointer.
 * @param   cbBuf       The buffer size.
 * @param   bMode       The testing target mode.
 */
DECLINLINE(void) bs3CpuInstrXBufCleanup(uint8_t BS3_FAR *pbBuf, uint32_t cbBuf, uint8_t bMode)
{
    if (BS3_MODE_IS_PAGED(bMode))
    {
        Bs3PagingProtectPtr(&pbBuf[-X86_PAGE_SIZE], X86_PAGE_SIZE, X86_PTE_P, 0);
        Bs3PagingProtectPtr(&pbBuf[cbBuf], X86_PAGE_SIZE, X86_PTE_P, 0);
    }
}


/**
 * Gets a buffer of a @a cbMemOp sized operand according to the given
 * configuration and alignment restrictions.
 *
 * @returns Pointer to the buffer.
 * @param   pbBuf       The buffer pointer.
 * @param   cbBuf       The buffer size.
 * @param   cbMemOp     The operand size.
 * @param   cbAlign     The operand alignment restriction.
 * @param   pConfig     The configuration.
 * @param   fPageFault  The \#PF test setting.
 */
DECLINLINE(uint8_t BS3_FAR *) bs3CpuInstrXBufForOperand(uint8_t BS3_FAR *pbBuf, uint32_t cbBuf, uint8_t cbMemOp, uint8_t cbAlign,
                                                        PCBS3CPUINSTR4_CONFIG_T pConfig, unsigned fPageFault)
{
    /* All allocations are at the tail end of the buffer, so that we've got a
       guard page following the operand. When asked to consistently trigger
       a #PF, we slide the buffer into that guard page. */
    if (fPageFault)
        cbBuf += X86_PAGE_SIZE;

    if (pConfig->fAligned)
    {
        if (!pConfig->fAlignCheck)
            return &pbBuf[cbBuf - cbMemOp];
        return &pbBuf[cbBuf - cbMemOp - cbAlign];
    }
    return &pbBuf[cbBuf - cbMemOp - 1];
}


/**
 * Determines the size of memory operands.
 */
DECLINLINE(uint8_t) bs3CpuInstrXMemOpSize(uint8_t cbOperand, uint8_t enmRm)
{
    if (enmRm <= RM_MEM)
        return cbOperand;
    if (enmRm == RM_MEM8)
        return sizeof(uint8_t);
    if (enmRm == RM_MEM16)
        return sizeof(uint16_t);
    if (enmRm == RM_MEM32)
        return sizeof(uint32_t);
    if (enmRm == RM_MEM64)
        return sizeof(uint64_t);
    if (enmRm == RM_MEM128)
        return sizeof(RTUINT128U);
    if (enmRm == RM_MEM256)
        return sizeof(RTUINT256U);
    BS3_ASSERT(0);
    return cbOperand;
}


#include <iprt/asm-amd64-x86.h>
#include <iprt/asm-math.h>

DECLINLINE(uint32_t) bs3CpuInstrX_SimpleRand(void)
{
    /*
     * A simple Lehmer linear congruential pseudo-random number
     * generator using the constants suggested by Park & Miller:
     *
     *      modulus    = 2^31 - 1 (INT32_MAX)
     *      multiplier = 7^5 (16807)
     *
     * It produces numbers in the range [1..INT32_MAX-1] and is
     * more chaotic in the higher bits.
     *
     * Note! Runtime/common/rand/randparkmiller.cpp is also use this algorithm,
     *       though the zero handling is different.
     */
    static uint32_t s_uSeedMemory = 0;
    uint32_t uVal = s_uSeedMemory;
    if (!uVal)
    {
        uVal = (uint32_t)ASMReadTSC();
        Bs3TestPrintf("PRNG initial seed: 0x%08lx\n", uVal);
    }
    uVal = ASMModU64ByU32RetU32(ASMMult2xU32RetU64(uVal, 16807), INT32_MAX);
    s_uSeedMemory = uVal;
    return uVal;
}


/*
 * Code to make testing the tests faster. `bs3CpuInstrX_SkipIt()' randomly
 * skips a fraction of the micro-tests.  It is sufficiently random that
 * over a large number of runs, all micro-tests will be hit.
 *
 * Full test runs take ever longer as we add more instructions and fancier
 * ways of testing them.  In one example scenario, a debug build running
 * bs3-cpu-instr-3 under interpreted IEM went from 9000 to 800 seconds,
 * with BS3_SKIPIT_AVG_SKIP set to 26.
 *
 * To activate this 'developer's speed-testing mode', define
 * `BS3_SKIPIT_AVG_SKIP' to a positive integer like 10 or 200.
 *
 * BS3_SKIPIT_AVG_SKIP governs approximately how many micro-tests are
 * skipped in a row; e.g. if set to 100, an average of 100 micro-tests
 * in a row are skipped.  (This is not a full 100x faster, due to other
 * activities which are not skipped!)  Note this is only an average;
 * the actual skips are random.
 *
 * You can also modify bs3CpuInstrX_SkipIt() to focus on specific sub-tests,
 * using its (currently ignored) `bRing, iCfg, iTest, iVal, iVariant' args
 * (to enable this: turn on `#define BS3_SKIPIT_DO_ARGS': which costs about
 * 3% performance).
 *
 * Note!  For testing the native recompiler, configure the VM to invoke
 * native recompilation quickly with:
 *
 *     VBoxManage setextradata vmname VBoxInternal/Devices/VMMDev/0/Config/TestingEnabled 1
 *     VBoxManage setextradata vmname VBoxInternal/Devices/VMMDev/0/Config/TestingThresholdNativeRecompiler 2
 *     VBoxManage setextradata vmname VBoxInternal/IEM/NativeRecompileAtUsedCount 1
 */
#define BS3_SKIPIT_AVG_SKIP           0
#define BS3_SKIPIT_REPORT_COUNT 1000000
#undef  BS3_SKIPIT_DO_ARGS

#ifdef DEBUG_ramshankar
# undef  BS3_SKIPIT_AVG_SKIP
# define BS3_SKIPIT_AVG_SKIP         66
#endif

static unsigned g_cSeen, g_cSkipped;

static void bs3CpuInstrX_ShowTallies(bool always)
{
    if (!g_cSkipped && !always) return;
    Bs3TestPrintf("Micro-tests %d: tested %d / skipped %d\n", g_cSeen, g_cSeen - g_cSkipped, g_cSkipped);
}

# ifdef BS3_SKIPIT_DO_ARGS
#  define BS3_SKIPIT(bRing, iCfg, iTest, iVal, iVariant) bs3CpuInstrX_SkipIt(bRing, iCfg, iTest, iVal, iVariant)
static bool bs3CpuInstrX_SkipIt(uint8_t bRing, unsigned iCfg, unsigned iTest, unsigned iVal, unsigned iVariant)
# else
#  define BS3_SKIPIT(bRing, iCfg, iTest, iVal, iVariant) bs3CpuInstrX_SkipIt()
static bool bs3CpuInstrX_SkipIt(void)
# endif
{
    static unsigned s_uTimes = 0;
    bool fSkip;

    /* Cache calls to the relatively expensive random routine */
    if (!s_uTimes)
        s_uTimes = bs3CpuInstrX_SimpleRand() % (BS3_SKIPIT_AVG_SKIP * 2 + 1) + 1;
    fSkip = --s_uTimes > 0;
    if (fSkip)
        ++g_cSkipped;

    if (++g_cSeen % BS3_SKIPIT_REPORT_COUNT == 0)
        bs3CpuInstrX_ShowTallies(false);
    return fSkip;
}


/** Utility macro for generally passing an array along with its length. */
#define PASS_ARRAY(s_aArray)    RT_ELEMENTS(s_aArray), s_aArray

/** Utility macro for inserting value table references into test arrays. */
#define PASS_TEST_ARRAY(s_aArray)   RT_ELEMENTS(s_aArray), (BS3CPUINSTR4_TEST1_VALUES_T *)s_aArray

/** Table-building macros for inserting instruction-test functions into test arrays. */
#define BS3_INSTR4_ONE(instr_stuff, bits) bs3CpuInstr4_ ## instr_stuff ## _icebp_c ## bits
#define BS3_INSTR4_ALL(instr_stuff)       BS3_INSTR4_ONE(instr_stuff, 16), BS3_INSTR4_ONE(instr_stuff, 32), BS3_INSTR4_ONE(instr_stuff, 64)
#define BS3_INSTR4_386(instr_stuff)       BS3_INSTR4_ONE(instr_stuff, 16), BS3_INSTR4_ONE(instr_stuff, 32), NULL
#define BS3_INSTR4_C64(instr_stuff)       NULL,                            NULL,                            BS3_INSTR4_ONE(instr_stuff, 64)


/*
 * Test type #1.
 * Generic YMM registers.
 */
typedef struct BS3CPUINSTR4_TEST1_VALUES_T
{
    X86YMMREG           uSrc2;                  /**< Second source operand. */
    X86YMMREG           uSrc1;                  /**< uDstIn for SSE */
    X86YMMREG           uDstOut;                /**< Destination output. */
    uint32_t            uMxCsr;                 /**< MXCSR to set prior to executing the instruction. */
    uint32_t            u128ExpectedMxCsr;      /**< Expected MXCSR for a 128-bit instruction. */
    uint32_t            u256ExpectedMxCsr;      /**< Expected MXCSR for a 256-bit instructions. */
    uint8_t             afPadding[2];           /**< Alignment padding. */
} BS3CPUINSTR4_TEST1_VALUES_T;
typedef BS3CPUINSTR4_TEST1_VALUES_T BS3_FAR *PBS3CPUINSTR4_TEST1_VALUES_T;

/*
 * Test type #1.
 * Packed single-precision.
 */
typedef struct BS3CPUINSTR4_TEST1_VALUES_PS_T
{
    X86YMMFLOATPSREG    uSrc2;                  /**< Second source operand. */
    X86YMMFLOATPSREG    uSrc1;                  /**< uDstIn for SSE */
    X86YMMFLOATPSREG    uDstOut;                /**< Destination output. */
    uint32_t            uMxCsr;                 /**< MXCSR to set prior to executing the instruction. */
    uint32_t            u128ExpectedMxCsr;      /**< Expected MXCSR for a 128-bit instruction. */
    uint32_t            u256ExpectedMxCsr;      /**< Expected MXCSR for a 256-bit instructions. */
    uint8_t             afPadding[2];           /**< Alignment padding. */
} BS3CPUINSTR4_TEST1_VALUES_PS_T;
AssertCompile(sizeof(BS3CPUINSTR4_TEST1_VALUES_PS_T) == sizeof(BS3CPUINSTR4_TEST1_VALUES_T));
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PS_T, uSrc2,              BS3CPUINSTR4_TEST1_VALUES_T, uSrc2);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PS_T, uSrc1,              BS3CPUINSTR4_TEST1_VALUES_T, uSrc1);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PS_T, uDstOut,            BS3CPUINSTR4_TEST1_VALUES_T, uDstOut);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PS_T, uMxCsr,             BS3CPUINSTR4_TEST1_VALUES_T, uMxCsr);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PS_T, u128ExpectedMxCsr,  BS3CPUINSTR4_TEST1_VALUES_T, u128ExpectedMxCsr);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PS_T, u256ExpectedMxCsr,  BS3CPUINSTR4_TEST1_VALUES_T, u256ExpectedMxCsr);

/*
 * Test type #1.
 * Packed double-precision.
 */
typedef struct BS3CPUINSTR4_TEST1_VALUES_PD_T
{
    X86YMMFLOATPDREG    uSrc2;                  /**< Second source operand. */
    X86YMMFLOATPDREG    uSrc1;                  /**< uDstIn for SSE */
    X86YMMFLOATPDREG    uDstOut;                /**< Destination output. */
    uint32_t            uMxCsr;                 /**< MXCSR to set prior to executing the instruction. */
    uint32_t            u128ExpectedMxCsr;      /**< Expected MXCSR for a 128-bit instruction. */
    uint32_t            u256ExpectedMxCsr;      /**< Expected MXCSR for a 256-bit instructions. */
    uint8_t             afPadding[2];           /**< Alignment padding. */
} BS3CPUINSTR4_TEST1_VALUES_PD_T;
AssertCompile(sizeof(BS3CPUINSTR4_TEST1_VALUES_PD_T) == sizeof(BS3CPUINSTR4_TEST1_VALUES_T));
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PD_T, uSrc2,              BS3CPUINSTR4_TEST1_VALUES_T, uSrc2);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PD_T, uSrc1,              BS3CPUINSTR4_TEST1_VALUES_T, uSrc1);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PD_T, uDstOut,            BS3CPUINSTR4_TEST1_VALUES_T, uDstOut);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PD_T, uMxCsr,             BS3CPUINSTR4_TEST1_VALUES_T, uMxCsr);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PD_T, u128ExpectedMxCsr,  BS3CPUINSTR4_TEST1_VALUES_T, u128ExpectedMxCsr);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PD_T, u256ExpectedMxCsr,  BS3CPUINSTR4_TEST1_VALUES_T, u256ExpectedMxCsr);

/*
 * Test type #1.
 * Scalar single-precision.
 */
typedef struct BS3CPUINSTR4_TEST1_VALUES_SS_T
{
    X86YMMFLOATSSREG    uSrc2;                  /**< Second source operand. */
    X86YMMFLOATSSREG    uSrc1;                  /**< uDstIn for SSE */
    X86YMMFLOATSSREG    uDstOut;                /**< Destination output. */
    uint32_t            uMxCsr;                 /**< MXCSR to set prior to executing the instruction. */
    uint32_t            u128ExpectedMxCsr;      /**< Expected MXCSR for a 128-bit instruction. */
    uint32_t            u256ExpectedMxCsr;      /**< Expected MXCSR for a 256-bit instructions. */
    uint8_t             afPadding[2];           /**< Alignment padding. */
} BS3CPUINSTR4_TEST1_VALUES_SS_T;
AssertCompile(sizeof(BS3CPUINSTR4_TEST1_VALUES_SS_T) == sizeof(BS3CPUINSTR4_TEST1_VALUES_T));
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_SS_T, uSrc2,              BS3CPUINSTR4_TEST1_VALUES_T, uSrc2);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_SS_T, uSrc1,              BS3CPUINSTR4_TEST1_VALUES_T, uSrc1);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_SS_T, uDstOut,            BS3CPUINSTR4_TEST1_VALUES_T, uDstOut);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_SS_T, uMxCsr,             BS3CPUINSTR4_TEST1_VALUES_T, uMxCsr);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_SS_T, u128ExpectedMxCsr,  BS3CPUINSTR4_TEST1_VALUES_T, u128ExpectedMxCsr);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_SS_T, u256ExpectedMxCsr,  BS3CPUINSTR4_TEST1_VALUES_T, u256ExpectedMxCsr);

/*
 * Test type #1.
 * Scalar double-precision.
 */
typedef struct BS3CPUINSTR4_TEST1_VALUES_SD_T
{
    X86YMMFLOATSDREG    uSrc2;                  /**< Second source operand. */
    X86YMMFLOATSDREG    uSrc1;                  /**< uDstIn for SSE */
    X86YMMFLOATSDREG    uDstOut;                /**< Destination output. */
    uint32_t            uMxCsr;                 /**< MXCSR to set prior to executing the instruction. */
    uint32_t            u128ExpectedMxCsr;      /**< Expected MXCSR for a 128-bit instruction. */
    uint32_t            u256ExpectedMxCsr;      /**< Expected MXCSR for a 256-bit instructions. */
    uint8_t             afPadding[2];           /**< Alignment padding. */
} BS3CPUINSTR4_TEST1_VALUES_SD_T;
AssertCompile(sizeof(BS3CPUINSTR4_TEST1_VALUES_SD_T) == sizeof(BS3CPUINSTR4_TEST1_VALUES_T));
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_SD_T, uSrc2,              BS3CPUINSTR4_TEST1_VALUES_T, uSrc2);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_SD_T, uSrc1,              BS3CPUINSTR4_TEST1_VALUES_T, uSrc1);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_SD_T, uDstOut,            BS3CPUINSTR4_TEST1_VALUES_T, uDstOut);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_SD_T, uMxCsr,             BS3CPUINSTR4_TEST1_VALUES_T, uMxCsr);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_SD_T, u128ExpectedMxCsr,  BS3CPUINSTR4_TEST1_VALUES_T, u128ExpectedMxCsr);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_SD_T, u256ExpectedMxCsr,  BS3CPUINSTR4_TEST1_VALUES_T, u256ExpectedMxCsr);

/*
 * Test type #1.
 * Packed single-precision destination & merge-in, packed double-precision source.
 */
typedef struct BS3CPUINSTR4_TEST1_VALUES_PD2PS_T
{
    X86YMMFLOATPDREG    uSrc2;                  /**< Source operand. */
    X86YMMFLOATPSREG    uSrc1;                  /**< Merge operand. */
    X86YMMFLOATPSREG    uDstOut;                /**< Destination output. */
    uint32_t            uMxCsr;                 /**< MXCSR to set prior to executing the instruction. */
    uint32_t            u128ExpectedMxCsr;      /**< Expected MXCSR for a 128-bit instruction. */
    uint32_t            u256ExpectedMxCsr;      /**< Expected MXCSR for a 256-bit instructions. */
    uint8_t             afPadding[2];           /**< Alignment padding. */
} BS3CPUINSTR4_TEST1_VALUES_PD2PS_T;
AssertCompile(sizeof(BS3CPUINSTR4_TEST1_VALUES_PD2PS_T) == sizeof(BS3CPUINSTR4_TEST1_VALUES_T));
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PD2PS_T, uSrc2,              BS3CPUINSTR4_TEST1_VALUES_T, uSrc2);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PD2PS_T, uSrc1,              BS3CPUINSTR4_TEST1_VALUES_T, uSrc1);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PD2PS_T, uDstOut,            BS3CPUINSTR4_TEST1_VALUES_T, uDstOut);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PD2PS_T, uMxCsr,             BS3CPUINSTR4_TEST1_VALUES_T, uMxCsr);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PD2PS_T, u128ExpectedMxCsr,  BS3CPUINSTR4_TEST1_VALUES_T, u128ExpectedMxCsr);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PD2PS_T, u256ExpectedMxCsr,  BS3CPUINSTR4_TEST1_VALUES_T, u256ExpectedMxCsr);

/*
 * Test type #1.
 * Packed double-precision destination & merge-in, packed single-precision source.
 */
typedef struct BS3CPUINSTR4_TEST1_VALUES_PS2PD_T
{
    X86YMMFLOATPSREG    uSrc2;                  /**< Source operand. */
    X86YMMFLOATPDREG    uSrc1;                  /**< Merge operand. */
    X86YMMFLOATPDREG    uDstOut;                /**< Destination output. */
    uint32_t            uMxCsr;                 /**< MXCSR to set prior to executing the instruction. */
    uint32_t            u128ExpectedMxCsr;      /**< Expected MXCSR for a 128-bit instruction. */
    uint32_t            u256ExpectedMxCsr;      /**< Expected MXCSR for a 256-bit instructions. */
    uint8_t             afPadding[2];           /**< Alignment padding. */
} BS3CPUINSTR4_TEST1_VALUES_PS2PD_T;
AssertCompile(sizeof(BS3CPUINSTR4_TEST1_VALUES_PS2PD_T) == sizeof(BS3CPUINSTR4_TEST1_VALUES_T));
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PS2PD_T, uSrc2,              BS3CPUINSTR4_TEST1_VALUES_T, uSrc2);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PS2PD_T, uSrc1,              BS3CPUINSTR4_TEST1_VALUES_T, uSrc1);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PS2PD_T, uDstOut,            BS3CPUINSTR4_TEST1_VALUES_T, uDstOut);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PS2PD_T, uMxCsr,             BS3CPUINSTR4_TEST1_VALUES_T, uMxCsr);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PS2PD_T, u128ExpectedMxCsr,  BS3CPUINSTR4_TEST1_VALUES_T, u128ExpectedMxCsr);
AssertCompileMembersSameSizeAndOffset(BS3CPUINSTR4_TEST1_VALUES_PS2PD_T, u256ExpectedMxCsr,  BS3CPUINSTR4_TEST1_VALUES_T, u256ExpectedMxCsr);

typedef struct BS3CPUINSTR4_TEST1_T
{
    FPFNBS3FAR          pfnWorker_16;        /**< Test function worker for 16-bit execution modes. */
    FPFNBS3FAR          pfnWorker_32;        /**< Test function worker for 32-bit execution modes. */
    FPFNBS3FAR          pfnWorker_64;        /**< Test function worker for 64-bit execution modes. */
    uint8_t             bAltXcpt;            /**< AVX misalignment exception, or always-expected exception. */
    uint8_t             enmRm;               /**< R/M type. */
    uint8_t             enmType;             /**< CPU instruction type (see T_XXX). */
    uint8_t             iRegDst;             /**< Identity of destination register. */
    uint8_t             iRegSrc1;            /**< Identity of first source register. */
    uint8_t             iRegSrc2;            /**< Identity of second source register. */
    uint8_t             cValues;             /**< Number of test values in @c paValues. */
    PBS3CPUINSTR4_TEST1_VALUES_T const paValues; /**< Test values. */
} BS3CPUINSTR4_TEST1_T;

#define BS3_XCPT_ALWAYS 0x80
#define BS3_XCPT_UD     (X86_XCPT_UD | BS3_XCPT_ALWAYS)
#define BS3_XCPT_NEVER  0x40
#define BS3_XCPT_NOT_MF (X86_XCPT_MF | BS3_XCPT_NEVER)
#define BS3_XCPT_NOT_AC (X86_XCPT_AC | BS3_XCPT_NEVER)

typedef struct BS3CPUINSTR4_TEST1_MODE_T
{
    BS3CPUINSTR4_TEST1_T const BS3_FAR *paTests;
    unsigned                            cTests;
} BS3CPUINSTR4_TEST1_MODE_T;

typedef struct BS3CPUINSTR4_TEST1_CTX_T
{
    BS3CPUINSTR4_CONFIG_T const BS3_FAR *pConfig;      /**< The test execution environment configuration. */
    BS3CPUINSTR4_TEST1_T const BS3_FAR  *pTest;        /**< The instruction being tested. */
    unsigned                             iVal;         /**< Which iteration of the test value is this. */
    PBS3CPUINSTR4_TEST1_VALUES_T         pValues;      /**< The test values for this iteration. */
    const char BS3_FAR                  *pszMode;      /**< The testing mode (e.g. real, protected, paged and permutations). */
    PBS3TRAPFRAME                        pTrapFrame;   /**< The exception (trap) frame. */
    PBS3REGCTX                           pCtx;         /**< The general-purpose register context. */
    PBS3EXTCTX                           pExtCtx;      /**< The extended (FPU) register context. */
    PBS3EXTCTX                           pExtCtxOut;   /**< The output extended (FPU) register context. */
    uint8_t BS3_FAR                     *puMemOp;      /**< The memory operand buffer. */
    uint8_t BS3_FAR                     *puMemOpAlias; /**< The memory operand alias buffer for comparing result. */
    uint8_t                              cbMemOp;      /**< Size of the memory operand (and alias) buffer in bytes. */
    uint8_t                              cbOperand;    /**< Size of the instruction operand (8 for MMX, 16 for SSE etc). */
    uint8_t                              cbInstr;      /**< Size of the instruction opcode. */
    uint8_t                              bXcptExpect;  /**< The expected exception while/after executing the instruction. */
    uint16_t                             idTestStep;   /**< The test iteration step. */
    const char BS3_FAR                  *pszTestIdStr; /**< The test ID string for error printouts. */
} BS3CPUINSTR4_TEST1_CTX_T;
/** Pointer to a test 1 context. */
typedef BS3CPUINSTR4_TEST1_CTX_T BS3_FAR *PBS3CPUINSTR4_TEST1_CTX_T;


/**
 * Constants used in test value definitions.  These are extra bits which
 * can be set in the ':out' fields of a test value; stored in 'stolen'
 * bits from the real x86 MXCSR CPU register definition.
 *
 * 'BS3_MXCSR_?M_FIXED' bits prevent the mask randomizer from changing
 * the corresponding bit of the mask.  These can be used to 'split' an
 * entry which produces different results under different masks,
 * allowing both sets of results to be properly tested.
 *
 * 'BS3_MXCSR_PE_FUZZY' marks test value entries which are considered
 * to have passed the test regardless of the value of X86_MXCSR_PE in
 * the result.  Many, most, or possibly all instances of this represent
 * bugs in the test value definitions and/or the CPU emulator IEM; all
 * need further investigation.
 */
#define BS3_MXCSR_FIXED_SHIFT 11
#define BS3_MXCSR_FIXED_MASK  (X86_MXCSR_XCPT_MASK << BS3_MXCSR_FIXED_SHIFT)
#define BS3_MXCSR_IM_FIXED    (X86_MXCSR_IM << BS3_MXCSR_FIXED_SHIFT)
#define BS3_MXCSR_DM_FIXED    (X86_MXCSR_DM << BS3_MXCSR_FIXED_SHIFT)
#define BS3_MXCSR_ZM_FIXED    (X86_MXCSR_ZM << BS3_MXCSR_FIXED_SHIFT)
#define BS3_MXCSR_OM_FIXED    (X86_MXCSR_OM << BS3_MXCSR_FIXED_SHIFT)
#define BS3_MXCSR_UM_FIXED    (X86_MXCSR_UM << BS3_MXCSR_FIXED_SHIFT)
#define BS3_MXCSR_PM_FIXED    (X86_MXCSR_PM << BS3_MXCSR_FIXED_SHIFT)
#define BS3_MXCSR_PE_FUZZY    RT_BIT_32(24)

/* Confirm all bits we're 'stealing' are actually available */
AssertCompile(BS3_MXCSR_FIXED_MASK == BS3_MXCSR_IM_FIXED | BS3_MXCSR_DM_FIXED | BS3_MXCSR_ZM_FIXED | BS3_MXCSR_OM_FIXED | BS3_MXCSR_UM_FIXED | BS3_MXCSR_PM_FIXED);
AssertCompile((X86_MXCSR_ZERO_MASK & BS3_MXCSR_FIXED_MASK) == BS3_MXCSR_FIXED_MASK);
AssertCompile((X86_MXCSR_ZERO_MASK & BS3_MXCSR_PE_FUZZY) == BS3_MXCSR_PE_FUZZY);
/* Confirm bits we're 'stealing' do not overlap each other */
AssertCompile((BS3_MXCSR_FIXED_MASK & BS3_MXCSR_PE_FUZZY) == 0);

/**
 * Worker for bs3CpuInstr4_WorkerTestType1.
 */
static void bs3CpuInstr4_WorkerTestType1_Inner(uint8_t bMode, PBS3CPUINSTR4_TEST1_CTX_T pTestCtx,
                                                   PCBS3CPUINSTRX_CONFIG_SAVED_T pSavedCfg)
{
    BS3CPUINSTR4_TEST1_T const BS3_FAR        *pTest   = pTestCtx->pTest;
    PBS3CPUINSTR4_TEST1_VALUES_T const pValues = pTestCtx->pValues;
    PBS3TRAPFRAME    pTrapFrame          = pTestCtx->pTrapFrame;
    PBS3REGCTX       pCtx                = pTestCtx->pCtx;
    PBS3EXTCTX       pExtCtx             = pTestCtx->pExtCtx;
    PBS3EXTCTX       pExtCtxOut          = pTestCtx->pExtCtxOut;
    uint8_t BS3_FAR *puMemOp             = pTestCtx->puMemOp;
    uint8_t BS3_FAR *puMemOpAlias        = pTestCtx->puMemOpAlias;
    uint8_t          cbMemOp             = pTestCtx->cbMemOp;
    uint8_t          bXcptExpect         = pTestCtx->bXcptExpect;
    bool const       fNonFpOK            = bXcptExpect == X86_XCPT_DB;
    uint8_t const    bFpXcpt             = pTestCtx->pConfig->fCr4OsXmmExcpt ? X86_XCPT_XF : X86_XCPT_UD;
    bool const       fSseInstr           = bs3CpuInstr4IsSse(pTest->enmType);
    bool const       fMemOp              = pTest->enmRm >= RM_MEM;
    bool const       fMemOpDI            = pTest->iRegDst == FSxDI || pTest->iRegSrc1 == FSxDI || pTest->iRegSrc2 == FSxDI;
    uint32_t         uMxCsr;
    X86YMMREG        MemOpExpect;
    uint16_t         cErrors;
    uint32_t         uExpectedMxCsr;
    bool             fFpXcptExpected;
    uint8_t          cbBytesExecuted;
    BS3SETREGCTX     SetRegCtx;

    uint32_t uSpecifiedMask, uExpectedMask, uImpliedMask, uCombinedMask, uMaskedMask, uUnmaskedMask, uThisMask;
    uint32_t uExpectedMxCsr_orig, uExpectedExceptions, uExpectedUnmaskedExceptions, uInitialExceptions, uRandTmp;
    uint64_t uSeenMasks = 0;
    bool fFuzzyPE;
    uint32_t uForceOnMask, uForceOffMask;
    static const char * const s_apszMaskType[] = { "Specified", "Expected", "Implied", "Combined", "Masked", "Unmasked", "Random" };
    static const char * const s_apszMaskTyp[] =  { "spec",      "expc",     "impl",    "comb",     "mask",   "umsk",     "rand"   };
    unsigned iMaskType;

    if (fMemOp)
        BS3_ASSERT(pTest->iRegDst >= FSxDI || pTest->iRegSrc1 >= FSxDI || pTest->iRegSrc2 >= FSxDI);
    else
        BS3_ASSERT(pTest->iRegDst  < FSxDI && pTest->iRegSrc1  < FSxDI && pTest->iRegSrc2  < FSxDI);
    if (fMemOpDI)
        BS3_ASSERT(pTest->iRegDst != FSxBX && pTest->iRegSrc1 != FSxBX && pTest->iRegSrc2 != FSxBX);

    /*
     * Different exceptions may be raised by the same instruction given a
     * particular set of 256-bit inputs vs. the lower 128-bits of the same
     * inputs.  The test value tables therefore provide us with the exceptions
     * expected for each size.  The tables give the maximum exceptions, as
     * would be raised when all exceptions are masked; the test worker then
     * varies the masking configuration and is able to derive the exceptions
     * which will be raised in each scenario.
     *
     * Certain instruction tests give different results with different masks,
     * beyond the scope of the test worker's knowledge.  The test worker may
     * be instructed not to vary a specified set of masks for a particular
     * test; such tests should be duplicated in the test data, once for each
     * different set of fixed masks expected to give different results.  See
     * the 'Denormals' section of instruction `addpd` for an example working.
     * This area is marked for further investigation.
     *
     * There is an additional 'fuzzy PE exception' flag which means that the
     * test worker will ignore the PE exception bit in the instruction results
     * (including whether or not a fault was raised).  This exists due to
     * observed variable behavior in IEM, and even with physical hardware
     * in some instances.  It is not meant to excuse the variable behavior
     * (particularly in IEM!), but to make it tolerable to run tests while the
     * known outage exists.  This is marked for further investigation.
     */
     /** @todo deeper / continued investigation of 'forced mask' situations */
     /** @todo deeper investigation of 'fuzzy PE' situation */

    if (pTestCtx->cbOperand > 16)
        uExpectedMxCsr  = pValues->u256ExpectedMxCsr;
    else
        uExpectedMxCsr  = pValues->u128ExpectedMxCsr;
    fFuzzyPE = (uExpectedMxCsr & BS3_MXCSR_PE_FUZZY) != 0;
    uExpectedMxCsr &= ~BS3_MXCSR_PE_FUZZY;
    uSpecifiedMask = pValues->uMxCsr & X86_MXCSR_XCPT_MASK;
    uForceOnMask = ((uExpectedMxCsr & BS3_MXCSR_FIXED_MASK) >> BS3_MXCSR_FIXED_SHIFT) & uSpecifiedMask;
    uForceOffMask = ((uExpectedMxCsr & BS3_MXCSR_FIXED_MASK) >> BS3_MXCSR_FIXED_SHIFT) & (~uSpecifiedMask);
    uExpectedMxCsr = ((uExpectedMxCsr & ~BS3_MXCSR_FIXED_MASK) | uForceOnMask) & ~uForceOffMask;

    uExpectedMxCsr_orig = uExpectedMxCsr;
    uInitialExceptions = pValues->uMxCsr & X86_MXCSR_XCPT_FLAGS;
    uExpectedMask = uExpectedMxCsr_orig & X86_MXCSR_XCPT_MASK;

    /*
     * The worker no longer insists that uSpecifiedMask == uExpectedMask.  While
     * this is the usual state of affairs, a particular value entry could give
     * different input and output masks to intentionally force extra testing of
     * specific mask values.  This shouldn't actually provide any benefit since
     * random masks will eventually (quickly -- in microseconds) hit all possible
     * combinations; but perhaps there is some reason to do it in some cases?
     * But in most cases, uSpecifiedMask, uExpectedMask, uImpliedMask, and
     * uCombinedMask will be identical; duplicates will be filtered out by the
     * uSeenMasks test.
     */
    uImpliedMask = (uExpectedMxCsr_orig & X86_MXCSR_XCPT_FLAGS) << X86_MXCSR_XCPT_MASK_SHIFT;
    uCombinedMask = uSpecifiedMask | uImpliedMask;
    uMaskedMask = X86_MXCSR_XCPT_MASK;
    uUnmaskedMask = 0;

    /*
     * The test value tables give us the exceptions expected when run fully
     * masked.  Here we try the instruction under multiple mask schemes:
     * as requested by the value table; as implied by the stated resulting
     * exceptions; fully masked; fully unmasked; with a random mask; with
     * random exceptions already turned on; both random mask & exceptions.
     */
    for (iMaskType = 0; iMaskType < RT_ELEMENTS(s_apszMaskType); iMaskType++)
    {
        if (BS3_SKIPIT(0, 0, 0, pTestCtx->iVal, iMaskType))
            continue;

        switch (iMaskType)
        {
            case 0:
                uThisMask = uSpecifiedMask;
                break;
            case 1:
                uThisMask = uExpectedMask;
                break;
            case 2:
                uThisMask = uImpliedMask;
                break;
            case 3:
                uThisMask = uCombinedMask;
                break;
            case 4:
                uThisMask = uMaskedMask;
                break;
            case 5:
                uThisMask = uUnmaskedMask;
                break;
            case 6:
                /* This case must be last, as it trashes uSeenMasks & uInitialExceptions */
                /* Also confirm 1:1 cases implemented :: mask type descriptions */
                BS3_ASSERT(iMaskType == RT_ELEMENTS(s_apszMaskType) - 1);

                uRandTmp = bs3CpuInstrX_SimpleRand();
                uThisMask = uRandTmp & X86_MXCSR_XCPT_MASK;
                switch (uRandTmp & X86_MXCSR_RC_MASK)
                {
                    case X86_MXCSR_RC_ZERO:
                    case X86_MXCSR_RC_NEAREST:  /* Random mask */
                        break;
                    case X86_MXCSR_RC_UP:       /* Random initial exceptions */
                        uThisMask = uSpecifiedMask;
                        RT_FALL_THRU();
                    case X86_MXCSR_RC_DOWN:     /* Random mask & initial exceptions */
                        uSeenMasks = 0;         /* Don't skip for same-mask */
                        uInitialExceptions = uRandTmp & X86_MXCSR_XCPT_FLAGS;
                        break;
                    default:
                        BS3_ASSERT(0);
                }
                break;
            default:
                BS3_ASSERT(0);
        }
        /* No matter what was chosen, honor FIXED mask bits */
        uThisMask = (uThisMask | uForceOnMask) & ~uForceOffMask;

        /* Skip millions of redundant tests imposed by the mask twiddling scheme */
        if (uSeenMasks & (RT_BIT_64(uThisMask >> X86_MXCSR_XCPT_MASK_SHIFT))) continue;
        uSeenMasks |= RT_BIT_64(uThisMask >> X86_MXCSR_XCPT_MASK_SHIFT);

        /* This is the input MXCSR value we'll be sending */
        uMxCsr = (pValues->uMxCsr & ~(X86_MXCSR_XCPT_MASK | X86_MXCSR_XCPT_FLAGS)) | uThisMask | uInitialExceptions;

        /* What exceptions does this test value claim to raise?  Only actual raises, not initially-on exceptions */
        uExpectedExceptions = uExpectedMxCsr_orig & X86_MXCSR_XCPT_FLAGS;
        uExpectedUnmaskedExceptions = uExpectedExceptions & ~(uThisMask >> X86_MXCSR_XCPT_MASK_SHIFT);

        /* This is the output MXCSR value we will expect */
        uExpectedMxCsr = (uExpectedMxCsr_orig & ~(X86_MXCSR_XCPT_MASK)) | uThisMask;

        /* If we hit an unmasked early exception, late exceptions won't be raised. */
        if (uExpectedUnmaskedExceptions & (X86_MXCSR_DE | X86_MXCSR_IE | X86_MXCSR_ZE))
            uExpectedMxCsr &= ~(X86_MXCSR_OE | X86_MXCSR_PE | X86_MXCSR_UE);

        /* However, all exceptions which are on before the instruction will still be on. */
        uExpectedMxCsr |= uInitialExceptions;

        /* A fault is raised only by unmasked exceptions which were caused by the instruction itself. */
        fFpXcptExpected = (uExpectedUnmaskedExceptions != 0);

        /*
         * Set up the context and some expectations.
         */
        /* Destination. */
        Bs3MemZero(&MemOpExpect, sizeof(MemOpExpect));
        if (pTest->iRegDst >= FSxDI)
        {
            Bs3MemSet(puMemOpAlias, 0xcc, cbMemOp);
            if (fNonFpOK)
                MemOpExpect.ymm = pValues->uDstOut.ymm;
            else
                Bs3MemSet(&MemOpExpect, 0xcc, sizeof(MemOpExpect));
        }

        bs3CpuInstrXGetRegisterInit(&SetRegCtx, pExtCtx, pCtx, bMode);
        SetRegCtx.fZeroYMMHi = fSseInstr;
        SetRegCtx.enmTop = BS3EXTCTXTOPMM_ZERO;

        /* Source #1 (/ destination for SSE). */
        if (pTest->iRegSrc1 >= FSxDI)
        {
            Bs3MemCpy(puMemOpAlias, &pValues->uSrc1, cbMemOp);
            if (pTest->iRegDst >= FSxDI)
                BS3_ASSERT(fSseInstr);
            else
                MemOpExpect.ymm = pValues->uSrc1.ymm;
        }
        else Bs3ExtCtxSetReg(&SetRegCtx, pTest->iRegSrc1, (void*)&pValues->uSrc1);

        /* Source #2. */
        if (pTest->iRegSrc2 >= FSxDI)
        {
            BS3_ASSERT(pTest->iRegDst < FSxDI && pTest->iRegSrc1 < FSxDI);
            Bs3MemCpy(puMemOpAlias, &pValues->uSrc2, cbMemOp);
            MemOpExpect.ymm = pValues->uSrc2.ymm;
        }
        else Bs3ExtCtxSetReg(&SetRegCtx, pTest->iRegSrc2, (void*)&pValues->uSrc2);

        /* Memory pointer. */
        if (fMemOp)
        {
            Bs3RegCtxSetGrpSegFromCurPtr(pCtx, fMemOpDI ? &pCtx->rdi : &pCtx->rbx, &pCtx->fs, puMemOp);
        }

        /* Setup MXCSR for the current test. */
        uMxCsr |= (pSavedCfg->uMxCsr & X86_MXCSR_MM);
        BS3_ASSERT(!(uMxCsr & X86_MXCSR_MM));
        BS3_ASSERT(!(uMxCsr & X86_MXCSR_DAZ) || g_fMxCsrDazSupported);
        Bs3ExtCtxSetMxCsr(pExtCtx, uMxCsr);

        /*
         * Prepare globals and execute.
         */
        cbBytesExecuted = (fNonFpOK && !fFpXcptExpected) ? pTestCtx->cbInstr + 1 : 0;
        g_uBs3TrapEipHint = pCtx->rip.u32 + cbBytesExecuted;
        Bs3TrapSetJmpAndRestoreWithExtCtxAndRm(pCtx, pExtCtx, pTrapFrame, pExtCtxOut);

        /*
         * Check the result.
         *
         * If a floating-point exception is expected, the destination is not updated by the instruction.
         * In the case of SSE instructions, updating the destination here will work because it is the same
         * as the source, but for AVX++ it won't because the destination is different and would contain 0s.
         */
        cErrors = Bs3TestSubErrorCount();

        SetRegCtx.enmTop = BS3EXTCTXTOPMM_SET;
        if (fNonFpOK && !fFpXcptExpected && pTest->iRegDst < FSxDI)
            Bs3ExtCtxSetReg(&SetRegCtx, pTest->iRegDst, (void*)&pValues->uDstOut);
#if     defined(DEBUG_aeichner) /** @todo Necessary kludge on a i7-1068NG7. */
        if (   pExtCtx->enmMethod == BS3EXTCTXMETHOD_XSAVE
            && pExtCtx->Ctx.x.Hdr.bmXState == 0x7
            && pExtCtxOut->Ctx.x.Hdr.bmXState == 0x3)
            pExtCtxOut->Ctx.x.Hdr.bmXState = 0x7;
#endif

        if (fNonFpOK)
        {
            /* MMX instructions set FTW to 0xff 'all valid' (even if they MXCSR-fault) */
            if (BS3_REGISTER_IS_MMX(pTest->iRegSrc1) || BS3_REGISTER_IS_MMX(pTest->iRegSrc2) || BS3_REGISTER_IS_MMX(pTest->iRegDst))
                Bs3ExtCtxSetAbridgedFtw(pExtCtx, 0xff);

            if (fFuzzyPE)
            {
                uint32_t const uGotMxCsr = Bs3ExtCtxGetMxCsr(pExtCtxOut);
                uExpectedMxCsr = (uExpectedMxCsr & ~X86_MXCSR_PE) | (uGotMxCsr & X86_MXCSR_PE);
            }
            Bs3ExtCtxSetMxCsr(pExtCtx, uExpectedMxCsr | (pSavedCfg->uMxCsr & X86_MXCSR_MM));
        }

        Bs3TestCheckExtCtx(pExtCtxOut, pExtCtx, 0 /*fFlags*/, pTestCtx->pszMode, pTestCtx->idTestStep);

        if (fNonFpOK)
        {
            uint32_t const uGotMxCsr = Bs3ExtCtxGetMxCsr(pExtCtxOut) & ~X86_MXCSR_MM;

            /* Check if the SIMD FP exception flags and mask (or lack of) are as expected. */
            if (uGotMxCsr != uExpectedMxCsr)
            {
                char szExpectFlags[FP_XCPT_FLAGS_NAMES_MAXLEN];
                char szExpectMasks[FP_XCPT_MASKS_NAMES_MAXLEN];
                char szExpectOthers[FP_XCPT_OTHERS_NAMES_MAXLEN];
                char szGotFlags[FP_XCPT_FLAGS_NAMES_MAXLEN];
                char szGotMasks[FP_XCPT_MASKS_NAMES_MAXLEN];
                char szGotOthers[FP_XCPT_OTHERS_NAMES_MAXLEN];
                bs3CpuInstr4GetXcptFlags(&szExpectFlags[0],   sizeof(szExpectFlags),  uExpectedMxCsr);
                bs3CpuInstr4GetXcptMasks(&szExpectMasks[0],   sizeof(szExpectMasks),  uExpectedMxCsr);
                bs3CpuInstr4GetXcptOthers(&szExpectOthers[0], sizeof(szExpectOthers), uExpectedMxCsr);
                bs3CpuInstr4GetXcptFlags(&szGotFlags[0],   sizeof(szGotFlags),  uGotMxCsr);
                bs3CpuInstr4GetXcptMasks(&szGotMasks[0],   sizeof(szGotMasks),  uGotMxCsr);
                bs3CpuInstr4GetXcptOthers(&szGotOthers[0], sizeof(szGotOthers), uGotMxCsr);
                Bs3TestFailedF("mask-mode %s, mask=%#RX32, in-except=%#RX32, expect-raise=%#RX32, in-MXCSR=%#RX32", s_apszMaskType[iMaskType], uThisMask, uInitialExceptions, uExpectedExceptions, uMxCsr);
                Bs3TestFailedF("Expected MXCSR %#RX32 (%s%s%s ) got MXCSR %#RX32 (%s%s%s )", uExpectedMxCsr,
                               szExpectFlags, szExpectMasks, szExpectOthers, uGotMxCsr, szGotFlags, szGotMasks, szGotOthers);
            }

            /* Check if the SIMD FP exception (or lack of) is as expected. */
            if (fFpXcptExpected)
            {
                if (pTrapFrame->bXcpt == bFpXcpt)
                { /* likely */ }
                else
                    Bs3TestFailedF("Expected floating-point xcpt %s, got %s", bs3CpuInstr4XcptName(bFpXcpt),
                                   bs3CpuInstr4XcptName(pTrapFrame->bXcpt));
            }
            else if (pTrapFrame->bXcpt == X86_XCPT_DB)
            { /* likely */ }
            else
                Bs3TestFailedF("Expected no xcpt, got %s", bs3CpuInstr4XcptName(pTrapFrame->bXcpt));
        }
        /* Check if non-FP exception is as expected. */
        else if (pTrapFrame->bXcpt != bXcptExpect)
            Bs3TestFailedF("Expected xcpt %s, got %s", bs3CpuInstr4XcptName(bXcptExpect), bs3CpuInstr4XcptName(pTrapFrame->bXcpt));

        /* Kludge! Looks like EFLAGS.AC is cleared when raising #GP in real mode on the 10980XE. WEIRD! */
        if (bMode == BS3_MODE_RM && (pCtx->rflags.u32 & X86_EFL_AC))
        {
            if (pTrapFrame->Ctx.rflags.u32 & X86_EFL_AC)
                Bs3TestFailedF("Expected EFLAGS.AC to be cleared (bXcpt=%d)", pTrapFrame->bXcpt);
            pTrapFrame->Ctx.rflags.u32 |= X86_EFL_AC;
        }
        if (bXcptExpect == X86_XCPT_PF)
            pCtx->cr2.u = (uintptr_t)puMemOp;
        Bs3TestCheckRegCtxEx(&pTrapFrame->Ctx, pCtx, cbBytesExecuted, 0 /*cbSpAdjust*/,
                             (fNonFpOK && !fFpXcptExpected) || BS3_MODE_IS_16BIT_SYS(bMode) ? 0 : X86_EFL_RF,
                             pTestCtx->pszMode, pTestCtx->idTestStep);
        pCtx->cr2.u = 0;

        if (fMemOp && Bs3MemCmp(puMemOpAlias, &MemOpExpect, cbMemOp) != 0)
            Bs3TestFailedF("Expected uMemOp %.*Rhxs, got %.*Rhxs", cbMemOp, &MemOpExpect, cbMemOp, puMemOpAlias);

        if (cErrors != Bs3TestSubErrorCount())
        {
#define PUMEMOP_MAXSIZE sizeof("puMemOp=0x0123456789abcdef, cbMemOp=256, ")
            char szPuMemOpStr[PUMEMOP_MAXSIZE] = "";

            if (!pTestCtx->pConfig->fAligned)
                Bs3StrPrintf(szPuMemOpStr, PUMEMOP_MAXSIZE, "puMemOp=%p, cbMemOp=%u, ", puMemOp, cbMemOp);
            Bs3TestFailedF("%s/%s failed (bXcptExpect=%u %s, %s%s-%u)",
                           pTestCtx->pszTestIdStr, s_apszMaskTyp[iMaskType], bXcptExpect, bs3CpuInstr4XcptName(bXcptExpect),
                           szPuMemOpStr, fSseInstr ? "SSE" : "AVX", pTestCtx->cbOperand * 8);
            Bs3TestPrintf("\n");
        }
    }
}


/**
 * A values provider function decodes test values from an instruction-specific
 * format into the generic BS3CPUINSTR4_TEST1_VALUES_T structure.
 */
typedef DECLCALLBACKTYPE(PBS3CPUINSTR4_TEST1_VALUES_T, BS3CPUINSTR4_TEST1_VALUES_PROVIDER,(void *paValues, const unsigned cValues, const unsigned iVal));
typedef BS3CPUINSTR4_TEST1_VALUES_PROVIDER *PBS3CPUINSTR4_TEST1_VALUES_PROVIDER;

static DECLCALLBACK(PBS3CPUINSTR4_TEST1_VALUES_T) bs3CpuInstr4_WorkerTestType1_Provider_Default(void *paValues, const unsigned cValues, const unsigned iVal)
{
    return &((PBS3CPUINSTR4_TEST1_VALUES_T)paValues)[iVal];
}

/**
 * Test type #1 worker with optional test-unique test value provider.
 */
static uint8_t bs3CpuInstr4_WorkerTestType1_P(uint8_t bMode, unsigned cTests, BS3CPUINSTR4_TEST1_T const BS3_FAR *paTests,
                                              unsigned cConfigs, PCBS3CPUINSTR4_CONFIG_T paConfigs, PBS3CPUINSTR4_TEST1_VALUES_PROVIDER pfnProvider)
{
    BS3REGCTX                   Ctx;
    BS3TRAPFRAME                TrapFrame;
    const char BS3_FAR * const  pszMode = Bs3GetModeName(bMode);
    uint8_t                     bRing   = BS3_MODE_IS_V86(bMode) ? 3 : 0;
    uint8_t BS3_FAR            *pbBuf   = g_pbBuf;
    uint32_t                    cbBuf   = g_cbBuf;
    PBS3EXTCTX                  pExtCtxOut;
    PBS3EXTCTX                  pExtCtx = bs3CpuInstrXAllocExtCtxs(&pExtCtxOut);
    if (pExtCtx)
    { /* likely */ }
    else
        return 0;
    if (pExtCtx->enmMethod != BS3EXTCTXMETHOD_ANCIENT)
    { /* likely */ }
    else
    {
        Bs3TestPrintf("Skipped due to ancient FPU state format\n");
        return 0;
    }

    /* Ensure the structures are allocated before we sample the stack pointer. */
    Bs3MemSet(&Ctx, 0, sizeof(Ctx));
    Bs3MemSet(&TrapFrame, 0, sizeof(TrapFrame));

    /*
     * Create test context.
     */
    pbBuf = bs3CpuInstrXBufSetup(pbBuf, &cbBuf, bMode);
    Bs3RegCtxSaveForMode(&Ctx, bMode, 1024);
    bs3CpuInstr4SetupSseAndAvx(&Ctx, pExtCtx);

    /*
     * Run the tests in all rings since alignment issues may behave
     * differently in ring-3 compared to ring-0.
     */
    for (;;)
    {
        unsigned fPf = 0;
        do
        {
            unsigned iCfg;
            for (iCfg = 0; iCfg < cConfigs; iCfg++)
            {
                unsigned                    iTest;
                BS3CPUINSTRX_CONFIG_SAVED_T SavedCfg;
                if (!bs3CpuInstr4ConfigReconfigure(&SavedCfg, &Ctx, pExtCtx, &paConfigs[iCfg], bMode))
                    continue; /* unsupported config */

                /*
                 * Iterate the tests.
                 */
                for (iTest = 0; iTest < cTests; iTest++)
                {
                    BS3CPUINSTR4_TEST1_T const BS3_FAR *pTest = &paTests[iTest];
                    FPFNBS3FAR const  pfnWorker     = BS3_MODE_IS_16BIT_CODE(bMode) ? pTest->pfnWorker_16
                                                    : BS3_MODE_IS_32BIT_CODE(bMode) ? pTest->pfnWorker_32
                                                                                    : pTest->pfnWorker_64;
                    unsigned const    cValues       = pTest->cValues;
                    bool const        fSseInstr     = bs3CpuInstr4IsSse(pTest->enmType);
                    bool const        fAvxInstr     = bs3CpuInstr4IsAvx(pTest->enmType);
                    uint8_t const     cbOperand     = bs3CpuInstr4GetOperandSize(pTest->enmType);
                    uint8_t const     cbMemOp       = bs3CpuInstrXMemOpSize(cbOperand, pTest->enmRm);
                    uint8_t const     cbAlign       = cbMemOp;
                    uint8_t BS3_FAR  *puMemOp       = bs3CpuInstrXBufForOperand(pbBuf, cbBuf, cbMemOp, cbAlign, &paConfigs[iCfg], fPf);
                    uint8_t          *puMemOpAlias  = &g_pbBufAlias[(uintptr_t)puMemOp - (uintptr_t)pbBuf];
                    uint8_t const     bXcptAlt      = pTest->bAltXcpt != 255 && ((pTest->bAltXcpt & (BS3_XCPT_ALWAYS | BS3_XCPT_NEVER)) == 0) ? pTest->bAltXcpt : 0;
                    uint8_t const     bXcptAlways   = pTest->bAltXcpt != 255 && (pTest->bAltXcpt & BS3_XCPT_ALWAYS) ? pTest->bAltXcpt & ~BS3_XCPT_ALWAYS : 0;
                    uint8_t const     bXcptNever    = pTest->bAltXcpt != 255 && (pTest->bAltXcpt & BS3_XCPT_NEVER)  ? pTest->bAltXcpt & ~BS3_XCPT_NEVER  : 0;
                    uint8_t           bXcptExpect   = !g_afTypeSupports[pTest->enmType] ? X86_XCPT_UD
                                                    : bXcptAlways ? bXcptAlways
                                                    : fSseInstr ? paConfigs[iCfg].bXcptSse
                                                    : BS3_MODE_IS_RM_OR_V86(bMode) ? X86_XCPT_UD : paConfigs[iCfg].bXcptAvx;
                    /** @todo puts bRing[0..3] in 1xxxx digit, iCfg[0..14] in 11xx digits, iTest[0..80+] in 1x digit, and max(cRecompRuns, cValues)[0..80+] in 1 digit -- needs 32 bits */
                    uint16_t         idTestStep     = bRing * 10000 + iCfg * 100 + iTest * 10;
                    unsigned         cRecompRuns    = 0;
                    unsigned const   cMaxRecompRuns = g_cBs3ThresholdNativeRecompiler + cValues;
                    unsigned         iVal;

                    /* Some tests are for specific modes only. */
                    if (!pfnWorker)
                        continue;

                    /* If testing unaligned memory accesses (or #PF), skip register-only tests.  This
                       allows setting bXcptSse and bXcptAvx to reflect the misaligned exceptions. */
                    if (   (pTest->enmRm == RM_REG || pTest->enmRm == RM_MEM8)
                        && (!paConfigs[iCfg].fAligned || paConfigs[iCfg].fAlignCheck || fPf))
                        continue;

                    /* #AC is only raised in ring-3. */
                    if (bXcptExpect == X86_XCPT_AC)
                    {
                        if (bRing != 3)
                            bXcptExpect = X86_XCPT_DB;
                        else if (fAvxInstr && bXcptAlt)
                            bXcptExpect = bXcptAlt; /* they generally don't raise #AC */
                    }

                    if (bXcptNever && bXcptExpect == bXcptNever)
                        bXcptExpect = X86_XCPT_DB;

                    if (fPf && bXcptExpect == X86_XCPT_DB)
                        bXcptExpect = X86_XCPT_PF;

                    Bs3RegCtxSetRipCsFromCurPtr(&Ctx, pfnWorker);

                    /*
                     * Iterate the test values and do the actual testing.
                     */
                    while (cRecompRuns < cMaxRecompRuns)
                    {
                        for (iVal = 0; iVal < cValues; iVal++, idTestStep++, cRecompRuns++)
                        {
#define TESTID_MAXSIZE sizeof("32-bit pae, v8086 pae: ring-3/(Normal)/tst#123/val#123")
                            char szTestIdStr[TESTID_MAXSIZE];
                            BS3CPUINSTR4_TEST1_CTX_T TestCtx;

                            /*
                             * If the hardware does not support DAZ bit skip test values that set it.
                             */
                            if (   !g_fMxCsrDazSupported
                                && (pTest->paValues[iVal].uMxCsr & X86_MXCSR_DAZ))
                                continue;

                            /*
                             * Setup the test instruction context and pass it to the worker.
                             * A few of these can be figured out by the worker but initializing
                             * it outside the inner most loop is more optimal.
                             */
                            TestCtx.pConfig      = &paConfigs[iCfg];
                            TestCtx.pTest        = pTest;
                            TestCtx.pValues      = pfnProvider((void *)pTest->paValues, cValues, iVal);
                            TestCtx.iVal         = iVal;
                            TestCtx.pszMode      = pszMode;
                            TestCtx.pTrapFrame   = &TrapFrame;
                            TestCtx.pCtx         = &Ctx;
                            TestCtx.pExtCtx      = pExtCtx;
                            TestCtx.pExtCtxOut   = pExtCtxOut;
                            TestCtx.puMemOp      = (uint8_t *)puMemOp;
                            TestCtx.puMemOpAlias = puMemOpAlias;
                            TestCtx.cbMemOp      = cbMemOp;
                            TestCtx.cbOperand    = cbOperand;
                            TestCtx.bXcptExpect  = bXcptExpect;
                            TestCtx.idTestStep   = idTestStep;
                            TestCtx.cbInstr      = ((uint8_t const BS3_FAR *)(uintptr_t)pfnWorker)[-1];
                            Bs3StrPrintf(szTestIdStr, TESTID_MAXSIZE, "%s: ring-%d/%u:%s/tst#%u/val#%u",
                                         pszMode, bRing, iCfg, paConfigs[iCfg].pszCfgName, iTest, iVal);
                            TestCtx.pszTestIdStr = szTestIdStr;

                            bs3CpuInstr4_WorkerTestType1_Inner(bMode, &TestCtx, &SavedCfg);
                        }
                    }
                }
                bs3CpuInstrXConfigRestore(&SavedCfg, &Ctx, pExtCtx);
            }
        } while (fPf++ == 0 && BS3_MODE_IS_PAGED(bMode));

        /*
         * Next ring.
         */
        bRing++;
        if (bRing > 3 || bMode == BS3_MODE_RM)
            break;
        Bs3RegCtxConvertToRingX(&Ctx, bRing);
    }

    /*
     * Cleanup.
     */
    bs3CpuInstrXBufCleanup(pbBuf, cbBuf, bMode);
    bs3CpuInstrXFreeExtCtxs(pExtCtx, pExtCtxOut);
    return 0;
}

/**
 * Test type #1 worker using generic test values table.
 */
static uint8_t bs3CpuInstr4_WorkerTestType1(uint8_t bMode, unsigned cTests, BS3CPUINSTR4_TEST1_T const BS3_FAR *paTests,
                                            unsigned cConfigs, PCBS3CPUINSTR4_CONFIG_T paConfigs)
{
    return bs3CpuInstr4_WorkerTestType1_P(bMode, cTests, paTests, cConfigs, paConfigs, bs3CpuInstr4_WorkerTestType1_Provider_Default);
}


/** @todo 'master switch' turns on all IEM misbehaviors documented below */
#ifdef TODO_EXPOSE_IEM_ERRATA
# define TODO_X86_MXCSR_PE_IEM
# define TODO_X86_MXCSR_PE_IEM_SSE
# define TODO_X86_MXCSR_UE_IEM
# define TODO_CVTDQ2PD_M64_IEM
# define TODO_MXCSR_ORDER      /* (test harness issue, not IEM) */
#endif /* TODO_EXPOSE_IEM_ERRATA */

/** @todo Additionally, tons of things fail in IEM built without 'IEM_WITHOUT_ASSEMBLY=1';
 *  the 'normal' no-ifdefs path mostly succeeds WITH 'IEM_WITHOUT_ASSEMBLY=1'; cause(s) TBD.
 *  (Problem build is hypothetically the same as 'IEM_WITH_ASSEMBLY=1'; but haven't tested that.)
 */


/*
 * [V]ADDPS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_addps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /* =>      */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
    /*
     * Infinity.
     */
    /* 5*/{ { /*src2     */ { FP32_INF(0),  FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_INF(1),  FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1),  FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0),  FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0),  FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1),  FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0)  } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1)  } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(0),  FP32_INF(1),  FP32_0(0), FP32_INF(1),  FP32_0(1), FP32_INF(1),  FP32_INF(1),  FP32_INF(0)  } },
            { /*src1     */ { FP32_INF(1),  FP32_INF(0),  FP32_0(1), FP32_INF(0),  FP32_0(0), FP32_INF(0),  FP32_INF(0),  FP32_INF(1)  } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_0(0), FP32_QNAN(1), FP32_0(0), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
    /*
     * Overflow, Precision.
     */
    /*10*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),        FP32_0(0), FP32_0(0),        FP32_INF(0)      } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1),      FP32_0(0), FP32_INF(1),      FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_0(1), FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(1), FP32_0(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_0(0),        FP32_0(0), FP32_0(0), FP32_0(0),        FP32_0(1), FP32_0(0), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_0(1), FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(1), FP32_0(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_0(0),        FP32_0(0), FP32_0(0), FP32_0(0),        FP32_0(1), FP32_0(0), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1),                    FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1),                    FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1),                    FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1),                    FP32_0(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_INF(0),      FP32_V(1, 0, FP32_EXP_NORM_MIN + 1), FP32_0(0), FP32_INF(0),      FP32_INF(0),      FP32_V(1, 0, FP32_EXP_NORM_MIN + 1), FP32_0(0), FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1),                    FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1),                    FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1),                    FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1),                    FP32_0(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_INF(0),      FP32_V(1, 0, FP32_EXP_NORM_MIN + 1), FP32_0(0), FP32_INF(0),      FP32_INF(0),      FP32_V(1, 0, FP32_EXP_NORM_MIN + 1), FP32_0(0), FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MIN(1),                    FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1)                    } },
            { /*src1     */ { FP32_NORM_MIN(1),                    FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_0(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MIN(1)                    } },
            { /* =>      */ { FP32_V(1, 0, FP32_EXP_NORM_MIN + 1), FP32_NORM_MAX(0), FP32_0(1),        FP32_0(0), FP32_0(1), FP32_0(1),        FP32_NORM_MAX(0), FP32_V(1, 0, FP32_EXP_NORM_MIN + 1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MIN(1),                    FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1)                    } },
            { /*src1     */ { FP32_NORM_MIN(1),                    FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_0(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MIN(1)                    } },
            { /* =>      */ { FP32_V(1, 0, FP32_EXP_NORM_MIN + 1), FP32_NORM_MAX(0), FP32_0(1),        FP32_0(0), FP32_0(1), FP32_0(1),        FP32_NORM_MAX(0), FP32_V(1, 0, FP32_EXP_NORM_MIN + 1) } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_INF(0),      FP32_INF(1),      FP32_INF(1),      FP32_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_PM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_PM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_PM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_PM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_PM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_PM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MIN(0),                                     FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_SAFE_INT_MAX(0),                                FP32_NORM_MIN(0),                            FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1)                                } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),                            FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_SAFE_INT_MAX(0),                                FP32_NORM_SAFE_INT_MAX(0),                            FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1)                                } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX), FP32_0(0),        FP32_0(0), FP32_V(0, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(0, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX), FP32_0(0),        FP32_0(0), FP32_V(1, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX + 1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_PE },
    /*
     * Normals.
     */
    /*23*/{ { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_NORM_MAX(0), FP32_0(0), FP32_V(0, 0,        0x7d)/*0.25*/, FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_NORM_MAX(0), FP32_0(0), FP32_V(0, 0,        0x7d)/*0.25*/ } },
            { /*src1     */ { FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_NORM_MAX(1), FP32_0(0), FP32_V(0, 0,        0x7e)/*0.50*/, FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_NORM_MAX(1), FP32_0(0), FP32_V(0, 0,        0x7e)/*0.50*/ } },
            { /* =>      */ { FP32_V(0, 0x400000, 0x7f)/* 1.50*/, FP32_0(1),        FP32_0(0), FP32_V(0, 0x400000, 0x7e)/*0.75*/, FP32_V(0, 0x400000, 0x7f)/* 1.50*/, FP32_0(1),        FP32_0(0), FP32_V(0, 0x400000, 0x7e)/*0.75*/ } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_V1(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_V1(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_NORM_V1(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_V1(1), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),        FP32_0(0),       FP32_0(0), FP32_0(0), FP32_0(0),        FP32_0(0),       FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_V(0, 0x5c0000, 0x84)/*55*/, FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_0(0), FP32_V(0, 0x5c0000, 0x84)/*55*/, FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_V(0, 0x534000, 0x86)/*211.25*/, FP32_0(0) } },
            { /*src1     */ { FP32_V(0, 0x1ea980, 0x8f)/*  81235*/, FP32_V(0, 0x600000, 0x81)/* 7*/, FP32_V(0, 0x7c9000, 0x88)/*   1010.25*/, FP32_0(0), FP32_V(0, 0x600000, 0x81)/* 7*/, FP32_V(0, 0x7c9000, 0x88)/*   1010.25*/, FP32_1(1)                /*- 1.00*/, FP32_0(0) } },
            { /* =>      */ { FP32_V(0, 0x669050, 0x93)/*1888778*/, FP32_V(0, 0x780000, 0x84)/*62*/, FP32_V(0, 0x253468, 0x93)/*1353357.00*/, FP32_0(0), FP32_V(0, 0x780000, 0x84)/*62*/, FP32_V(0, 0x253468, 0x93)/*1353357.00*/, FP32_V(0, 0x524000, 0x86)/*210.25*/, FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_0(0), FP32_0(0), FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_1(1), FP32_0(0) } },
            { /*src1     */ { FP32_V(1, 0x712060, 0x92)/*- 987654*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_0(0), FP32_1(0), FP32_V(1, 0x712060, 0x92)/*- 987654*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_1(0), FP32_1(0) } },
            { /* =>      */ { FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_V(0, 0x3c614e, 0x97)/*24691356*/, FP32_0(0), FP32_1(0), FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_V(0, 0x3c614e, 0x97)/*24691356*/, FP32_0(0), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
          { { /*src2     */ { FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_NORM_SAFE_INT_MAX(0),                                FP32_1(0), FP32_1(1), FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_NORM_SAFE_INT_MAX(0),                                FP32_0(1), FP32_0(0) } },
            { /*src1     */ { FP32_1(0),                                                FP32_1(1),                                                FP32_1(1), FP32_1(0), FP32_1(0),                                                FP32_1(1),                                                FP32_0(1), FP32_0(0) } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0),                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_0(0), FP32_0(0), FP32_NORM_SAFE_INT_MAX(0),                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0),               FP32_1(1),                               FP32_0(1), FP32_1(1),  FP32_0(1), FP32_1(1), FP32_NORM_SAFE_INT_MAX(0),               FP32_1(1)                               } },
            { /*src1     */ { FP32_1(0),                               FP32_NORM_SAFE_INT_MAX(1),               FP32_0(1), FP32_0(1),  FP32_0(1), FP32_0(1), FP32_1(0),                               FP32_NORM_SAFE_INT_MAX(1)               } },
            { /* =>      */ { FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(1, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_0(1), FP32_1(1),  FP32_0(1), FP32_1(1), FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(1, 0, FP32_EXP_SAFE_INT_MAX + 1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_0(0),        FP32_NORM_MIN(0), FP32_NORM_MIN(0),                        FP32_NORM_MIN(0), FP32_0(0),        FP32_NORM_MIN(0), FP32_NORM_MIN(0)                        } },
            { /*src1     */ { FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_0(0),        FP32_NORM_MIN(0),                        FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_0(0),        FP32_NORM_MIN(0)                        } },
            { /* =>      */ { FP32_0(1),        FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_V(0, 0, FP32_EXP_SAFE_INT_MIN + 1), FP32_0(1),        FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_V(0, 0, FP32_EXP_SAFE_INT_MIN + 1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_V(0, 0x600000, 0x7e)/*      0.875*/, FP32_V(0, 0x3ce348, 0x90)/*193421.125*/, FP32_V(0, 0x6423f2, 0x92)/*934463.125*/, FP32_NORM_MIN(1),                        FP32_NORM_MIN(0),                         FP32_V(0, 0x16b43a, 0x93)/*1234567.25*/, FP32_V(0, 0x792318, 0x91)/*510232.75*/, FP32_V(0, 0x600000, 0x7e)/*      0.875*/ } },
            { /*src1     */ { FP32_V(0, 0x769b50, 0x92)/*1010101.000*/, FP32_V(0, 0x430ebc, 0x91)/*399477.875*/, FP32_V(1, 0x0a19f0, 0x8f)/*-70707.875*/, FP32_NORM_MIN(1),                        FP32_NORM_MIN(0),                         FP32_V(0, 0x00c6d3, 0x94)/*2109876.75*/, FP32_V(1, 0x316740, 0x8e)/*-45415.25*/, FP32_V(0, 0x769b50, 0x92)/*1010101.000*/ } },
            { /* =>      */ { FP32_V(0, 0x769b5e, 0x92)/*1010101.875*/, FP32_V(0, 0x10c030, 0x92)/*592899.000*/, FP32_V(0, 0x52e0b4, 0x92)/*863755.250*/, FP32_V(1, 0, FP32_EXP_SAFE_INT_MIN + 1), FP32_V(0, 0, FP32_EXP_SAFE_INT_MIN + 1),  FP32_V(0, 0x4c20f0, 0x94)/*3344444.00*/, FP32_V(0, 0x62f630, 0x91)/*464817.50*/, FP32_V(0, 0x769b5e, 0x92)/*1010101.875*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
   /*
    * Denormals.
    */
    /*31*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)         } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out *AND* different output values */
 /*--|32*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)         } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*32|33*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)         } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|35*/{ { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*34|36*/{ { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out *AND* different output values */
 /*--|39*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*37|40*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /* =>      */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
    /** @todo More Denormals. */
    /*
     * Invalids.
     */
 /*40|43*/ FP32_TABLE_D1_PS_INVALIDS
    /** @todo Underflow, Precision; Rounding; FZ etc. */
    };

    /* Sanity-check subset for 'same register' instruction variants */
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValuesSR[] =
    {
    /* 0*/{ { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_NORM_MIN(0), FP32_0(0), FP32_V(0, 0, 0x7d)/*0.25*/, FP32_V(1, 0x600000, 0x7f)/*-1.75*/, FP32_0(1), FP32_0(0), FP32_V(1, 0, 0x7d)/*-0.25*/ } },
            { /*src1     */ { FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_NORM_MIN(0), FP32_0(0), FP32_V(0, 0, 0x7d)/*0.25*/, FP32_V(1, 0x600000, 0x7f)/*-1.75*/, FP32_0(1), FP32_0(0), FP32_V(1, 0, 0x7d)/*-0.25*/ } },
            { /* =>      */ { FP32_V(0, 0x600000, 0x80)/*3.50*/, FP32_V(0, 0, 2),  FP32_0(0), FP32_V(0, 0, 0x7e)/*0.50*/, FP32_V(1, 0x600000, 0x80)/*-3.50*/, FP32_0(1), FP32_0(0), FP32_V(1, 0, 0x7e)/*-0.50*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_INF(0), FP32_INF(1), FP32_QNAN(1), FP32_QNAN(0), FP32_NORM_SAFE_INT_MAX(1),                                FP32_SNAN(1),      FP32_SNAN(0),      FP32_0(1) } },
            { /*src1     */ { FP32_INF(0), FP32_INF(1), FP32_QNAN(1), FP32_QNAN(0), FP32_NORM_SAFE_INT_MAX(1),                                FP32_SNAN(1),      FP32_SNAN(0),      FP32_0(1) } },
            { /* =>      */ { FP32_INF(0), FP32_INF(1), FP32_QNAN(1), FP32_QNAN(0), FP32_V(1, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX + 1), FP32_QNAN_V(1, 1), FP32_QNAN_V(0, 1), FP32_0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(addps_XMM1_XMM2),        255, RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(addps_XMM1_FSxBX),       255, RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vaddps_XMM1_XMM2_XMM3),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vaddps_XMM1_XMM2_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vaddps_YMM1_YMM2_YMM3),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vaddps_YMM1_YMM2_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(addps_XMM8_XMM9),        255, RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(addps_XMM8_FSxBX),       255, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(vaddps_XMM8_XMM9_XMM10), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vaddps_XMM8_XMM9_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vaddps_YMM8_YMM9_YMM10), 255, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vaddps_YMM8_YMM9_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(addps_XMM1_XMM1),        255, RM_REG, T_SSE,     XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(addps_XMM8_XMM8),        255, RM_REG, T_SSE,     XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vaddps_YMM1_YMM1_YMM1),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vaddps_YMM8_YMM8_YMM8),  255, RM_REG, T_AVX_256, YMM8, YMM8, YMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vaddps_YMM1_YMM1_YMM2),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM2,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vaddps_YMM1_YMM1_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesSR) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]ADDPD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_addpd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(1), FP64_0(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(1), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(1), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ },
          { { /*src2     */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
    /*
     * Infinity.
     */
    /* 5*/{ { /*src2     */ { FP64_INF(0),  FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_INF(1),  FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP64_0(0), FP64_INF(1),  FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_INF(0),  FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_QNAN(1), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE },
          { { /*src2     */ { FP64_0(0), FP64_INF(1),  FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_INF(0),  FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_QNAN(1), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(0),  FP64_INF(1),  FP64_0(0), FP64_INF(1) } },
            { /*src1     */ { FP64_INF(1),  FP64_INF(0),  FP64_0(0), FP64_INF(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_0(0), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP64_V(0, 0,               0x3fd)/*0.25*/, FP64_0(1), FP64_0(0), FP64_INF(1) } },
            { /*src1     */ { FP64_V(0, 0,               0x3fe)/*0.50*/, FP64_0(1), FP64_0(0), FP64_INF(0) } },
            { /* =>      */ { FP64_V(0, 0x8000000000000, 0x3fe)/*0.75*/, FP64_0(1), FP64_0(0), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
    /*
     * Overflow, Precision.
     */
    /*10*/{ { /*src2     */ { FP64_0(0), FP64_NORM_MAX(1), FP64_0(0), FP64_NORM_MAX(1) } },
            { /*src1     */ { FP64_0(0), FP64_NORM_MAX(1), FP64_0(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_0(0), FP64_INF(1),      FP64_0(0), FP64_INF(1)      } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */ },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_INF(0),      FP64_0(0),        FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */ },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MIN(1),                     FP64_0(0), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MIN(1),                     FP64_0(0), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_INF(0),      FP64_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP64_0(0), FP64_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */ },
          { { /*src2     */ { FP64_NORM_MIN(1),                     FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_0(0) } },
            { /*src1     */ { FP64_NORM_MIN(1),                     FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_0(0) } },
            { /* =>      */ { FP64_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP64_INF(0),      FP64_0(0),        FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */ },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */ },
          { { /*src2     */ { FP64_NORM_MIN(0),                                     FP64_NORM_MAX(0), FP64_0(0), FP64_NORM_SAFE_INT_MAX(1)                                } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                            FP64_NORM_MAX(1), FP64_0(0), FP64_NORM_SAFE_INT_MAX(1)                                } },
            { /* =>      */ { FP64_V(0, FP64_FRAC_NORM_MAX, FP64_EXP_SAFE_INT_MAX), FP64_0(0),        FP64_0(0), FP64_V(1, FP64_FRAC_NORM_MAX, FP64_EXP_SAFE_INT_MAX + 1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
    /*
     * Normals.
     */
    /*16*/{ { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_V1(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_NORM_V1(1), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0),        FP64_0(0),       FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_V(0, 0,               0x409)/*1024*/, FP64_V(0, 0xb800000000000, 0x404)/*55*/, FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_V(0, 0,               0x408)/* 512*/, FP64_V(0, 0xc000000000000, 0x401)/* 7*/, FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_V(0, 0x8000000000000, 0x409)/*1536*/, FP64_V(0, 0xf000000000000, 0x404)/*62*/, FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_V(0, 0x26580b4800000, 0x41d)/* 1234567890*/, FP64_V(0, 0xd6f3458800000, 0x41c)/*987654321*/, FP64_0(0), FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/ } },
            { /*src1     */ { FP64_V(1, 0x26580b4800000, 0x41d)/*-1234567890*/, FP64_V(1, 0x9000000000000, 0x405)/*     -100*/, FP64_0(0), FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/ } },
            { /* =>      */ { FP64_0(0),                                        FP64_V(0, 0xd6f3426800000, 0x41c)/*987654221*/, FP64_0(0), FP64_V(0, 0xcf00348ec5858, 0x432)/*4072598123457580.0*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_NORM_SAFE_INT_MAX(0),                                FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_1(0),                                                FP64_1(1),                                                FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0),                                FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_NORM_SAFE_INT_MAX(0),               FP64_1(1),                               FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_1(0),                               FP64_NORM_SAFE_INT_MAX(1),               FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_V(0, 0, FP64_EXP_SAFE_INT_MAX + 1), FP64_V(1, 0, FP64_EXP_SAFE_INT_MAX + 1), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
          { { /*src2     */ { FP64_NORM_MIN(0), FP64_0(0),        FP64_NORM_MIN(0), FP64_NORM_MIN(0)                        } },
            { /*src1     */ { FP64_NORM_MIN(1), FP64_NORM_MIN(1), FP64_0(0),        FP64_NORM_MIN(0)                        } },
            { /* =>      */ { FP64_0(1),        FP64_NORM_MIN(1), FP64_NORM_MIN(0), FP64_V(0, 0, FP32_EXP_SAFE_INT_MIN + 1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_0(0), FP64_0(0), FP64_NORM_MIN(1)                        } },
            { /*src1     */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_0(0), FP64_0(0), FP64_NORM_MIN(1)                        } },
            { /* =>      */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_0(0), FP64_0(0), FP64_V(1, 0, FP32_EXP_SAFE_INT_MIN + 1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_V(0, 0xc000000000000, 0x3ff)/* 1.75*/, FP64_NORM_MAX(0), FP64_0(0), FP64_V(0, 0,               0x3fd)/*0.25*/ } },
            { /*src1     */ { FP64_V(1, 0,               0x3fd)/*-0.25*/, FP64_NORM_MAX(1), FP64_0(0), FP64_V(0, 0,               0x3fe)/*0.50*/ } },
            { /* =>      */ { FP64_V(0, 0x8000000000000, 0x3ff)/* 1.50*/, FP64_0(1),        FP64_0(0), FP64_V(0, 0x8000000000000, 0x3fe)/*0.75*/ } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Denormals.
     */
    /*24*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,                            /* DM off, UM can vary */
              /*128:out  */ BS3_MXCSR_DM_FIXED | X86_MXCSR_DE,
              /*256:out  */ BS3_MXCSR_DM_FIXED | X86_MXCSR_DE },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|25*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,                 /* DM on,  UM off */
              /*128:out  */ X86_MXCSR_DM | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED | X86_MXCSR_DE | X86_MXCSR_UE,
              /*256:out  */ X86_MXCSR_DM | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED | X86_MXCSR_DE | X86_MXCSR_UE },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*25|26*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,  /* DM on,  UM on */
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED | X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_UM | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED | X86_MXCSR_DE },
 /*26|27*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0),          FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0) } },
              /*mxcsr:in */ 0,                            /* DM off, UM can vary */
              /*128:out  */ 0,
              /*256:out  */ BS3_MXCSR_DM_FIXED | X86_MXCSR_DE },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|28*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0),          FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,                 /* DM on,  UM off */
              /*128:out  */ X86_MXCSR_DM,
              /*256:out  */ X86_MXCSR_DM | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED | X86_MXCSR_DE | X86_MXCSR_UE },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*27|29*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0),          FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,  /* DM on,  UM on */
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_UM | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED | X86_MXCSR_DE },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
    /** @todo More denormals. */
    /*
     * Invalids.
     */
 /*29|31*/ FP64_TABLE_D1_PD_INVALIDS
    /** @todo Underflow, Precision; Rounding; FZ etc. */
    };

    /* Sanity-check subset for 'same register' instruction variants */
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesSR[] =
    {
    /* 0*/{ { /*src2     */ { FP64_V(0, 0xc000000000000, 0x3ff)/*1.75*/, FP64_V(0, 0, 0x3fd)/*0.25*/, FP64_V(1, 0xc000000000000, 0x3ff)/*-1.75*/, FP64_V(1, 0, 0x3fd)/*-0.25*/ } },
            { /*src1     */ { FP64_V(0, 0xc000000000000, 0x3ff)/*1.75*/, FP64_V(0, 0, 0x3fd)/*0.25*/, FP64_V(1, 0xc000000000000, 0x3ff)/*-1.75*/, FP64_V(1, 0, 0x3fd)/*-0.25*/ } },
            { /* =>      */ { FP64_V(0, 0xc000000000000, 0x400)/*3.50*/, FP64_V(0, 0, 0x3fe)/*0.50*/, FP64_V(1, 0xc000000000000, 0x400)/*-3.50*/, FP64_V(1, 0, 0x3fe)/*-0.50*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_INF(0), FP64_QNAN(1), FP64_SNAN(1),      FP64_SNAN(0)      } },
            { /*src1     */ { FP64_INF(0), FP64_QNAN(1), FP64_SNAN(1),      FP64_SNAN(0)      } },
            { /* =>      */ { FP64_INF(0), FP64_QNAN(1), FP64_QNAN_V(1, 1), FP64_QNAN_V(0, 1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(addpd_XMM1_XMM2),        255,         RM_REG, T_SSE2,    XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(addpd_XMM1_FSxBX),       255,         RM_MEM, T_SSE2,    XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vaddpd_XMM1_XMM2_XMM3),  X86_XCPT_GP, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vaddpd_XMM1_XMM2_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vaddpd_YMM1_YMM2_YMM3),  X86_XCPT_GP, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vaddpd_YMM1_YMM2_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(addpd_XMM8_XMM9),        255,         RM_REG, T_SSE2,    XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(addpd_XMM8_FSxBX),       255,         RM_MEM, T_SSE2,    XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(vaddpd_XMM8_XMM9_XMM10), X86_XCPT_GP, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vaddpd_XMM8_XMM9_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vaddpd_YMM8_YMM9_YMM10), X86_XCPT_GP, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vaddpd_YMM8_YMM9_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(addpd_XMM1_XMM1),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(addpd_XMM8_XMM8),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vaddpd_YMM1_YMM1_YMM1),  X86_XCPT_GP, RM_REG, T_AVX_256, YMM1, YMM1, YMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vaddpd_YMM8_YMM8_YMM8),  X86_XCPT_GP, RM_REG, T_AVX_256, YMM8, YMM8, YMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vaddpd_YMM1_YMM1_YMM2),  X86_XCPT_GP, RM_REG, T_AVX_256, YMM1, YMM1, YMM2,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vaddpd_YMM1_YMM1_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM1, YMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesSR) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]ADDSS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_addss(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_0(0), FP32_0_x7(0) } },
            { /* =>      */ { FP32_0(0), FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_0(1), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 6*/{ { /*src2     */ { FP32_INF(0),  FP32_0_x7(0) } },
            { /*src1     */ { FP32_INF(1),  FP32_0_x7(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0),  FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_INF(1),  FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1),  FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_INF(0),  FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0),  FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_INF(1),  FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0),  FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_INF(1),  FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1),  FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_INF(0),  FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Overflow, Precision.
     */
    /*12*/{ { /*src2     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0),        FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_INF(1),      FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_INF(0),      FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0),      FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_PE | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_RAND_V0(1),  FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_NORM_MAX(1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(1),      FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(1),      FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(0),                                     FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),                            FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(1),                                     FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(1),                            FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_V(1, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*21*/{ { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_V(0, 0x400000, 0x7f)/* 1.50*/, FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),        FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_V(0, 0x1ea980, 0x8f)/*  81235*/, FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0, 0x669050, 0x93)/*1888778*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_V(0, 0x7c9000, 0x88)/*   1010.25*/, FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0, 0x253468, 0x93)/*1353357.00*/, FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_V(1, 0x712060, 0x92)/*- 987654*/, FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_1(0),                                                FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0),                                FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0),                                FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_1(1),                                                FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x600000, 0x7e)/*      0.875*/, FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_V(0, 0x769b50, 0x92)/*1010101.000*/, FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0, 0x769b5e, 0x92)/*1010101.875*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_NORM_MIN(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),        FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*30*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out *AND* different output values */
 /*--|31*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V4 } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V4 } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*31|32*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),          FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),          FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),          FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_NORM_MIN(0),   FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE,
              /*256:out  */ -1 },
    /** @todo More denormals etc. */
    /*
     * Invalids.
     */
 /*36|37*/ FP32_TABLE_D1_SS_INVALIDS
    /** @todo Underflow; Precision; Rounding; FZ etc. */
    };

    /* Sanity-check subset for 'same register' instruction variants */
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValuesSR[] =
    {
    /* 0*/{ { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0, 0x600000, 0x80)/*3.50*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_QNAN(1), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_QNAN(1), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_SNAN(0),      FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_SNAN(0),      FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(addss_XMM1_XMM2),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(addss_XMM1_FSxBX),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vaddss_XMM1_XMM2_XMM3),  255,         RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vaddss_XMM1_XMM2_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(addss_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(addss_XMM8_FSxBX),       X86_XCPT_AC, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(vaddss_XMM8_XMM9_XMM10), 255,         RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vaddss_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(addss_XMM1_XMM1),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(addss_XMM8_XMM8),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vaddss_XMM1_XMM1_XMM1),  255,         RM_REG, T_AVX_128, XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vaddss_XMM8_XMM8_XMM8),  255,         RM_REG, T_AVX_128, XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vaddss_XMM1_XMM1_XMM2),  255,         RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vaddss_XMM1_XMM1_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesSR) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]ADDSD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_addsd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_0(1), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_0(1), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V3(1), FP64_RAND_V1(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V3(1), FP64_RAND_V1(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V3(1), FP64_RAND_V0(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V3(1), FP64_RAND_V0(0), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 6*/{ { /*src2     */ { FP64_INF(0),  FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_INF(1),  FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0),  FP64_RAND_V1(0), FP64_RAND_V2(0), FP32_RAND_V3(1) } },
            { /*src1     */ { FP64_INF(1),  FP64_RAND_V0(0), FP64_RAND_V1(1), FP32_RAND_V1(1) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V0(0), FP64_RAND_V1(1), FP32_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1),  FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_INF(0),  FP64_RAND_V1(1), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V1(1), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0),  FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_INF(1),  FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0),  FP64_RAND_V0(0), FP64_RAND_V0(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(1),  FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1),  FP64_0(0), FP64_0(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_INF(0),  FP64_0(1), FP64_0(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_QNAN(1), FP64_0(1), FP64_0(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Overflow, Precision.
     */
    /*12*/{ { /*src2     */ { FP64_NORM_MAX(1), FP64_0(0), FP64_0(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_0(1), FP64_0(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_INF(1),      FP64_0(1), FP64_0(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(1), FP64_0(0), FP64_0(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_0(1), FP64_0(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_INF(1),      FP64_0(1), FP64_0(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_INF(0),      FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_INF(0),      FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_RAND_V0(1),  FP64_RAND_V1(0), FP64_RAND_V1(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_RAND_V2(0), FP64_RAND_V0(1), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_NORM_MAX(1), FP64_RAND_V2(0), FP64_RAND_V0(1), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(1), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_INF(1),      FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(1), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_INF(1),      FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(0),                                     FP64_RAND_V1(1), FP64_RAND_V3(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                            FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_V(0, FP64_FRAC_NORM_MAX, FP64_EXP_SAFE_INT_MAX), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(1),                                     FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(1),                            FP64_RAND_V2(1), FP64_RAND_V0(1), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_V(1, FP64_FRAC_NORM_MAX, FP64_EXP_SAFE_INT_MAX), FP64_RAND_V2(1), FP64_RAND_V0(1), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*19*/{ { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_V1(0), FP64_0(0), FP64_SNAN(0) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_NORM_V1(1), FP64_0(0), FP64_SNAN(1) } },
            { /* =>      */ { FP64_0(0),        FP64_NORM_V1(1), FP64_0(0), FP64_SNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0,               0x409)/*1024*/, FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_V(0, 0,               0x408)/* 512*/, FP64_RAND_V2(1), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(0, 0x8000000000000, 0x409)/*1536*/, FP64_RAND_V2(1), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xb800000000000, 0x404)/*55*/, FP64_RAND_V2(1), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_V(0, 0xc000000000000, 0x401)/* 7*/, FP64_RAND_V1(1), FP64_RAND_V3(1), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_V(0, 0xf000000000000, 0x404)/*62*/, FP64_RAND_V1(1), FP64_RAND_V3(1), FP64_RAND_V2(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0x26580b4800000, 0x41d)/* 1234567890*/, FP64_RAND_V0(1), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(1, 0x26580b4800000, 0x41d)/*-1234567890*/, FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_0(0),                                        FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xd6f3458800000, 0x41c)/*987654321*/, FP64_RAND_V2(1), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_V(1, 0x9000000000000, 0x405)/*     -100*/, FP64_RAND_V1(1), FP64_RAND_V3(1), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_V(0, 0xd6f3426800000, 0x41c)/*987654221*/, FP64_RAND_V1(1), FP64_RAND_V3(1), FP64_RAND_V2(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/, FP64_RAND_V0(1), FP64_RAND_V2(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/, FP64_RAND_V3(1), FP64_RAND_V0(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_V(0, 0xcf00348ec5858, 0x432)/*4072598123457580.0*/, FP64_RAND_V3(1), FP64_RAND_V0(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_1(0),                                                FP64_RAND_V2(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0),                                FP64_RAND_V2(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_SAFE_INT_MAX(0),               FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(0) } },
            { /*src1     */ { FP64_1(0),                               FP64_RAND_V3(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(0, 0, FP64_EXP_SAFE_INT_MAX + 1), FP64_RAND_V3(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_1(1),                               FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(1),               FP64_RAND_V3(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(1, 0, FP64_EXP_SAFE_INT_MAX + 1), FP64_RAND_V3(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(0), FP64_RAND_V2(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_NORM_MIN(1), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_0(1),        FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_RAND_V2(0), FP64_RAND_V3(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_RAND_V2(0), FP64_RAND_V3(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*32*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_SNAN(0), FP64_SNAN(0), FP64_QNAN(0) } },
            { /*src1     */ { FP64_0(0),          FP64_SNAN(0), FP64_QNAN(1), FP64_SNAN(1) } },
            { /* =>      */ { FP64_0(0),          FP64_SNAN(0), FP64_QNAN(1), FP64_SNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out *AND* different output values */
 /*--|33*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_SNAN(0), FP64_SNAN(0), FP64_QNAN(0) } },
            { /*src1     */ { FP64_0(0),          FP64_SNAN(0), FP64_QNAN(1), FP64_SNAN(1) } },
            { /* =>      */ { FP64_0(0),          FP64_SNAN(0), FP64_QNAN(1), FP64_SNAN(1) } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP64_DENORM_MAX(0), FP64_SNAN(0), FP64_QNAN(1), FP64_SNAN(1) } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*33|34*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_SNAN(0), FP64_SNAN(0), FP64_QNAN(0) } },
            { /*src1     */ { FP64_0(0),          FP64_SNAN(0), FP64_QNAN(1), FP64_SNAN(1) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_SNAN(0), FP64_QNAN(1), FP64_SNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),          FP64_SNAN(1), FP64_INF(0),  FP64_SNAN(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_INF(0),  FP64_SNAN(1), FP64_QNAN(0) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_INF(0),  FP64_SNAN(1), FP64_QNAN(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out */
 /*--|36*/{ { /*src2     */ { FP64_0(0),          FP64_SNAN(1), FP64_INF(0),  FP64_SNAN(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_INF(0),  FP64_SNAN(1), FP64_QNAN(0) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_INF(0),  FP64_SNAN(1), FP64_QNAN(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*35|37*/{ { /*src2     */ { FP64_0(0),          FP64_SNAN(1), FP64_INF(0),  FP64_SNAN(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_INF(0),  FP64_SNAN(1), FP64_QNAN(0) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_INF(0),  FP64_SNAN(1), FP64_QNAN(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          /** @todo More Denormals. */
    /*
     * Invalids.
     */
 /*37|39*/ FP64_TABLE_D1_SD_INVALIDS
    /** @todo Underflow, Precision; Rounding; FZ etc. */
    };

    /* Sanity-check subset for 'same register' instruction variants */
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValuesSR[] =
    {
    /* 0*/{ { /*src2     */ { FP64_V(0, 0xc000000000000, 0x3ff)/*1.75*/, FP64_RAND_x3_V1 } },
            { /*src1     */ { FP64_V(0, 0xc000000000000, 0x3ff)/*1.75*/, FP64_RAND_x3_V1 } },
            { /* =>      */ { FP64_V(0, 0xc000000000000, 0x400)/*3.50*/, FP64_RAND_x3_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_RAND_x3_V0 } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_x3_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_QNAN(1), FP64_RAND_x3_V2 } },
            { /*src1     */ { FP64_QNAN(1), FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_x3_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_SNAN(0),      FP64_RAND_x3_V3 } },
            { /*src1     */ { FP64_SNAN(0),      FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_QNAN_V(0, 1), FP64_RAND_x3_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(addsd_XMM1_XMM2),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(addsd_XMM1_FSxBX),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vaddsd_XMM1_XMM2_XMM3),  255,         RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vaddsd_XMM1_XMM2_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(addsd_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(addsd_XMM8_FSxBX),       X86_XCPT_AC, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(vaddsd_XMM8_XMM9_XMM10), 255,         RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vaddsd_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(addsd_XMM1_XMM1),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(addsd_XMM8_XMM8),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vaddsd_XMM1_XMM1_XMM1),  255,         RM_REG, T_AVX_128, XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vaddsd_XMM8_XMM8_XMM8),  255,         RM_REG, T_AVX_128, XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vaddsd_XMM1_XMM1_XMM2),  255,         RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vaddsd_XMM1_XMM1_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesSR) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]HADDPS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_haddps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /* =>      */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 5*/{ { /*src2     */ { FP32_INF(0),  FP32_INF(1),  FP32_INF(0),  FP32_INF(1),  FP32_INF(0),  FP32_INF(1), FP32_INF(0),  FP32_INF(1)  } },
            { /*src1     */ { FP32_INF(1),  FP32_INF(0),  FP32_0(0),    FP32_0(0),    FP32_INF(0),  FP32_INF(1), FP32_0(0),    FP32_0(0)    } },
            { /* =>      */ { FP32_QNAN(1), FP32_0(0),    FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_0(0),   FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1),  FP32_INF(1), FP32_0(0),   FP32_0(0)   } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1),  FP32_INF(0), FP32_INF(0), FP32_INF(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN(1), FP32_INF(0), FP32_INF(1), FP32_0(0)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(0),  FP32_INF(1), FP32_INF(0),  FP32_INF(1),  FP32_INF(1),  FP32_INF(1), FP32_0(0),   FP32_0(0)   } },
            { /*src1     */ { FP32_INF(1),  FP32_INF(0), FP32_0(0),    FP32_0(0),    FP32_INF(1),  FP32_INF(0), FP32_INF(0), FP32_INF(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_0(0),   FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_INF(0), FP32_INF(1), FP32_0(0)   } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(1),  FP32_INF(1), FP32_INF(0), FP32_0(0),   FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_0(0)   } },
            { /*src1     */ { FP32_INF(0),  FP32_INF(0), FP32_INF(1), FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
            { /* =>      */ { FP32_INF(0),  FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_INF(1), FP32_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_INF(0),  FP32_QNAN(1), FP32_INF(1),  FP32_QNAN(0), FP32_INF(1),  FP32_INF(1),  FP32_0(0),   FP32_0(0)   } },
            { /*src1     */ { FP32_INF(0),  FP32_QNAN(0), FP32_INF(1),  FP32_QNAN(0), FP32_INF(1),  FP32_QNAN(1), FP32_INF(0), FP32_INF(0) } },
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN(0), FP32_QNAN(1), FP32_QNAN(0), FP32_QNAN(1), FP32_INF(0),  FP32_INF(1), FP32_0(0)   } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    /*
     * Overflow, Precision.
     */
    /*10*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0),                                     FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1),                                     FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1),      FP32_INF(1),      FP32_V(1, FP32_FRAC_NORM_MIN, FP32_EXP_NORM_MIN + 1), FP32_INF(0)      } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0),                                     FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1),                                     FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1),      FP32_INF(1),      FP32_V(1, FP32_FRAC_NORM_MIN, FP32_EXP_NORM_MIN + 1), FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0),                                     FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1),                                     FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_INF(1),      FP32_INF(1),      FP32_V(1, FP32_FRAC_NORM_MIN, FP32_EXP_NORM_MIN + 1), FP32_INF(0),      FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0),                                     FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1),                                     FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_INF(1),      FP32_INF(1),      FP32_V(1, FP32_FRAC_NORM_MIN, FP32_EXP_NORM_MIN + 1), FP32_INF(0),      FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0),        FP32_0(0),        FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_0(0),        FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0),        FP32_0(0),        FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_0(0),        FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1),                     FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0),                                     FP32_0(0),        FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0),                     FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0),                                     FP32_NORM_MIN(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_INF(0),      FP32_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MAX), FP32_INF(0),      FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1),                     FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0),                                     FP32_0(0),        FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0),                     FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0),                                     FP32_NORM_MIN(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_INF(0),      FP32_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MAX), FP32_INF(0),      FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_OM | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_OM | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_OM | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0),                     FP32_NORM_MAX(0),                     FP32_NORM_MAX(0), FP32_0(0),        FP32_0(0),        FP32_NORM_MAX(0),                     FP32_NORM_MIN(1), FP32_NORM_MIN(0) } },
            { /*src1     */ { FP32_NORM_MIN(1),                     FP32_NORM_MIN(1),                     FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_0(0),        FP32_NORM_MAX(1),                     FP32_NORM_MIN(1), FP32_NORM_MIN(1) } },
            { /* =>      */ { FP32_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP32_V(0, 0, FP32_EXP_NORM_MIN + 1),  FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP32_NORM_MAX(0), FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0),                     FP32_NORM_MAX(0),                     FP32_NORM_MAX(0), FP32_0(0),        FP32_0(0),        FP32_NORM_MAX(0),                     FP32_NORM_MIN(1), FP32_NORM_MIN(0) } },
            { /*src1     */ { FP32_NORM_MIN(1),                     FP32_NORM_MIN(1),                     FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_0(0),        FP32_NORM_MAX(1),                     FP32_NORM_MIN(1), FP32_NORM_MIN(1) } },
            { /* =>      */ { FP32_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP32_V(0, 0, FP32_EXP_NORM_MIN + 1),  FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP32_NORM_MAX(0), FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MIN(0),          FP32_NORM_MAX(0),                                         FP32_0(0),                 FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_MIN(0),          FP32_NORM_MAX(0),          FP32_0(0),        FP32_NORM_SAFE_INT_MAX(1) } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_MIN(0),                                         FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_MAX(0),          FP32_0(0),        FP32_NORM_SAFE_INT_MAX(1) } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0), FP32_V(1, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX + 1), FP32_NORM_MAX(0),          FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_MAX(0),          FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_MAX(0), FP32_NORM_SAFE_INT_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
    /*
     * Normals.
     */
    /*23*/{ { /*src2     */ { FP32_V(0, 0,        0x7d)/* 0.25*/, FP32_V(0, 0,        0x7e)/*0.50*/, FP32_NORM_MAX(0),                  FP32_0(0),        FP32_0(0),                         FP32_NORM_MAX(0),           FP32_V(0, 0x400000, 0x7f)/*1.50*/, FP32_V(0, 0,        0x7d)/*0.25*/ } },
            { /*src1     */ { FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_NORM_MAX(1),                  FP32_0(0),        FP32_V(0, 0,        0x7e)/*0.50*/, FP32_V(0, 0, 0x7d)/*0.25*/, FP32_0(0),                         FP32_0(0)                         } },
            { /* =>      */ { FP32_V(0, 0x400000, 0x7f)/* 1.50*/, FP32_NORM_MAX(1),                  FP32_V(0, 0x400000, 0x7e)/*0.75*/, FP32_NORM_MAX(0), FP32_V(0, 0x400000, 0x7e)/*0.75*/, FP32_0(0),                  FP32_NORM_MAX(0),                  FP32_V(0, 0x600000, 0x7f)/*1.75*/ } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_NORM_V1(1),  FP32_NORM_V1(0),  FP32_NORM_V4(1),  FP32_NORM_V4(0),  FP32_NORM_V1(1),  FP32_NORM_V1(0),  FP32_NORM_V2(1), FP32_NORM_V2(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_V3(0), FP32_NORM_V3(1) } },
            { /* =>      */ { FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),       FP32_0(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_V(0, 0x5c0000, 0x84)/*     55*/, FP32_V(0, 0x600000, 0x81)/*      7.00*/, FP32_0(0),                            FP32_V(0, 0x5c0000, 0x84)/*   55.00*/, FP32_V(0, 0x253468, 0x93)/*1353357*/, FP32_V(1, 0x7c9000, 0x88)/*-1010.25*/, FP32_0(0),                               FP32_V(0, 0x534000, 0x86)/*211.25*/ } },
            { /*src1     */ { FP32_V(0, 0x669050, 0x93)/*1888778*/, FP32_V(1, 0x1ea980, 0x8f)/* -81235.00*/, FP32_V(0, 0x253468, 0x93)/*1353357*/, FP32_V(1, 0x7c9000, 0x88)/*-1010.25*/, FP32_V(0, 0x5c0000, 0x84)/*     55*/, FP32_V(0, 0x600000, 0x81)/*7*/,        FP32_V(0, 0x534000, 0x86)/*    211.25*/, FP32_1(1)                           } },
            { /* =>      */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_V(0, 0x780000, 0x84)/*     62*/, FP32_V(0, 0x5c0000, 0x84)/*   55.00*/, FP32_V(0, 0x780000, 0x84)/*     62*/, FP32_V(0, 0x524000, 0x86)/*210.25*/,   FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_V(0, 0x534000, 0x86)/*211.25*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_0(0),                             FP32_NORM_V1(0), FP32_V(0, 0x3c614e, 0x97)/*24691356*/, FP32_V(1, 0x3c614e, 0x96)/*-12345678*/, FP32_0(0),                             FP32_1(1) } },
            { /*src1     */ { FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_V(1, 0x712060, 0x92)/* -987654*/, FP32_NORM_V3(1),                       FP32_0(0),       FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_V(1, 0x712060, 0x92)/*  -987654*/, FP32_0(0),                             FP32_1(0) } },
            { /* =>      */ { FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_NORM_V3(1),                       FP32_V(0, 0x3c614e, 0x97)/*24691356*/, FP32_NORM_V1(0), FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_1(0),                              FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_1(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_1(0),                                                FP32_1(1),                                                FP32_1(1),                 FP32_0(0), FP32_1(0),                                                FP32_1(1),                                                FP32_1(1),                 FP32_0(0) } },
            { /*src1     */ { FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0),                                                FP32_NORM_SAFE_INT_MAX(0), FP32_1(1), FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0),                                                FP32_NORM_SAFE_INT_MAX(0), FP32_1(1) } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0),                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_0(0),                 FP32_1(1), FP32_NORM_SAFE_INT_MAX(0),                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_0(0),                 FP32_1(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0),               FP32_1(0),                               FP32_1(1),                               FP32_0(0), FP32_NORM_SAFE_INT_MAX(0),               FP32_1(0),                               FP32_1(1),                               FP32_0(0) } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),               FP32_1(0),                               FP32_NORM_SAFE_INT_MAX(1),               FP32_1(1), FP32_NORM_SAFE_INT_MAX(0),               FP32_1(0),                               FP32_NORM_SAFE_INT_MAX(1),               FP32_1(1) } },
            { /* =>      */ { FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(1, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_1(1), FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(1, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_1(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0),               FP32_1(0),                               FP32_1(1),                               FP32_0(0), FP32_NORM_SAFE_INT_MAX(0),               FP32_1(0),                               FP32_1(1),                               FP32_0(0) } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),               FP32_1(0),                               FP32_NORM_SAFE_INT_MAX(1),               FP32_1(1), FP32_NORM_SAFE_INT_MAX(0),               FP32_1(0),                               FP32_NORM_SAFE_INT_MAX(1),               FP32_1(1) } },
            { /* =>      */ { FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(1, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_1(1), FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(1, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_1(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
          { { /*src2     */ { FP32_V(0, 0x6423f2, 0x92)/* 934463.125*/, FP32_V(1, 0x0a19f0, 0x8f)/*-70707.875*/, FP32_NORM_MIN(1),                        FP32_NORM_MIN(1),                        FP32_NORM_MIN(0),                        FP32_NORM_MIN(0),                        FP32_V(0, 0x600000, 0x7e)/*     0.875*/, FP32_V(0, 0x769b50, 0x92)/*1010101.000*/ } },
            { /*src1     */ { FP32_V(0, 0x769b50, 0x92)/*1010101.000*/, FP32_V(0, 0x600000, 0x7e)/*     0.875*/, FP32_V(0, 0x430ebc, 0x91)/*399477.875*/, FP32_V(0, 0x3ce348, 0x90)/*193421.125*/, FP32_V(0, 0x16b43a, 0x93)/*1234567.25*/, FP32_V(0, 0x00c6d3, 0x94)/*2109876.75*/, FP32_V(0, 0x792318, 0x91)/*510232.750*/, FP32_V(1, 0x316740, 0x8e)/* -45415.250*/ } },
            { /* =>      */ { FP32_V(0, 0x769b5e, 0x92)/*1010101.875*/, FP32_V(0, 0x10c030, 0x92)/*592899.000*/, FP32_V(0, 0x52e0b4, 0x92)/*863755.250*/, FP32_V(1, 0, FP32_EXP_SAFE_INT_MIN + 1), FP32_V(0, 0x4c20f0, 0x94)/*3344444.00*/, FP32_V(0, 0x62f630, 0x91)/*464817.50*/,  FP32_V(0, 0, FP32_EXP_SAFE_INT_MIN + 1), FP32_V(0, 0x769b5e, 0x92)/*1010101.875*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Denormals.
     */
    /*31*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out *AND* different output values */
 /*--|32*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0),          FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP32_DENORM_MAX(1), FP32_0(0),          FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0),          FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_0(0)          } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*32|33*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0),          FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_DENORM_MAX(1), FP32_0(0),          FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0),          FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_DM | X86_MXCSR_UM | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_DM | X86_MXCSR_UM | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out *AND* different output values */
 /*--|37*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP32_0(0),          FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*36|38*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /* =>      */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          /** @todo More Denormals. */
    /*
     * Invalids.
     */
 /*39|41*/ FP32_TABLE_D1_H_PS_INVALIDS
    /** @todo Underflow; Precision; Rounding; FZ etc. */
    };

    /* Sanity-check subset for 'same register' instruction variants */
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValuesSR[] =
    {
          { { /*src1     */ { FP32_V(0, 0x669050, 0x93)/*1888778.0*/, FP32_V(1, 0x1ea980, 0x8f)/*-81235.0*/,   FP32_V(0, 0x253468, 0x93)/*1353357.0*/, FP32_V(1, 0x7c9000, 0x88)/*-1010.25*/,   FP32_V(0, 0x5c0000, 0x84)/*55.0*/, FP32_V(0, 0x600000, 0x81)/*7.0*/,    FP32_V(0, 0x534000, 0x86)/*211.25*/, FP32_1(1)                           } },
            { /*src1     */ { FP32_V(0, 0x669050, 0x93)/*1888778.0*/, FP32_V(1, 0x1ea980, 0x8f)/*-81235.0*/,   FP32_V(0, 0x253468, 0x93)/*1353357.0*/, FP32_V(1, 0x7c9000, 0x88)/*-1010.25*/,   FP32_V(0, 0x5c0000, 0x84)/*55.0*/, FP32_V(0, 0x600000, 0x81)/*7.0*/,    FP32_V(0, 0x534000, 0x86)/*211.25*/, FP32_1(1)                           } },
            { /* =>      */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543.0*/, FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_V(0, 0x5ca5b8, 0x93)/*1807543.0*/, FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_V(0, 0x780000, 0x84)/*62.0*/, FP32_V(0, 0x524000, 0x86)/*210.25*/, FP32_V(0, 0x780000, 0x84)/*62.0*/,   FP32_V(0, 0x524000, 0x86)/*210.25*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_V(0, 0x6423f2, 0x92)/*934463.125*/, FP32_V(1, 0x0a19f0, 0x8f)/*-70707.875*/, FP32_V(0, 0x600000, 0x7e)/*0.875*/,   FP32_V(0, 0x769b50, 0x92)/*1010101.0*/, FP32_INF(0),  FP32_INF(1),  FP32_QNAN(1), FP32_QNAN(0) } },
            { /*src1     */ { FP32_V(0, 0x6423f2, 0x92)/*934463.125*/, FP32_V(1, 0x0a19f0, 0x8f)/*-70707.875*/, FP32_V(0, 0x600000, 0x7e)/*0.875*/,   FP32_V(0, 0x769b50, 0x92)/*1010101.0*/, FP32_INF(0),  FP32_INF(1),  FP32_QNAN(1), FP32_QNAN(0) } },
            { /* =>      */ { FP32_V(0,0x52e0b4,0x92)/*863755.25*/,    FP32_V(0,0x769b5e,0x92)/*1010101.875*/,  FP32_V(0,0x52e0b4,0x92)/*863755.25*/, FP32_V(0,0x769b5e,0x92)/*1010101.875*/, FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(haddps_XMM1_XMM2),        255, RM_REG, T_SSE3,    XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(haddps_XMM1_FSxBX),       255, RM_MEM, T_SSE3,    XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vhaddps_XMM1_XMM2_XMM3),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vhaddps_XMM1_XMM2_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vhaddps_YMM1_YMM2_YMM3),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vhaddps_YMM1_YMM2_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(haddps_XMM8_XMM9),        255, RM_REG, T_SSE3,    XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(haddps_XMM8_FSxBX),       255, RM_MEM, T_SSE3,    XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(vhaddps_XMM8_XMM9_XMM10), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vhaddps_XMM8_XMM9_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vhaddps_YMM8_YMM9_YMM10), 255, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vhaddps_YMM8_YMM9_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(haddps_XMM1_XMM1),        255, RM_REG, T_SSE3,    XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(haddps_XMM8_XMM8),        255, RM_REG, T_SSE3,    XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vhaddps_YMM1_YMM1_YMM1),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vhaddps_YMM8_YMM8_YMM8),  255, RM_REG, T_AVX_256, YMM8, YMM8, YMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vhaddps_YMM1_YMM1_YMM2),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM2,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vhaddps_YMM1_YMM1_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesSR) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]HADDPD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_haddpd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(1), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 5*/{ { /*src2     */ { FP64_INF(0),  FP64_INF(1),  FP64_INF(0), FP64_INF(1)  } },
            { /*src1     */ { FP64_INF(1),  FP64_INF(0),  FP64_0(0),   FP64_0(0)    } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_0(0),   FP64_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_INF(1),  FP64_INF(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_INF(1),  FP64_INF(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_QNAN(1), FP64_INF(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(0),  FP64_INF(1),  FP64_INF(0), FP64_INF(1)  } },
            { /*src1     */ { FP64_INF(1),  FP64_INF(0),  FP64_0(0),   FP64_0(0)    } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_0(0),   FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(1),  FP64_INF(1), FP64_INF(0), FP64_0(0)   } },
            { /*src1     */ { FP64_INF(0),  FP64_INF(0), FP64_INF(1), FP64_0(0)   } },
            { /* =>      */ { FP64_INF(0),  FP64_INF(1), FP64_INF(1), FP64_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_INF(0),  FP64_QNAN(1), FP64_INF(1),  FP64_QNAN(0) } },
            { /*src1     */ { FP64_INF(0),  FP64_QNAN(0), FP64_INF(1),  FP64_QNAN(0) } },
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN(1), FP64_QNAN(0), FP64_QNAN(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    /*
     * Overflow, Precision.
     */
    /*10*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_NORM_MIN(1), FP64_NORM_MIN(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_INF(1),      FP64_V(1, 0, 2)  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MIN(1), FP64_NORM_MIN(1),                                     FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(1),                                     FP64_NORM_MAX(1), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_INF(1),      FP64_V(1, FP32_FRAC_NORM_MIN, FP32_EXP_NORM_MIN + 1), FP64_INF(1),      FP64_INF(0)      } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_0(0),        FP64_0(0)        } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_0(0),        FP64_NORM_MAX(1), FP64_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_0(0),                            FP64_NORM_MIN(1) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MIN(1),                     FP64_NORM_MIN(1) } },
            { /* =>      */ { FP64_INF(0),      FP64_0(0),        FP64_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP64_NORM_MIN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_0(0),                                            FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MIN(1), FP64_NORM_MAX(0), FP64_NORM_MIN(0),                                     FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_INF(0),      FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MAX), FP64_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE },
          { { /*src2     */ { FP64_NORM_MAX(0),                     FP64_NORM_MAX(0), FP64_NORM_MAX(0),                     FP64_0(0)        } },
            { /*src1     */ { FP64_NORM_MIN(1),                     FP64_NORM_MIN(1), FP64_NORM_MIN(0),                     FP64_NORM_MIN(0) } },
            { /* =>      */ { FP64_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP64_NORM_MAX(0), FP64_V(0, 0, FP32_EXP_NORM_MIN + 1),  FP64_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_0(0),                                        FP64_NORM_MAX(0), FP64_NORM_MIN(1),                     FP64_NORM_MIN(0) } },
            { /*src1     */ { FP64_NORM_MAX(1),                                 FP64_NORM_MAX(1), FP64_NORM_MIN(1),                     FP64_NORM_MIN(1) } },
            { /* =>      */ { FP64_V(1, FP64_FRAC_NORM_MAX, FP64_EXP_NORM_MAX), FP64_NORM_MAX(0), FP64_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP64_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_NORM_MAX(0), FP64_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MIN(0),          FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_SAFE_INT_MAX(1) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_MIN(0),          FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_MIN(0)          } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_SAFE_INT_MAX(0), FP64_0(0)                 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
    /*
     * Normals.
     */
    /*19*/{ { /*src2     */ { FP64_NORM_MIN(0), FP64_NORM_MIN(1), FP64_NORM_V2(1), FP64_NORM_V2(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_V1(0), FP64_NORM_V1(1) } },
            { /* =>      */ { FP64_0(1),        FP64_0(1),        FP64_0(1),       FP64_0(1)       } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_V(0, 0xb800000000000, 0x404)/*  55*/, FP64_V(0, 0xc000000000000, 0x401)/*  7*/, FP64_V(0, 0x26580b4800000, 0x41d)/*1234567890*/, FP64_V(1, 0x26580b4800000, 0x41d)/*-1234567890*/ } },
            { /*src1     */ { FP64_V(0, 0,               0x409)/*1024*/, FP64_V(0, 0,               0x408)/*512*/, FP64_V(0, 0xd6f3458800000, 0x41c)/* 987654321*/, FP64_V(1, 0x9000000000000, 0x405)/*       -100*/ } },
            { /* =>      */ { FP64_V(0, 0x8000000000000, 0x409)/*1536*/, FP64_V(0, 0xf000000000000, 0x404)/* 62*/, FP64_V(0, 0xd6f3426800000, 0x41c)/* 987654221*/, FP64_0(0)                                        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_NORM_V2(1), FP64_NORM_V2(0) } },
            { /*src1     */ { FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/, FP64_V(0, 0xd6eca42000000, 0x419)/*      123450000.50*/, FP64_NORM_V0(1), FP64_NORM_V0(0) } },
            { /* =>      */ { FP64_V(0, 0xcf00348ec5858, 0x432)/*4072598123457580.0*/, FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_0(0),       FP64_0(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_NORM_SAFE_INT_MAX(0),                                FP64_1(1),                                                FP64_NORM_V3(1), FP64_NORM_V3(0) } },
            { /*src1     */ { FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_1(0),                                                FP64_NORM_V1(0), FP64_NORM_V1(1) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0),                                FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_0(0),       FP64_0(0)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_NORM_MIN(0), FP64_0(0),        FP64_NORM_MIN(1),                        FP64_NORM_MIN(1)                        } },
            { /*src1     */ { FP64_NORM_MIN(1), FP64_NORM_MIN(0), FP64_NORM_MIN(0),                        FP64_NORM_MIN(0)                        } },
            { /* =>      */ { FP64_0(1),        FP64_NORM_MIN(0), FP64_V(0, 0, FP32_EXP_SAFE_INT_MIN + 1), FP64_V(1, 0, FP32_EXP_SAFE_INT_MIN + 1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_V(1, 0xc122186c3cfd0, 0x42d)/*-123456789876543.25*/, FP64_NORM_MIN(1), FP64_NORM_MIN(1)                        } },
            { /*src1     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/* 121098765432102.75*/, FP64_NORM_V0(0),  FP64_NORM_V0(1)                         } },
            { /* =>      */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_0(0),                                                FP64_0(0),        FP64_V(1, 0, FP32_EXP_SAFE_INT_MIN + 1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
    /*
     * Denormals.
     */
    /*25*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1), FP64_0(0),          FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|26*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1), FP64_0(0),          FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*26|27*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1), FP64_0(0),          FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1), FP64_DENORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(1), FP64_DENORM_MIN(1) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1), FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(1),          FP64_0(1)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0),          FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_DENORM_MIN(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0), FP64_0(0),          FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out *AND* different output values */
 /*--|30*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0),          FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_DENORM_MIN(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0), FP64_0(0),          FP64_0(0) } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP64_0(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_0(0) } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*29|31*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0),          FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_DENORM_MIN(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP64_0(0), FP64_0(0),          FP64_DENORM_MIN(1), FP64_DENORM_MAX(1) } },
            { /*src1     */ { FP64_0(1), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1), FP64_0(0)          } },
            { /* =>      */ { FP64_0(0), FP64_0(0),          FP64_0(0),          FP64_0(1)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MIN(1), FP64_DENORM_MIN(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0),          FP64_0(1)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|34*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0),   FP64_DENORM_MAX(0)            } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MIN(1),   FP64_DENORM_MIN(1)            } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_V(1, 2, 0),      FP64_V(0, 0xffffffffffffe, 1) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*32|35*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0),   FP64_DENORM_MAX(0)            } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MIN(1),   FP64_DENORM_MIN(1)            } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_V(1, 2, 0),      FP64_V(0, 0xffffffffffffe, 1) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
    /*
     * Invalids.
     */
 /*33|36*/ FP64_TABLE_D1_H_PD_INVALIDS
    /** @todo Underflow; Precision; Rounding; FZ etc. */
    };

    /* Sanity-check subset for 'same register' instruction variants */
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesSR[] =
    {
    /* 0*/{ { /*src2     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_V(0, 0xd6eca42000000, 0x419)/*123450000.5*/,      FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/, FP64_V(0, 0x921fb54442d18, 0x400)/*3.141592653589793*/ } },
            { /*src1     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_V(0, 0xd6eca42000000, 0x419)/*123450000.5*/,      FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/, FP64_V(0, 0x921fb54442d18, 0x400)/*3.141592653589793*/ } },
            { /* =>      */ { FP64_V(0,0xc12235db073f0,0x42d)/*123456913326543.75*/,   FP64_V(0,0xc12235db073f0,0x42d)/*123456913326543.75*/, FP64_V(0,0xcf0033a34f33d,0x432)/*4072598000007582.5*/,   FP64_V(0,0xcf0033a34f33d,0x432)/*4072598000007582.5*/  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src2     */ { FP64_INF(0),  FP64_QNAN(1), FP64_SNAN(1),      FP64_SNAN(0)      } },
            { /*src1     */ { FP64_INF(0),  FP64_QNAN(1), FP64_SNAN(1),      FP64_SNAN(0)      } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN_V(1, 1), FP64_QNAN_V(1, 1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(haddpd_XMM1_XMM2),        255, RM_REG, T_SSE3,    XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(haddpd_XMM1_FSxBX),       255, RM_MEM, T_SSE3,    XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vhaddpd_XMM1_XMM2_XMM3),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vhaddpd_XMM1_XMM2_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vhaddpd_YMM1_YMM2_YMM3),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vhaddpd_YMM1_YMM2_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(haddpd_XMM8_XMM9),        255, RM_REG, T_SSE3,    XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(haddpd_XMM8_FSxBX),       255, RM_MEM, T_SSE3,    XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(vhaddpd_XMM8_XMM9_XMM10), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vhaddpd_XMM8_XMM9_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vhaddpd_YMM8_YMM9_YMM10), 255, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vhaddpd_YMM8_YMM9_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(haddpd_XMM1_XMM1),        255, RM_REG, T_SSE3,    XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(haddpd_XMM8_XMM8),        255, RM_REG, T_SSE3,    XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vhaddpd_YMM1_YMM1_YMM1),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vhaddpd_YMM8_YMM8_YMM8),  255, RM_REG, T_AVX_256, YMM8, YMM8, YMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vhaddpd_YMM1_YMM1_YMM2),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM2,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vhaddpd_YMM1_YMM1_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesSR) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]SUBPS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_subps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
    /*
     * Infinity.
     */
    /* 5*/{ { /*src2     */ { FP32_INF(0),  FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1) } },
            { /*src1     */ { FP32_INF(1),  FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0) } },
            { /* =>      */ { FP32_INF(1),  FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_INF(0),  FP32_0(0), FP32_0(0), FP32_INF(1),  FP32_INF(1), FP32_0(0), FP32_0(0), FP32_INF(1)  } },
            { /*src1     */ { FP32_INF(0),  FP32_0(0), FP32_0(0), FP32_INF(1),  FP32_INF(0), FP32_0(0), FP32_0(0), FP32_INF(1)  } },
            { /* =>      */ { FP32_QNAN(1), FP32_0(0), FP32_0(0), FP32_QNAN(1), FP32_INF(0), FP32_0(0), FP32_0(0), FP32_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0),  FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1)  } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0),  FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1)  } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1),  FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1),  FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN(1), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0)  } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0)  } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(1), FP32_INF(0),  FP32_0(0), FP32_INF(0),  FP32_0(0), FP32_INF(1),  FP32_INF(1),  FP32_INF(0) } },
            { /*src1     */ { FP32_INF(0), FP32_INF(0),  FP32_0(1), FP32_INF(0),  FP32_0(0), FP32_INF(0),  FP32_INF(0),  FP32_INF(1) } },
            { /* =>      */ { FP32_INF(0), FP32_QNAN(1), FP32_0(1), FP32_QNAN(1), FP32_0(0), FP32_INF(0),  FP32_INF(0),  FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
    /*
     * Overflow, Precision.
     */
    /*11*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MIN(1), FP32_0(0), FP32_NORM_MIN(1), FP32_NORM_MIN(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_INF(1),      FP32_INF(1),      FP32_0(0), FP32_0(0), FP32_INF(1),      FP32_INF(0),      FP32_0(0), FP32_0(0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_INF(1),      FP32_INF(1),      FP32_0(0), FP32_0(0), FP32_INF(1),      FP32_INF(0),      FP32_0(0), FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_INF(1),      FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1)      } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_INF(1),      FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1)      } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
#ifdef TODO_X86_MXCSR_PE_IEM_SSE /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out(SSE-128); properly set in 128:out(AVX-128) */
 /*--|16*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_0(0), FP32_NORM_MAX(0), FP32_0(0), FP32_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP32_NORM_MIN(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MIN(1),                     FP32_NORM_MIN(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MIN(0),                     FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE },
#endif /* TODO_X86_MXCSR_PE_IEM_SSE */
 /*16|17*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_0(0), FP32_NORM_MAX(0), FP32_0(0), FP32_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP32_NORM_MIN(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MIN(1),                     FP32_NORM_MIN(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MIN(0),                     FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE },
          { { /*src2     */ { FP32_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_V(1, 0, 2)  } },
            { /*src1     */ { FP32_NORM_MIN(1),                     FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_0(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MIN(1) } },
            { /* =>      */ { FP32_NORM_MIN(0),                     FP32_0(0),        FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MIN(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_V(1, 0, 2)  } },
            { /*src1     */ { FP32_NORM_MIN(1),                     FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_0(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MIN(1) } },
            { /* =>      */ { FP32_NORM_MIN(0),                     FP32_0(0),        FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MIN(0) } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_NORM_MIN(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_NORM_MIN(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_NORM_MIN(0), FP32_NORM_MAX(1), FP32_NORM_MIN(1), FP32_NORM_MIN(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0),        FP32_NORM_MAX(1), FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_NORM_MIN(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_NORM_MIN(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_NORM_MIN(0), FP32_NORM_MAX(1), FP32_NORM_MIN(1), FP32_NORM_MIN(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0),        FP32_NORM_MAX(1), FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_NORM_MIN(1),                                     FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(0) } },
            { /*src1     */ { FP32_NORM_MIN(0), FP32_NORM_MAX(1),                                     FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),        FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MAX), FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
#ifdef TODO_X86_MXCSR_PE_IEM_SSE /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out(SSE-128) (but occasionally is set???); properly set in 128:out(AVX-128) */
 /*--|23*/{ { /*src2     */ { FP32_NORM_MIN(0),                                         FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_MIN(0),                                         FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1) } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),                                FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0),                                FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1) } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_INF(1),      FP32_0(1), FP32_0(1),                 FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_INF(1),      FP32_0(1), FP32_0(1)                 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_PE },
#endif /* TODO_X86_MXCSR_PE_IEM_SSE */
 /*22|24*/{ { /*src2     */ { FP32_NORM_MIN(0),                                         FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_MIN(0),                                         FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1) } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),                                FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0),                                FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1) } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_INF(1),      FP32_0(1), FP32_0(1),                 FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_INF(1),      FP32_0(1), FP32_0(1)                 } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
    /*
     * Normals.
     */
 /*23|25*/{ { /*src2     */ { FP32_V(0, 0,        0x7d)/*0.25*/, FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_V(1, 0,        0x7e)/*-0.50*/, FP32_0(0), FP32_0(1), FP32_V(0, 0x400000, 0x7e)/* 0.75*/ } },
            { /*src1     */ { FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_0(0),        FP32_0(0), FP32_0(0), FP32_V(1, 0x400000, 0x7e)/*-0.75*/, FP32_0(0), FP32_0(1), FP32_V(0, 0,        0x7e)/* 0.50*/ } },
            { /* =>      */ { FP32_V(0, 0x400000, 0x7f)/*1.50*/, FP32_NORM_MAX(1), FP32_0(1), FP32_0(1), FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_0(1), FP32_0(1), FP32_V(1, 0,        0x7d)/*-0.25*/ } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_NORM_MAX(1), FP32_NORM_V1(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_V1(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_NORM_V1(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_V1(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),        FP32_0(0),       FP32_0(0), FP32_0(0), FP32_0(0),        FP32_0(0),       FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_V(0, 0x600000, 0x81)/* 7*/, FP32_V(0, 0x7c9000, 0x88)/*   1010.25*/, FP32_0(0), FP32_V(0, 0x5c0000, 0x84)/* 55*/, FP32_V(0, 0x2514d6, 0x93)/* 1352346.75*/, FP32_V(0, 0x534000, 0x86)/*211.25*/, FP32_0(0) } },
            { /*src1     */ { FP32_V(0, 0x669050, 0x93)/*1888778*/, FP32_V(0, 0x780000, 0x84)/*62*/, FP32_V(0, 0x253468, 0x93)/*1353357.00*/, FP32_0(0), FP32_V(1, 0x600000, 0x81)/* -7*/, FP32_V(1, 0x7c9000, 0x88)/*   -1010.25*/, FP32_1(0)                /*  1.00*/, FP32_0(0) } },
            { /* =>      */ { FP32_V(0, 0x1ea980, 0x8f)/*  81235*/, FP32_V(0, 0x5c0000, 0x84)/*55*/, FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_0(0), FP32_V(1, 0x780000, 0x84)/*-62*/, FP32_V(1, 0x253468, 0x93)/*-1353357.00*/, FP32_V(1, 0x524000, 0x86)/*210.25*/, FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_FZ },
          { { /*src2     */ { FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_V(1, 0x3c614e, 0x96)/*-12345678*/, FP32_0(0), FP32_0(0), FP32_V(0, 0x712060, 0x92)/*  987654*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_V(0, 0x3c614e, 0x96)/* 12345678*/, FP32_0(0), FP32_1(0), FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_V(0, 0x3c614e, 0x97)/*24691356*/, FP32_1(0), FP32_1(0) } },
            { /* =>      */ { FP32_V(0, 0x712060, 0x92)/*  987654*/, FP32_V(0, 0x3c614e, 0x97)/* 24691356*/, FP32_0(1), FP32_1(0), FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_1(0), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_1(0),                                                FP32_1(1),                                                FP32_1(0), FP32_1(1), FP32_1(1),                                                FP32_NORM_SAFE_INT_MAX(0),                                FP32_0(1), FP32_0(0) } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0), FP32_1(1), FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0),                                                FP32_0(1), FP32_0(0) } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_NORM_SAFE_INT_MAX(0),                                FP32_0(0), FP32_0(0), FP32_NORM_SAFE_INT_MAX(0),                                FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
          { { /*src2     */ { FP32_1(0),                                                FP32_1(0),                               FP32_0(1), FP32_1(1), FP32_0(1), FP32_1(1), FP32_1(1),                               FP32_NORM_SAFE_INT_MAX(0)               } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),                                FP32_NORM_SAFE_INT_MAX(1),               FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_NORM_SAFE_INT_MAX(0),               FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1) } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_V(1, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_0(0), FP32_1(0), FP32_0(0), FP32_1(0), FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_1(0)                               } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_0(0),        FP32_NORM_MIN(0), FP32_NORM_MIN(0),                        FP32_NORM_MIN(0), FP32_0(1),        FP32_NORM_MIN(1), FP32_NORM_MIN(1) } },
            { /*src1     */ { FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_0(0),        FP32_V(0, 0, FP32_EXP_SAFE_INT_MIN + 1), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_0(0),        FP32_NORM_MIN(1) } },
            { /* =>      */ { FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(0),                        FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_V(0, 0x600000, 0x7e)/*      0.875*/, FP32_V(0, 0x3ce348, 0x90)/*193421.125*/, FP32_V(1, 0x0a19f0, 0x8f)/*-70707.875*/, FP32_NORM_MIN(1),                        FP32_NORM_MIN(0),                        FP32_V(0, 0x00c6d3, 0x94)/*2109876.75*/, FP32_V(0, 0x316740, 0x8e)/* 45415.25*/, FP32_V(0, 0x600000, 0x7e)/*       0.875*/ } },
            { /*src1     */ { FP32_V(0, 0x769b5e, 0x92)/*1010101.875*/, FP32_V(0, 0x10c030, 0x92)/*592899.000*/, FP32_V(0, 0x52e0b4, 0x92)/*863755.250*/, FP32_NORM_MIN(0),                        FP32_NORM_MIN(1),                        FP32_V(0, 0x4c20f0, 0x94)/*3344444.00*/, FP32_V(0, 0x792318, 0x91)/*510232.75*/, FP32_V(1, 0x769b50, 0x92)/*-1010101.000*/ } },
            { /* =>      */ { FP32_V(0, 0x769b50, 0x92)/*1010101.000*/, FP32_V(0, 0x430ebc, 0x91)/*399477.875*/, FP32_V(0, 0x6423f2, 0x92)/*934463.125*/, FP32_V(0, 0, FP32_EXP_SAFE_INT_MIN + 1), FP32_V(1, 0, FP32_EXP_SAFE_INT_MIN + 1), FP32_V(0, 0x16b43a, 0x93)/*1234567.25*/, FP32_V(0, 0x62f630, 0x91)/*464817.50*/, FP32_V(1, 0x769b5e, 0x92)/*-1010101.875*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Denormals.
     */
 /*31|33*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out *AND* different output values */
 /*--|34*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*32|35*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|37*/{ { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*34|38*/{ { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out *AND* different output values */
 /*--|41*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*37|42*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /* =>      */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|44*/{ { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /* =>      */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*39|45*/{ { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /* =>      */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          /** @todo More denormals. */
    /*
     * Invalids.
     */
 /*41|47*/ FP32_TABLE_D1_PS_INVALIDS
    /** @todo Underflow; Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(subps_XMM1_XMM2),        255, RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(subps_XMM1_FSxBX),       255, RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vsubps_XMM1_XMM2_XMM3),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsubps_XMM1_XMM2_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vsubps_YMM1_YMM2_YMM3),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsubps_YMM1_YMM2_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(subps_XMM8_XMM9),        255, RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(subps_XMM8_FSxBX),       255, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vsubps_XMM8_XMM9_XMM10), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsubps_XMM8_XMM9_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsubps_YMM8_YMM9_YMM10), 255, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsubps_YMM8_YMM9_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]SUBPD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_subpd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(1) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 6*/{ { /*src2     */ { FP64_INF(0), FP64_0(0), FP64_0(0), FP64_INF(1) } },
            { /*src1     */ { FP64_INF(1), FP64_0(0), FP64_0(0), FP64_INF(0) } },
            { /* =>      */ { FP64_INF(1), FP64_0(0), FP64_0(0), FP64_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_INF(0),  FP64_INF(1),  FP64_INF(1), FP64_INF(1)  } },
            { /*src1     */ { FP64_INF(0),  FP64_INF(1),  FP64_INF(0), FP64_INF(1)  } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_INF(0), FP64_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(0),  FP64_INF(0), FP64_INF(1), FP64_INF(1)  } },
            { /*src1     */ { FP64_INF(0),  FP64_INF(1), FP64_INF(0), FP64_INF(1)  } },
            { /* =>      */ { FP64_QNAN(1), FP64_INF(1), FP64_INF(0), FP64_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_INF(1), FP64_INF(1)  } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_INF(0), FP64_INF(1)  } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_INF(0), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_INF(0)  } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_INF(0)  } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(1), FP64_INF(0),  FP64_INF(1), FP64_INF(0) } },
            { /*src1     */ { FP64_INF(0), FP64_INF(0),  FP64_INF(0), FP64_INF(1) } },
            { /* =>      */ { FP64_INF(0), FP64_QNAN(1), FP64_INF(0), FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
    /*
     * Overflow, Precision.
     */
    /*12*/{ { /*src2     */ { FP64_NORM_MIN(1), FP64_0(0), FP64_NORM_MIN(1), FP64_NORM_MIN(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_0(0), FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_0(0), FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_NORM_MIN(1), FP64_NORM_MIN(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_PM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_PM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_PM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_PM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_PM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_PM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_0(0), FP64_0(0), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_0(0), FP64_0(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_INF(1),      FP64_0(0), FP64_0(0), FP64_INF(1)      } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MIN(1), FP64_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP64_NORM_MIN(1) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_NORM_MIN(1),                     FP64_NORM_MIN(1) } },
            { /* =>      */ { FP64_INF(1),      FP64_NORM_MAX(0), FP64_NORM_MIN(0),                     FP64_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE },
          { { /*src2     */ { FP64_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_V(1, 0, 2)  } },
            { /*src1     */ { FP64_NORM_MIN(1),                     FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MIN(1) } },
            { /* =>      */ { FP64_NORM_MIN(0),                     FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MIN(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_NORM_MIN(0), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_NORM_MIN(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0),        FP64_NORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MIN(0),                FP64_NORM_MIN(0),                FP64_NORM_MIN(1),                FP64_NORM_MIN(0)                } },
            { /*src1     */ { FP64_NORM_MAX(0),                FP64_NORM_MAX(0),                FP64_NORM_MAX(1),                FP64_NORM_MAX(0)                } },
            { /* =>      */ { FP64_V(0,0xffffffffffffe,0x7fe), FP64_V(0,0xffffffffffffe,0x7fe), FP64_V(1,0xffffffffffffe,0x7fe), FP64_V(0,0xffffffffffffe,0x7fe) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
          { { /*src2     */ { FP64_NORM_MIN(0),                FP64_NORM_MAX(0), FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(1) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),       FP64_NORM_MAX(1), FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(1) } },
            { /* =>      */ { FP64_V(0,0xffffffffffffe,0x433), FP64_NORM_MAX(1), FP64_0(0),                 FP64_0(0)                 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE },
    /*
     * Normals.
     */
    /*22*/{ { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_V1(1), FP64_NORM_MAX(1), FP64_NORM_V1(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_V1(1), FP64_NORM_MAX(1), FP64_NORM_V1(0) } },
            { /* =>      */ { FP64_0(0),        FP64_0(0),       FP64_0(0),        FP64_0(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_V(0, 0,               0x409)/*1024*/, FP64_V(0, 0xb800000000000, 0x404)/*55*/, FP64_V(1, 0xc000000000000, 0x401)/* 7*/, FP64_V(0, 0x8000000000000, 0x409)/*1536*/ } },
            { /*src1     */ { FP64_V(0, 0x8000000000000, 0x409)/*1536*/, FP64_V(1, 0xc000000000000, 0x401)/* 7*/, FP64_V(0, 0xb800000000000, 0x404)/*55*/, FP64_V(0, 0,               0x409)/*1024*/ } },
            { /* =>      */ { FP64_V(0, 0,               0x408)/* 512*/, FP64_V(1, 0xf000000000000, 0x404)/*62*/, FP64_V(0, 0xf000000000000, 0x404)/*62*/, FP64_V(1, 0,               0x408)/* 512*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_V(0, 0x26580b4800000, 0x41d)/*1234567890*/, FP64_V(0, 0x9000000000000, 0x405)/*      100*/, FP64_0(0), FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/ } },
            { /*src1     */ { FP64_V(0, 0x26580b4800000, 0x41d)/*1234567890*/, FP64_V(0, 0xd6f3458800000, 0x41c)/*987654321*/, FP64_0(0), FP64_V(0, 0xcf00348ec5858, 0x432)/*4072598123457580.0*/ } },
            { /* =>      */ { FP64_0(0),                                       FP64_V(0, 0xd6f3426800000, 0x41c)/*987654221*/, FP64_0(0), FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_NORM_SAFE_INT_MAX(0),                                FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                                FP64_1(0),                                                FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_1(0),                                                FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_1(0),                                                FP64_1(1),                                                FP64_1(1),                                                FP64_NORM_SAFE_INT_MAX(0)                                } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                                FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_1(0)                                                } },
            { /* =>      */ { FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_NORM_SAFE_INT_MAX(0),                                FP64_NORM_SAFE_INT_MAX(0),                                FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_NORM_SAFE_INT_MAX(1), FP64_0(0),        FP64_NORM_MIN(0), FP64_NORM_MIN(1)                        } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_MIN(1), FP64_0(0),        FP64_NORM_MIN(0)                        } },
            { /* =>      */ { FP64_0(0),                 FP64_NORM_MIN(1), FP64_NORM_MIN(1), FP64_V(0, 0, FP32_EXP_SAFE_INT_MIN + 1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_0(0), FP64_0(1), FP64_NORM_MIN(0)                        } },
            { /*src1     */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_0(0), FP64_0(1), FP64_NORM_MIN(1)                        } },
            { /* =>      */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_0(1), FP64_0(1), FP64_V(1, 0, FP32_EXP_SAFE_INT_MIN + 1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Denormals.
     */
    /*29*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|30*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*30|31*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP64_0(0), FP64_0(0),          FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0),          FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
    /** @todo More denormals. */
    /*
     * Invalids.
     */
 /*33|34*/ FP64_TABLE_D1_PD_INVALIDS
    /** @todo Underflow; Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(subpd_XMM1_XMM2),        255,         RM_REG, T_SSE2,    XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(subpd_XMM1_FSxBX),       255,         RM_MEM, T_SSE2,    XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vsubpd_XMM1_XMM2_XMM3),  X86_XCPT_GP, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsubpd_XMM1_XMM2_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vsubpd_YMM1_YMM2_YMM3),  X86_XCPT_GP, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsubpd_YMM1_YMM2_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(subpd_XMM8_XMM9),        255,         RM_REG, T_SSE2,    XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(subpd_XMM8_FSxBX),       255,         RM_MEM, T_SSE2,    XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vsubpd_XMM8_XMM9_XMM10), X86_XCPT_GP, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsubpd_XMM8_XMM9_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsubpd_YMM8_YMM9_YMM10), X86_XCPT_GP, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsubpd_YMM8_YMM9_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]SUBSS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_subss(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_0(0), FP32_0_x7(0) } },
            { /* =>      */ { FP32_0(0), FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_0(1), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 6*/{ { /*src2     */ { FP32_INF(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_INF(1), FP32_0_x7(0) } },
            { /* =>      */ { FP32_INF(1), FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0),  FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_INF(0),  FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1),  FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_INF(1),  FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_INF(1), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
    /*
     * Overflow, Precision.
     */
    /*12*/{ { /*src2     */ { FP32_0(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_0(0), FP32_0_x7(0) } },
            { /* =>      */ { FP32_0(0), FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_NORM_MAX(1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_NORM_MAX(1), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(1),      FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_INF(1),      FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(1),      FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(1),      FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(1), FP32_0_x7(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_0_x7(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_0_x7(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_0_x7(0) } },
            { /* =>      */ { FP32_NORM_MAX(1), FP32_0_x7(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_0_x7(0) } },
            { /* =>      */ { FP32_NORM_MAX(1), FP32_0_x7(0) } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(1),                                     FP32_0_x7(0) } },
            { /*src1     */ { FP32_NORM_MAX(1),                                     FP32_0_x7(0) } },
            { /* =>      */ { FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MAX), FP32_0_x7(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(0),                                         FP32_0_x7(0) } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),                                FP32_0_x7(0) } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_0_x7(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(1),                                         FP32_0_x7(0) } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(1),                                FP32_0_x7(0) } },
            { /* =>      */ { FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_0_x7(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*25*/{ { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_V(0, 0,        0x7d)/*0.25*/, FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_V(1, 0x400000, 0x7f)/*1.50*/, FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_0(0),        FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_V(0, 0x669050, 0x93)/*1888778*/, FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(0, 0x1ea980, 0x8f)/*  81235*/, FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_V(0, 0x253468, 0x93)/*1353357.00*/, FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0, 0x7c9000, 0x88)/*   1010.25*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x712060, 0x92)/*  987654*/, FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_1(0),                                                FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),                                FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(1, 0x600000, 0x7e)/*      -0.875*/, FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_V(0, 0x769b50, 0x92)/* 1010101.000*/, FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(0, 0x769b5e, 0x92)/* 1010101.875*/, FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_NORM_MIN(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),        FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*33*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out *AND* different output values */
 /*--|34*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V3 } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V3 } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*34|35*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),          FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /** @todo More denormals. */
    /*
     * Invalids.
     */
 /*37|38*/ FP32_TABLE_D1_SS_INVALIDS
    /** @todo Underflow; Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(subss_XMM1_XMM2),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(subss_XMM1_FSxBX),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vsubss_XMM1_XMM2_XMM3),  255,         RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsubss_XMM1_XMM2_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(subss_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(subss_XMM8_FSxBX),       X86_XCPT_AC, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vsubss_XMM8_XMM9_XMM10), 255,         RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsubss_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]SUBSD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_subsd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_0(1), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V3(1), FP64_RAND_V1(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V3(1), FP64_RAND_V1(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V3(1), FP64_RAND_V0(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(1), FP64_RAND_V3(1), FP64_RAND_V0(0), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 6*/{ { /*src2     */ { FP64_INF(1),  FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_INF(1),  FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1),  FP64_RAND_V1(0), FP64_RAND_V2(0), FP32_RAND_V3(1) } },
            { /*src1     */ { FP64_INF(1),  FP64_RAND_V0(0), FP64_RAND_V1(1), FP32_RAND_V1(1) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V0(0), FP64_RAND_V1(1), FP32_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1),  FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_INF(1),  FP64_RAND_V1(1), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V1(1), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1),  FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_INF(1),  FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1),  FP64_RAND_V0(0), FP64_RAND_V0(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(1),  FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1),  FP64_0(0), FP64_0(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_INF(1),  FP64_0(1), FP64_0(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_QNAN(1), FP64_0(1), FP64_0(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_0(0),       FP64_0(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_INF(1), FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_INF(1), FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_RAND_V1(0), FP64_RAND_V3(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Overflow, Precision.
     */
    /*14*/{ { /*src2     */ { FP64_NORM_MIN(1), FP64_RAND_V1(0), FP64_RAND_V3(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(0), FP64_RAND_V0(0), FP64_RAND_V0(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_0(0), FP64_0(0), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_0(0), FP64_0(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_INF(1),      FP64_0(0), FP64_0(0), FP64_INF(1)      } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_0(0), FP64_0(0), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_0(0), FP64_0(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_INF(1),      FP64_0(0), FP64_0(0), FP64_INF(1)      } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MIN(1), FP64_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP64_NORM_MIN(1) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_NORM_MIN(1),                     FP64_NORM_MIN(1) } },
            { /* =>      */ { FP64_INF(1),      FP64_NORM_MAX(0), FP64_NORM_MIN(0),                     FP64_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MIN(1), FP64_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP64_NORM_MIN(1) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_NORM_MIN(1),                     FP64_NORM_MIN(1) } },
            { /* =>      */ { FP64_INF(1),      FP64_NORM_MAX(0), FP64_NORM_MIN(0),                     FP64_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(1), FP64_RAND_V0(0), FP64_RAND_V0(0), FP64_RAND_V0(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(1), FP64_RAND_V0(0), FP64_RAND_V0(0), FP64_RAND_V0(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_NORM_MIN(0), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_NORM_MIN(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0),        FP64_NORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(0),                                     FP64_NORM_MIN(0), FP64_NORM_MIN(1), FP64_NORM_MIN(0) } },
            { /*src1     */ { FP64_NORM_MAX(0),                                     FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MAX), FP64_NORM_MAX(0), FP64_0(0),        FP64_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(0),                                         FP64_NORM_MAX(0), FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(1) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                                FP64_NORM_MAX(1), FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(1) } },
            { /* =>      */ { FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_NORM_MAX(1), FP64_0(0),                 FP64_0(0)                 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*27*/{ { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_V1(1), FP64_NORM_MAX(0), FP64_NORM_V2(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_V1(1), FP64_NORM_MAX(1), FP64_NORM_V1(0) } },
            { /* =>      */ { FP64_0(0),        FP64_NORM_V1(1), FP64_NORM_MAX(1), FP64_NORM_V1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(0), FP64_NORM_V2(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_NORM_MIN(0), FP64_NORM_V1(1), FP64_RAND_V0(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(0),        FP64_NORM_V1(1), FP64_RAND_V0(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0,               0x409)/*1024*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x8000000000000, 0x409)/*1536*/, FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_V(0, 0,               0x408)/* 512*/, FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xc000000000000, 0x401)/* 7*/, FP64_RAND_V2(0), FP64_RAND_V2(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_V(0, 0xf000000000000, 0x404)/*62*/, FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_V(0, 0xb800000000000, 0x404)/*55*/, FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0x26580b4800000, 0x41d)/*1234567890*/, FP64_RAND_V3(0), FP64_RAND_V0(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x26580b4800000, 0x41d)/*1234567890*/, FP64_RAND_V3(1), FP64_RAND_V1(0), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_0(0),                                       FP64_RAND_V3(1), FP64_RAND_V1(0), FP64_RAND_V2(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0x9000000000000, 0x405)/*       100*/, FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_V(1, 0xd6f3426800000, 0x41c)/*-987654221*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_V(1, 0xd6f3458800000, 0x41c)/*-987654321*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/, FP64_RAND_V0(0), FP64_RAND_V0(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_V(0, 0xcf00348ec5858, 0x432)/*4072598123457580.0*/, FP64_RAND_V1(1), FP64_RAND_V1(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/, FP64_RAND_V1(1), FP64_RAND_V1(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                                FP64_RAND_V0(1), FP64_RAND_V3(1), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_1(0),                                                FP64_RAND_V0(1), FP64_RAND_V3(1), FP64_RAND_V2(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_1(0),                                                FP64_RAND_V3(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                                FP64_RAND_V1(0), FP64_RAND_V0(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_RAND_V1(0), FP64_RAND_V0(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_SAFE_INT_MAX(1), FP64_RAND_V0(0), FP64_RAND_V0(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(1), FP64_RAND_V1(1), FP64_RAND_V1(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_0(0),                 FP64_RAND_V1(1), FP64_RAND_V1(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_RAND_V0(0), FP64_RAND_V0(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_RAND_V1(1), FP64_RAND_V1(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_RAND_V1(1), FP64_RAND_V1(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*38*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out */
 /*--|39*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*39|40*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),          FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(1), FP64_0(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_RAND_V1(0), FP64_RAND_V0(0), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_0(0),          FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          /** @todo More Denormals. */
    /*
     * Invalids.
     */
 /*42|43*/ FP64_TABLE_D1_SD_INVALIDS
    /** @todo Underflow; Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(subsd_XMM1_XMM2),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(subsd_XMM1_FSxBX),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vsubsd_XMM1_XMM2_XMM3),  255,         RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsubsd_XMM1_XMM2_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(subsd_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(subsd_XMM8_FSxBX),       X86_XCPT_AC, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vsubsd_XMM8_XMM9_XMM10), 255,         RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsubsd_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]HSUBPS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_hsubps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /* =>      */ { FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 5*/{ { /*src2     */ { FP32_INF(1),  FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(0),  FP32_INF(1), FP32_INF(0), FP32_INF(1)  } },
            { /*src1     */ { FP32_INF(0),  FP32_INF(1), FP32_0(0),   FP32_0(0),   FP32_INF(0),  FP32_INF(1), FP32_0(0),   FP32_0(0)    } },
            { /* =>      */ { FP32_INF(0),  FP32_0(0),   FP32_INF(1), FP32_INF(0), FP32_INF(0),  FP32_0(0),   FP32_INF(0), FP32_INF(0)  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1), FP32_INF(1),  FP32_0(0),    FP32_0(0)   } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1), FP32_INF(0),  FP32_INF(0),  FP32_INF(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1), FP32_QNAN(1), FP32_QNAN(1), FP32_0(0)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(0),  FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1),  FP32_0(0),    FP32_0(0)   } },
            { /*src1     */ { FP32_INF(1),  FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_INF(1), FP32_INF(0),  FP32_INF(0),  FP32_INF(0) } },
            { /* =>      */ { FP32_INF(1), FP32_0(0),    FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_QNAN(1), FP32_QNAN(1), FP32_0(0)   } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(1),  FP32_INF(1), FP32_INF(0),  FP32_0(0),   FP32_INF(1), FP32_INF(1), FP32_INF(0),  FP32_0(0)   } },
            { /*src1     */ { FP32_INF(0),  FP32_INF(0), FP32_INF(1),  FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),    FP32_0(0)   } },
            { /* =>      */ { FP32_QNAN(1), FP32_INF(1), FP32_QNAN(1), FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_QNAN(1), FP32_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(0),  FP32_QNAN(1), FP32_INF(1),  FP32_QNAN(0), FP32_INF(1),  FP32_INF(1),  FP32_0(0),    FP32_0(0)   } },
            { /*src1     */ { FP32_INF(0),  FP32_QNAN(0), FP32_INF(1),  FP32_QNAN(0), FP32_INF(1),  FP32_QNAN(1), FP32_INF(0),  FP32_INF(0) } },
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN(0), FP32_QNAN(1), FP32_QNAN(0), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_0(0)   } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
    /*
     * Overflow, Precision.
     */
    /*10*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MIN(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MIN(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0),        FP32_NORM_MAX(1), FP32_0(0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MAX(0), FP32_NORM_MIN(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MIN(1), FP32_NORM_MAX(1), FP32_NORM_MIN(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src2     */ { FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_NORM_MIN(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_NORM_MAX(1), FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src2     */ { FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0), FP32_NORM_MAX(1) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(1),        FP32_0(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0),        FP32_0(0),        FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0), FP32_NORM_MAX(1) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(1),        FP32_0(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0),        FP32_0(0),        FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0),        FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),        FP32_0(0),        FP32_INF(0),      FP32_NORM_MIN(0), FP32_NORM_MAX(1), FP32_INF(0),      FP32_0(0),        FP32_NORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0),        FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),        FP32_0(0),        FP32_INF(0),      FP32_NORM_MIN(0), FP32_NORM_MAX(1), FP32_INF(0),      FP32_0(0),        FP32_NORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_OM | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_OM | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_OM | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0),        FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),        FP32_0(0),        FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_0(0),        FP32_NORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0),        FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),        FP32_0(0),        FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_0(0),        FP32_NORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_OM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_OM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_OM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),        FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO | X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OM,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
    /*
     * Normals.
     */
    /*21*/{ { /*src2     */ { FP32_V(0, 0,        0x7d)/*0.25*/, FP32_V(0, 0x400000, 0x7e)/*0.75*/, FP32_NORM_MAX(0),            FP32_0(0),        FP32_0(0),                          FP32_NORM_MAX(0),            FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_V(0, 0,        0x7d)/*0.25*/ } },
            { /*src1     */ { FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_V(0, 0,        0x7d)/*0.25*/, FP32_NORM_MAX(1),            FP32_0(0),        FP32_V(1, 0,        0x7e)/*-0.50*/, FP32_V(0, 0, 0x7d)/*-0.25*/, FP32_0(0),                         FP32_0(0)                         } },
            { /* =>      */ { FP32_V(0, 0x400000, 0x7f)/*1.50*/, FP32_NORM_MAX(1),                  FP32_V(1, 0, 0x7e)/*-0.50*/, FP32_NORM_MAX(0), FP32_V(1, 0x400000, 0x7e)/*-0.75*/, FP32_0(0),                   FP32_NORM_MAX(1),                  FP32_V(0, 0x400000, 0x7f)/*1.50*/ } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_V(0, 0,        0x7d)/*0.25*/, FP32_V(0, 0x400000, 0x7e)/*0.75*/, FP32_NORM_MAX(0),            FP32_0(0),        FP32_0(0),                          FP32_NORM_MAX(0),            FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_V(0, 0,        0x7d)/*0.25*/ } },
            { /*src1     */ { FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_V(0, 0,        0x7d)/*0.25*/, FP32_NORM_MAX(1),            FP32_0(0),        FP32_V(1, 0,        0x7e)/*-0.50*/, FP32_V(0, 0, 0x7d)/*-0.25*/, FP32_0(0),                         FP32_0(0)                         } },
            { /* =>      */ { FP32_V(0, 0x400000, 0x7f)/*1.50*/, FP32_NORM_MAX(1),                  FP32_V(1, 0, 0x7e)/*-0.50*/, FP32_NORM_MAX(0), FP32_V(1, 0x400000, 0x7e)/*-0.75*/, FP32_0(1),                   FP32_NORM_MAX(1),                  FP32_V(0, 0x400000, 0x7f)/*1.50*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_NORM_V1(0),  FP32_NORM_V1(0),  FP32_NORM_V4(0),  FP32_NORM_V4(0),  FP32_NORM_V1(0),  FP32_NORM_V1(0),  FP32_NORM_V2(0), FP32_NORM_V2(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_NORM_V3(0), FP32_NORM_V3(0) } },
            { /* =>      */ { FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),       FP32_0(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_V3(0),  FP32_NORM_V3(0),  FP32_NORM_V4(0),  FP32_NORM_V4(0),  FP32_NORM_V6(0),  FP32_NORM_V6(0),  FP32_NORM_V7(0), FP32_NORM_V7(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_NORM_V5(0), FP32_NORM_V5(0) } },
            { /* =>      */ { FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_0(0),       FP32_0(0)       } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_V(1, 0x5c0000, 0x84)/*    -55*/, FP32_V(0, 0x600000, 0x81)/*      7.00*/, FP32_0(0),                            FP32_V(0, 0x5c0000, 0x84)/*  55.00*/, FP32_V(0, 0x253468, 0x93)/*1353357*/, FP32_V(0, 0x7c9000, 0x88)/*1010.25*/, FP32_0(0),                               FP32_V(0, 0x534000, 0x86)/* 211.25*/ } },
            { /*src1     */ { FP32_V(0, 0x669050, 0x93)/*1888778*/, FP32_V(0, 0x1ea980, 0x8f)/*  81235.00*/, FP32_V(0, 0x253468, 0x93)/*1353357*/, FP32_V(0, 0x7c9000, 0x88)/*1010.25*/, FP32_V(0, 0x780000, 0x84)/*     62*/, FP32_V(0, 0x600000, 0x81)/*7*/,       FP32_V(0, 0x534000, 0x86)/*    211.25*/, FP32_1(0)                            } },
            { /* =>      */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_V(1, 0x780000, 0x84)/*    -62*/, FP32_V(1, 0x5c0000, 0x84)/* -55.00*/, FP32_V(0, 0x5c0000, 0x84)/*     55*/, FP32_V(0, 0x524000, 0x86)/*210.25*/,  FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_V(1, 0x534000, 0x86)/*-211.25*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_V(0, 0x3c614e, 0x97)/*24691356*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_0(0),                             FP32_NORM_V1(0), FP32_V(0, 0x3c614e, 0x97)/*24691356*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_2(0),                             FP32_1(0) } },
            { /*src1     */ { FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_V(0, 0x712060, 0x92)/*  987654*/, FP32_NORM_V5(0),                       FP32_0(0),       FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_V(0, 0x712060, 0x92)/*  987654*/, FP32_0(0),                             FP32_1(0) } },
            { /* =>      */ { FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_NORM_V5(0),                       FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_NORM_V1(1), FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_1(1),                             FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_V(0, 0x6423f2, 0x92)/* 934463.125*/, FP32_V(0, 0x0a19f0, 0x8f)/* 70707.875*/, FP32_NORM_MIN(1),                        FP32_NORM_MIN(1),                        FP32_1(1),                                FP32_1(0),                               FP32_V(0, 0x769b5e, 0x92)/*1010101.875*/, FP32_V(0, 0x600000, 0x7e)/*     0.875*/ } },
            { /*src1     */ { FP32_V(0, 0x769b5e, 0x92)/*1010101.875*/, FP32_V(0, 0x600000, 0x7e)/*     0.875*/, FP32_V(0, 0x10c030, 0x92)/*592899.000*/, FP32_V(0, 0x3ce348, 0x90)/*193421.125*/, FP32_V(1, 0x16b43a, 0x93)/*-1234567.25*/, FP32_V(0, 0x00c6d3, 0x94)/*2109876.75*/, FP32_V(0, 0x792318, 0x91)/*510232.750*/,  FP32_V(0, 0x316740, 0x8e)/*  45415.250*/ } },
            { /* =>      */ { FP32_V(0, 0x769b50, 0x92)/*1010101.000*/, FP32_V(0, 0x430ebc, 0x91)/*399477.875*/, FP32_V(0, 0x52e0b4, 0x92)/*863755.250*/, FP32_0(0),                               FP32_V(1, 0x4c20f0, 0x94)/*-3344444.00*/, FP32_V(0, 0x62f630, 0x91)/* 464817.50*/, FP32_2(1),                                FP32_V(0, 0x769b50, 0x92)/*1010101.000*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_2(0),                                                FP32_1(0),                                                FP32_1(1),                 FP32_1(0), FP32_2(0),                                                FP32_1(0),                                                FP32_1(0),                 FP32_1(0) } },
            { /*src1     */ { FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0),                                                FP32_NORM_SAFE_INT_MAX(0), FP32_1(0), FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0),                                                FP32_NORM_SAFE_INT_MAX(0), FP32_1(0) } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(1),                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0),                 FP32_2(1), FP32_NORM_SAFE_INT_MAX(1),                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0),                 FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_2(0),                                                FP32_1(0),                                                FP32_1(1),                 FP32_1(0), FP32_2(0),                                                FP32_1(0),                                                FP32_1(0),                 FP32_1(0) } },
            { /*src1     */ { FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0),                                                FP32_NORM_SAFE_INT_MAX(0), FP32_1(0), FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0),                                                FP32_NORM_SAFE_INT_MAX(0), FP32_1(0) } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(1),                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0),                 FP32_2(1), FP32_NORM_SAFE_INT_MAX(1),                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0),                 FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0),               FP32_0(0),                 FP32_1(1),                               FP32_0(0), FP32_NORM_SAFE_INT_MAX(1),                FP32_0(0),                 FP32_1(1),                               FP32_0(0) } },
            { /*src1     */ { FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_1(0),                 FP32_V(1, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_1(1), FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1),  FP32_1(0),                 FP32_V(1, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_1(1) } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0),               FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0),               FP32_1(1), FP32_NORM_SAFE_INT_MAX(0),                FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(1),               FP32_1(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
    /*
     * Denormals.
     */
    /*31*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out *AND* different output values */
 /*--|32*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0),          FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_0(0)          } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*32|33*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0),          FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out *AND* different output values */
 /*--|37*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP32_0(0),          FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*36|38*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0),          FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /* =>      */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          /** @todo More Denormals. */
    /*
     * Invalids.
     */
 /*39|41*/ FP32_TABLE_D1_H_PS_INVALIDS
    /** @todo Underflow; Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(hsubps_XMM1_XMM2),        255, RM_REG, T_SSE3,    XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(hsubps_XMM1_FSxBX),       255, RM_MEM, T_SSE3,    XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vhsubps_XMM1_XMM2_XMM3),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vhsubps_XMM1_XMM2_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vhsubps_YMM1_YMM2_YMM3),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vhsubps_YMM1_YMM2_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(hsubps_XMM8_XMM9),        255, RM_REG, T_SSE3,    XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(hsubps_XMM8_FSxBX),       255, RM_MEM, T_SSE3,    XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vhsubps_XMM8_XMM9_XMM10), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vhsubps_XMM8_XMM9_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vhsubps_YMM8_YMM9_YMM10), 255, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vhsubps_YMM8_YMM9_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]HSUBPD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_hsubpd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(1), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(1), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 7*/{ { /*src2     */ { FP64_INF(0), FP64_INF(1), FP64_INF(0), FP64_INF(1) } },
            { /*src1     */ { FP64_INF(1), FP64_INF(0), FP64_0(0),   FP64_0(0)   } },
            { /* =>      */ { FP64_INF(1), FP64_INF(0), FP64_0(0),   FP64_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_INF(1), FP64_INF(1)  } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_INF(1), FP64_INF(0)  } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_INF(1), FP64_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(0), FP64_INF(1), FP64_INF(0), FP64_INF(1) } },
            { /*src1     */ { FP64_INF(1), FP64_INF(0), FP64_0(0),   FP64_0(0)   } },
            { /* =>      */ { FP64_INF(1), FP64_INF(0), FP64_0(0),   FP64_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
          { { /*src2     */ { FP64_INF(1),  FP64_INF(1),  FP64_INF(0), FP64_0(0)   } },
            { /*src1     */ { FP64_INF(0),  FP64_INF(0),  FP64_INF(1), FP64_0(0)   } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_INF(1), FP64_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(0),  FP64_QNAN(1), FP64_INF(1),  FP64_QNAN(0) } },
            { /*src1     */ { FP64_INF(0),  FP64_QNAN(0), FP64_INF(1),  FP64_QNAN(0) } },
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN(1), FP64_QNAN(0), FP64_QNAN(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
    /*
     * Overflow, Precision.
     */
    /*12*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_NORM_MIN(0), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_NORM_MIN(1), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src2     */ { FP64_NORM_MIN(1), FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(1) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MIN(0), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_INF(0),      FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_0(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE },
          { { /*src2     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_2(0),        FP64_1(0)        } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),        FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_1(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(0), FP64_2(0),        FP64_1(0)        } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),        FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_1(0)        } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_0(0),        FP64_NORM_MIN(1) } },
            { /*src1     */ { FP64_0(0),        FP64_NORM_MAX(0), FP64_NORM_MIN(1), FP64_NORM_MIN(0) } },
            { /* =>      */ { FP64_NORM_MAX(1), FP64_INF(0),      FP64_V(1, 0, FP64_EXP_NORM_MIN + 1),  FP64_NORM_MIN(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_0(0),        FP64_NORM_MIN(1) } },
            { /*src1     */ { FP64_0(0),        FP64_NORM_MAX(0), FP64_NORM_MIN(1), FP64_NORM_MIN(0) } },
            { /* =>      */ { FP64_NORM_MAX(1), FP64_INF(0),      FP64_V(1, 0, FP64_EXP_NORM_MIN + 1),  FP64_NORM_MIN(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_OM | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_OM | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_OM | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_0(0),        FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MIN(1), FP64_NORM_MAX(0), FP64_NORM_MIN(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_NORM_MAX(1), FP64_0(0),        FP64_INF(0),      FP64_NORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MIN(1),                                     FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MIN(1), FP64_NORM_MIN(1), FP64_NORM_MIN(0),                                     FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),        FP64_0(0),        FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MAX), FP64_NORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
          { { /*src2     */ { FP64_0(0),        FP64_NORM_MAX(0), FP64_NORM_MIN(1), FP64_NORM_MIN(0)                    } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MIN(1), FP64_1(1)                           } },
            { /* =>      */ { FP64_0(0),        FP64_NORM_MAX(1), FP64_1(0),        FP64_V(1, 0, FP64_EXP_NORM_MIN + 1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src2     */ { FP64_NORM_MIN(1),                                         FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_SAFE_INT_MAX(0),                                FP64_NORM_SAFE_INT_MAX(0) } },
            { /*src1     */ { FP64_NORM_MIN(0),                                         FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_SAFE_INT_MAX(0),                                FP64_NORM_MIN(0)          } },
            { /* =>      */ { FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_NORM_SAFE_INT_MAX(1), FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_0(0)                 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
          { { /*src2     */ { FP64_NORM_MIN(1),                                         FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_SAFE_INT_MAX(0) } },
            { /*src1     */ { FP64_NORM_MIN(0),                                         FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_MIN(0)          } },
            { /* =>      */ { FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(0), FP64_0(0)                 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_PE },
    /*
     * Denormals.
     */
    /*23*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1), FP64_0(0),          FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out *AND* different output values */
 /*--|24*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1), FP64_0(0),          FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*24|25*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1), FP64_0(0),          FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(1), FP64_DENORM_MIN(1) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1), FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
 /*26|27*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0), FP64_0(0),          FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0), FP64_DENORM_MIN(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0), FP64_0(0),          FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out *AND* different output values */
 /*--|28*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_0(0),          FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0),          FP64_DENORM_MIN(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0) } } /* result on HW (i7-10700) */,
    // IEM: { /* =>      */ { FP64_0(0),          FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_0(0) } } /* result on IEM */,
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*27|29*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_0(0),          FP64_0(0) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0),          FP64_DENORM_MIN(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0),          FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP64_0(0), FP64_0(0),          FP64_DENORM_MIN(1), FP64_DENORM_MAX(1) } },
            { /*src1     */ { FP64_0(1), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1), FP64_0(0)          } },
            { /* =>      */ { FP64_0(1), FP64_0(0),          FP64_0(1),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MIN(1), FP64_DENORM_MIN(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(1), FP64_DENORM_MAX(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MIN(1), FP64_DENORM_MIN(1) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(1),          FP64_0(1)          } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_DE },
    /*
     * Invalids.
     */
 /*31|33*/ FP64_TABLE_D1_H_PD_INVALIDS
    /** @todo Underflow; Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(hsubpd_XMM1_XMM2),        255, RM_REG, T_SSE3,    XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(hsubpd_XMM1_FSxBX),       255, RM_MEM, T_SSE3,    XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vhsubpd_XMM1_XMM2_XMM3),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vhsubpd_XMM1_XMM2_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vhsubpd_YMM1_YMM2_YMM3),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vhsubpd_YMM1_YMM2_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(hsubpd_XMM8_XMM9),        255, RM_REG, T_SSE3,    XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(hsubpd_XMM8_FSxBX),       255, RM_MEM, T_SSE3,    XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vhsubpd_XMM8_XMM9_XMM10), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vhsubpd_XMM8_XMM9_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vhsubpd_YMM8_YMM9_YMM10), 255, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vhsubpd_YMM8_YMM9_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]MULPS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_mulps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_NORM_V0(0), FP32_NORM_V1(1), FP32_0(0),       FP32_NORM_V3(1), FP32_0(0), FP32_NORM_V1(1), FP32_NORM_V4(0), FP32_NORM_V3(0) } },
            { /*src1     */ { FP32_0(0),       FP32_0(0),       FP32_NORM_V2(1), FP32_0(1),       FP32_0(0), FP32_0(1),       FP32_0(0),       FP32_0(1)       } },
            { /* =>      */ { FP32_0(0),       FP32_0(1),       FP32_0(1),       FP32_0(0),       FP32_0(0), FP32_0(0),       FP32_0(0),       FP32_0(1)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 6*/{ { /*src2     */ { FP32_INF(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_INF(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_INF(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0), FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
          { { /*src2     */ { FP32_INF(0), FP32_INF(1), FP32_0(0), FP32_INF(1), FP32_0(1), FP32_INF(1), FP32_INF(1), FP32_INF(0) } },
            { /*src1     */ { FP32_INF(1), FP32_INF(0), FP32_0(1), FP32_INF(0), FP32_0(0), FP32_INF(0), FP32_INF(0), FP32_INF(1) } },
            { /* =>      */ { FP32_INF(1), FP32_INF(1), FP32_0(1), FP32_INF(1), FP32_0(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_INF(0),  FP32_0(0),    FP32_INF(0),  FP32_0(1),    FP32_INF(0),  FP32_0(1),    FP32_INF(1),  FP32_0(1)    } },
            { /*src1     */ { FP32_0(0),    FP32_INF(1),  FP32_0(1),    FP32_INF(1),  FP32_0(0),    FP32_INF(0),  FP32_0(0),    FP32_INF(1)  } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(0),  FP32_0(0),    FP32_INF(0),  FP32_0(1),    FP32_INF(0),  FP32_0(1),    FP32_INF(1),  FP32_0(1)    } },
            { /*src1     */ { FP32_0(0),    FP32_INF(1),  FP32_0(1),    FP32_INF(1),  FP32_0(0),    FP32_INF(0),  FP32_0(0),    FP32_INF(1)  } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE },
    /*
     * Overflow, Precision.
     */
    /*13*/{ { /*src2     */ { FP32_0(0), FP32_1(1), FP32_0(0), FP32_1(0), FP32_NORM_MAX(1), FP32_1(0), FP32_NORM_MAX(1),  FP32_2(0)        } },
            { /*src1     */ { FP32_0(0), FP32_1(1), FP32_0(0), FP32_1(0), FP32_0(1),        FP32_1(0), FP32_2(0),         FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_1(0), FP32_0(0), FP32_1(0), FP32_0(0),        FP32_1(0), FP32_0(0),         FP32_0(0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_1(1), FP32_0(0), FP32_1(0), FP32_NORM_MAX(1), FP32_1(0), FP32_NORM_MAX(1),  FP32_2(0)        } },
            { /*src1     */ { FP32_0(0), FP32_1(1), FP32_0(0), FP32_1(0), FP32_0(1),        FP32_1(0), FP32_2(0),         FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_1(0), FP32_0(0), FP32_1(0), FP32_0(0),        FP32_1(0), FP32_INF(1),       FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
#ifdef TODO_X86_MXCSR_PE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out or 256:out */
 /*--|15*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_1(1), FP32_0(0), FP32_1(0), FP32_NORM_MAX(1), FP32_1(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_1(1), FP32_0(0), FP32_1(0), FP32_0(1),        FP32_1(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_INF(0),      FP32_1(0), FP32_0(0), FP32_1(0), FP32_0(0),        FP32_1(0), FP32_INF(0),      FP32_INF(0)      } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
#endif /* TODO_X86_MXCSR_PE_IEM */
 /*15|16*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_1(1), FP32_0(0), FP32_1(0), FP32_NORM_MAX(1), FP32_1(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_1(1), FP32_0(0), FP32_1(0), FP32_0(1),        FP32_1(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_INF(0),      FP32_1(0), FP32_0(0), FP32_1(0), FP32_0(0),        FP32_1(0), FP32_INF(0),      FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
#ifdef TODO_X86_MXCSR_PE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out or 256:out */
 /*--|17*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_1(1), FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_1(1), FP32_0(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_1(0), FP32_0(1), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
#endif /* TODO_X86_MXCSR_PE_IEM */
 /*16|18*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_1(1), FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_1(1), FP32_0(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_1(0), FP32_0(1), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
#ifdef TODO_X86_MXCSR_PE_IEM_SSE /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out or 256:out -- in complex circumstances: */
                                 /** @todo PE is not set if any of the following are true on IEM: (1) !OM && !UM; (2) !OM && SSE; (3) !UM && SSE */
                                 /** @todo PE is always set on HW (i7-10700), on both SSE & AVX, with any combination of OM & UM states */
 /*--|19*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_NORM_V1(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_1(0),       FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_INF(0),      FP32_0(0),        FP32_NORM_V1(0), FP32_INF(0),      FP32_INF(0),      FP32_0(1),        FP32_0(1),        FP32_INF(1)      } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE },
#endif /* TODO_X86_MXCSR_PE_IEM_SSE */
 /*17|20*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_NORM_V1(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_1(0),       FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_INF(0),      FP32_0(0),        FP32_NORM_V1(0), FP32_INF(0),      FP32_INF(0),      FP32_0(1),        FP32_0(1),        FP32_INF(1)      } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_UM | X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_UM | X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED | BS3_MXCSR_UM_FIXED },
#ifdef TODO_X86_MXCSR_PE_IEM_SSE /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out or 256:out -- in complex circumstances: */
                                 /** @todo PE is not set if any of the following are true on IEM: (1) !OM && !UM; (2) !OM && SSE; (3) !UM && SSE */
                                 /** @todo PE is always set on HW (i7-10700), on both SSE & AVX, with any combination of OM & UM states */
 /*--|21*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_V3(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_0(0),       FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_0(1),        FP32_0(0),       FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(1),        FP32_0(1),        FP32_INF(1)      } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE },
#endif /* TODO_X86_MXCSR_PE_IEM_SSE */
 /*18|22*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_V3(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_0(0),       FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_NORM_MAX(1) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_0(1),        FP32_0(0),       FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(1),        FP32_0(1),        FP32_INF(1)      } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED | BS3_MXCSR_UM_FIXED },
#ifdef TODO_X86_MXCSR_PE_IEM_SSE /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out or 256:out -- in complex circumstances: */
                                 /** @todo PE is not set if any of the following are true on IEM: (1) !OM && !UM; (2) !OM && SSE; (3) !UM && SSE */
                                 /** @todo PE is always set on HW (i7-10700), on both SSE & AVX, with any combination of OM & UM states */
 /*--|23*/{ { /*src2     */ { FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_2(0), FP32_1(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1) } },
            { /*src1     */ { FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_1(1), FP32_2(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MIN(1) } },
            { /* =>      */ { FP32_0(0),        FP32_NORM_MAX(0), FP32_INF(1),      FP32_2(1), FP32_2(0), FP32_INF(1),      FP32_NORM_MAX(0), FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE },
#endif /* TODO_X86_MXCSR_PE_IEM_SSE */
 /*19|24*/{ { /*src2     */ { FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_2(0), FP32_1(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1) } },
            { /*src1     */ { FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_1(1), FP32_2(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MIN(1) } },
            { /* =>      */ { FP32_0(0),        FP32_NORM_MAX(0), FP32_INF(1),      FP32_2(1), FP32_2(0), FP32_INF(1),      FP32_NORM_MAX(0), FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_UM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_UM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_UM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED | BS3_MXCSR_UM_FIXED },
#ifdef TODO_X86_MXCSR_PE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out or 256:out */
 /*--|25*/{ { /*src2     */ { FP32_1(0),       FP32_NORM_V2(1), FP32_1(1),       FP32_NORM_V6(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_V7(0), FP32_1(1),       FP32_NORM_V4(0), FP32_1(1),       FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_V7(0), FP32_NORM_V2(0), FP32_NORM_V4(1), FP32_NORM_V6(1), FP32_INF(0),      FP32_INF(0),      FP32_INF(0),      FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
#endif /* TODO_X86_MXCSR_PE_IEM */
 /*20|26*/{ { /*src2     */ { FP32_1(0),       FP32_NORM_V2(1), FP32_1(1),       FP32_NORM_V6(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_V7(0), FP32_1(1),       FP32_NORM_V4(0), FP32_1(1),       FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_V7(0), FP32_NORM_V2(0), FP32_NORM_V4(1), FP32_NORM_V6(1), FP32_INF(0),      FP32_INF(0),      FP32_INF(0),      FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
#ifdef TODO_X86_MXCSR_PE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out or 256:out */
 /*--|27*/{ { /*src2     */ { FP32_1(0),       FP32_NORM_V2(1), FP32_1(1),       FP32_NORM_V6(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_V7(0), FP32_1(1),       FP32_NORM_V4(0), FP32_1(1),       FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_V7(0), FP32_NORM_V2(0), FP32_NORM_V4(1), FP32_NORM_V6(1), FP32_INF(0),      FP32_INF(0),      FP32_INF(0),      FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
#endif /* TODO_X86_MXCSR_PE_IEM */
 /*21|28*/{ { /*src2     */ { FP32_1(0),       FP32_NORM_V2(1), FP32_1(1),       FP32_NORM_V6(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_V7(0), FP32_1(1),       FP32_NORM_V4(0), FP32_1(1),       FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_V7(0), FP32_NORM_V2(0), FP32_NORM_V4(1), FP32_NORM_V6(1), FP32_INF(0),      FP32_INF(0),      FP32_INF(0),      FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_PM | X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_PM | X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_PM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
    /** @todo More Overflow/Precision. */
    /*
     * Normals.
     */
 /*22|29*/{ { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/*1.7500*/, FP32_NORM_V0(0), FP32_NORM_V1(0), FP32_NORM_V2(1), FP32_1(1),       FP32_1(0),       FP32_1(1),       FP32_NORM_V6(1) } },
            { /*src1     */ { FP32_V(0, 0,        0x7d)/*0.2500*/, FP32_1(0),       FP32_1(1),       FP32_0(0),       FP32_NORM_V0(1), FP32_NORM_V3(0), FP32_NORM_V4(0), FP32_1(0)       } },
            { /* =>      */ { FP32_V(0, 0x600000, 0x7d)/*0.4375*/, FP32_NORM_V0(0), FP32_NORM_V1(1), FP32_0(1),       FP32_NORM_V0(0), FP32_NORM_V3(0), FP32_NORM_V4(1), FP32_NORM_V6(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_V(0, 0x61e000, 0x89)/*   1807*/, FP32_V(0, 0x61e000, 0x89)/*   1807*/, FP32_V(0, 0x4a30b8, 0x8f)/* 103521.4375*/, FP32_V(0, 0x1a5200, 0x8c)/*     9876.5*/, FP32_V(0, 0x23b6a0, 0x8e)/*41910.625000*/, FP32_V(0, 0x23b6a0, 0x8e)/*41910.625000*/, FP32_V(0, 0,        0x7d)/*0.2500*/, FP32_V(0, 0x504000, 0x8a)/*    3332*/ } },
            { /*src1     */ { FP32_V(0, 0x504000, 0x8a)/*   3332*/, FP32_V(0, 0x504000, 0x8a)/*   3332*/, FP32_V(0, 0x600000, 0x82)/*     14.0000*/, FP32_V(1, 0x1a4000, 0x89)/*    -1234.0*/, FP32_V(0, 0,        0x7c)/*    0.125000*/, FP32_V(0, 0,        0x7c)/*    0.125000*/, FP32_V(0, 0x600000, 0x7f)/*1.7500*/, FP32_V(1, 0x61e000, 0x89)/*   -1807*/ } },
            { /* =>      */ { FP32_V(0, 0x37be78, 0x95)/*6020924*/, FP32_V(0, 0x37be78, 0x95)/*6020924*/, FP32_V(0, 0x30eaa1, 0x93)/*1449300.1250*/, FP32_V(1, 0x39f7d1, 0x96)/*-12187601.0*/, FP32_V(0, 0x23b6a0, 0x8b)/* 5238.828125*/, FP32_V(0, 0x23b6a0, 0x8b)/* 5238.828125*/, FP32_V(0, 0x600000, 0x7d)/*0.4375*/, FP32_V(1, 0x37be78, 0x95)/*-6020924*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_1(0),        FP32_NORM_SAFE_INT_MAX(1), FP32_1(1),                 FP32_NORM_MIN(1), FP32_1(1),        FP32_NORM_MIN(0), FP32_0(1)                 } },
            { /*src1     */ { FP32_1(0),                 FP32_NORM_MIN(0), FP32_1(0),                 FP32_NORM_SAFE_INT_MAX(1), FP32_1(0),        FP32_NORM_MIN(1), FP32_0(0),        FP32_NORM_SAFE_INT_MAX(0) } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_MIN(0), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_0(0),        FP32_0(1)                 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_1(0),        FP32_NORM_MAX(1), FP32_1(1),        FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_1(0),        FP32_1(1)        } },
            { /*src1     */ { FP32_1(0),        FP32_NORM_MAX(1), FP32_1(0),        FP32_NORM_MAX(1), FP32_1(0),        FP32_1(1),        FP32_NORM_MIN(1), FP32_NORM_MIN(1) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /** @todo More Normals. */
   /*
    * Denormals.
    */
 /*26|33*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1)          } },
            { /*src1     */ { FP32_0(0),          FP32_0(1),          FP32_0(0),          FP32_0(1),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /*src1     */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|35*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /*src1     */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*28|36*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /*src1     */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1)          } },
            { /*src1     */ { FP32_0(0),          FP32_0(1),          FP32_0(0),          FP32_0(1),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /*src1     */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1)          } },
            { /*src1     */ { FP32_0(0),          FP32_0(1),          FP32_0(0),          FP32_0(1),          FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /*src1     */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|41*/{ { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /*src1     */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*33|42*/{ { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /*src1     */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1)          } },
            { /*src1     */ { FP32_0(0),          FP32_0(1),          FP32_0(0),          FP32_0(1),          FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /*src1     */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ },
    /** @todo More Denormals. */
    /*
     * Invalids.
     */
 /*40|49*/ FP32_TABLE_D1_PS_INVALIDS
    /** @todo Underflow, Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(mulps_XMM1_XMM2),        255, RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(mulps_XMM1_FSxBX),       255, RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vmulps_XMM1_XMM2_XMM3),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vmulps_XMM1_XMM2_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vmulps_YMM1_YMM2_YMM3),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vmulps_YMM1_YMM2_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(mulps_XMM8_XMM9),        255, RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(mulps_XMM8_FSxBX),       255, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vmulps_XMM8_XMM9_XMM10), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmulps_XMM8_XMM9_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmulps_YMM8_YMM9_YMM10), 255, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmulps_YMM8_YMM9_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]MULPD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_mulpd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(1), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(1), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(1), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_NORM_V0(0), FP64_NORM_V1(1), FP64_0(0),       FP64_NORM_V3(1) } },
            { /*src1     */ { FP64_0(0),       FP64_0(0),       FP64_NORM_V2(1), FP64_0(1)       } },
            { /* =>      */ { FP64_0(0),       FP64_0(1),       FP64_0(1),       FP64_0(0)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 7*/{ { /*src2     */ { FP64_INF(0), FP64_0(0), FP64_INF(1), FP64_0(0) } },
            { /*src1     */ { FP64_INF(1), FP64_0(0), FP64_INF(0), FP64_0(0) } },
            { /* =>      */ { FP64_INF(1), FP64_0(0), FP64_INF(1), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_INF(0), FP64_INF(0), FP64_INF(1), FP64_INF(1) } },
            { /*src1     */ { FP64_INF(1), FP64_INF(0), FP64_INF(1), FP64_INF(0) } },
            { /* =>      */ { FP64_INF(1), FP64_INF(0), FP64_INF(0), FP64_INF(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_INF(0), FP64_INF(1), FP64_0(1), FP64_INF(0) } },
            { /*src1     */ { FP64_INF(1), FP64_INF(0), FP64_0(1), FP64_INF(0) } },
            { /* =>      */ { FP64_INF(1), FP64_INF(1), FP64_0(0), FP64_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_INF(0), FP64_INF(1), FP64_0(1), FP64_INF(0) } },
            { /*src1     */ { FP64_INF(1), FP64_INF(0), FP64_0(1), FP64_INF(0) } },
            { /* =>      */ { FP64_INF(1), FP64_INF(1), FP64_0(0), FP64_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_INF(0), FP64_INF(0),     FP64_1(0),   FP64_INF(0)     } },
            { /*src1     */ { FP64_1(0),   FP64_NORM_V0(0), FP64_INF(0), FP64_NORM_V1(0) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(0),     FP64_INF(0), FP64_INF(0)     } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_INF(1), FP64_INF(0),     FP64_NORM_V3(0), FP64_INF(1)     } },
            { /*src1     */ { FP64_1(1),   FP64_NORM_V3(1), FP64_INF(1),     FP64_NORM_V1(1) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(1),     FP64_INF(1),     FP64_INF(0)     } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
    /*
     * Normals.
     */
    /*13*/{ { /*src2     */ { FP64_V(0, 0xe66f500000000, 0x40d)/*31131.828125*/, FP64_V(0, 0xaf00000000000, 0x406)/*      215.50*/, FP64_V(1, 0x107526e749f80, 0x42b)/*-18723145413791.50*/, FP64_V(0, 0x6fee0e4bd0000, 0x420)/* 12345678999.62500*/ } },
            { /*src1     */ { FP64_1(0),                                         FP64_V(0, 0x2d69a80000000, 0x413)/*  1234586.50*/, FP64_V(1, 0x4000000000000, 0x400)/*             -2.50*/, FP64_V(0, 0xb800000000000, 0x402)/*          13.75000*/ } },
            { /* =>      */ { FP64_V(0, 0xe66f500000000, 0x40d)/*31131.828125*/, FP64_V(0, 0xfb74e1d800000, 0x41a)/*266053390.75*/, FP64_V(0, 0x549270a11c760, 0x42c)/* 46807863534478.75*/, FP64_V(0, 0x3c30944926c00, 0x424)/*169753086244.84375*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_NORM_MAX(1), FP64_NORM_V3(1), FP64_1(0),       FP64_1(1)        } },
            { /*src1     */ { FP64_1(1),        FP64_1(0),       FP64_NORM_V1(0), FP64_NORM_MIN(1) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_NORM_V3(1), FP64_NORM_V1(0), FP64_NORM_MIN(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_V(1, 0x68b83b1ed4000, 0x41e)/*-3025935759.4140625*/, FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/ } },
            { /*src1     */ { FP64_V(0, 0x8000000000000, 0x3fe)/*              0.75*/, FP64_V(1, 0,               0x400)/*         -2.0000000*/, FP64_1(0),                                            FP64_V(0, 0x8000000000000, 0x400)/*              3.00*/ } },
            { /* =>      */ { FP64_V(0, 0x4da20a80c6990, 0x42e)/*183416666481484.50*/, FP64_V(0, 0x68b83b1ed4000, 0x41f)/* 6051871518.8281250*/, FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646*/, FP64_V(0, 0x4a6a82b05f744, 0x42f)/*363296296296308.25*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_1(0),                 FP64_1(0),                                                FP64_NORM_MIN(0), FP64_1(0)        } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_1(0),        FP64_NORM_MIN(1) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0), FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_NORM_MIN(0), FP64_NORM_MIN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_NORM_V0(0), FP64_NORM_V1(1), FP64_NORM_V2(0), FP64_NORM_V3(1) } },
            { /*src1     */ { FP64_1(0),       FP64_1(1),       FP64_1(1),       FP64_1(1)       } },
            { /* =>      */ { FP64_NORM_V0(0), FP64_NORM_V1(0), FP64_NORM_V2(1), FP64_NORM_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          /** @todo More Normals. */
    /*
     * Denormals.
     */
    /*18*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MIN(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MIN(0), FP64_0(0),          FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MIN(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0),          FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DE },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MIN(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_1(0),          FP64_DENORM_MIN(0), FP64_1(0)          } },
            { /*src1     */ { FP64_1(0),          FP64_DENORM_MAX(0), FP64_1(0),          FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ },
          { { /*src2     */ { FP64_DENORM_MIN(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1) } },
            { /*src1     */ { FP64_DENORM_MAX(1), FP64_DENORM_MIN(1), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(1),          FP64_0(0),          FP64_0(1)         } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_1(0),       FP64_NORM_V1(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_1(0),       FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_NORM_V0(0), FP64_NORM_V1(0), FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_DE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(1), FP64_DENORM_MIN(1) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(1),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_PE_FUZZY /* IEM */,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(1), FP64_DENORM_MIN(1) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(1),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_PE_FUZZY /* IEM */,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_PE_FUZZY /* IEM */ },
    /*
     * Overflow, Precision.
     */
    /*26*/{ { /*src2     */ { FP64_NORM_V3(1), FP64_1(0), FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_1(0),       FP64_1(0), FP64_1(0),        FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_NORM_V3(1), FP64_1(0), FP64_NORM_MAX(0), FP64_INF(0)      } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_V3(1), FP64_1(0) } },
            { /*src1     */ { FP64_1(0),        FP64_NORM_MAX(0), FP64_1(0),       FP64_1(0) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_INF(0),      FP64_NORM_V3(1), FP64_1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src2     */ { FP64_NORM_V3(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_1(0)       } },
            { /*src1     */ { FP64_1(0),       FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_V1(0) } },
            { /* =>      */ { FP64_NORM_V3(0), FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MIN(1), FP64_NORM_MIN(1),                                       FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MIN(1), FP64_NORM_MAX(1),                                       FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_INF(0),      FP64_0(0),        FP64_V(0, FP64_FRAC_NORM_MAX, RTFLOAT64U_EXP_BIAS + 1), FP64_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src2     */ { FP64_NORM_V3(0), FP64_1(1),       FP64_NORM_MAX(1), FP64_NORM_MIN(0)                                       } },
            { /*src1     */ { FP64_1(0),       FP64_NORM_V2(1), FP64_NORM_MAX(1), FP64_NORM_MAX(1)                                       } },
            { /* =>      */ { FP64_NORM_V3(0), FP64_NORM_V2(0), FP64_NORM_MAX(0), FP64_V(1, FP64_FRAC_NORM_MAX, RTFLOAT64U_EXP_BIAS + 1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src2     */ { FP64_NORM_MIN(0),                                  FP64_NORM_MAX(0), FP64_NORM_SAFE_INT_MAX(1),                FP64_NORM_MIN(0)                     } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                         FP64_NORM_MAX(1), FP64_NORM_SAFE_INT_MAX(1),                FP64_NORM_SAFE_INT_MAX(0)            } },
            { /* =>      */ { FP64_V(0, FP64_FRAC_NORM_MAX, FP64_FRAC_BITS + 1), FP64_NORM_MAX(1), FP64_V(0, FP64_FRAC_NORM_MAX - 1, 0x468), FP64_V(0, FP64_FRAC_NORM_MAX, 0x035) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src2     */ { FP64_NORM_MIN(0),                                  FP64_NORM_MAX(0), FP64_NORM_SAFE_INT_MAX(1),                FP64_NORM_MIN(0)                     } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                         FP64_NORM_MAX(1), FP64_NORM_SAFE_INT_MAX(1),                FP64_NORM_SAFE_INT_MAX(0)            } },
            { /* =>      */ { FP64_V(0, FP64_FRAC_NORM_MAX, FP64_FRAC_BITS + 1), FP64_INF(1),      FP64_V(0, FP64_FRAC_NORM_MAX - 1, 0x468), FP64_V(0, FP64_FRAC_NORM_MAX, 0x035) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_PE },
    /*
     * Invalids.
     */
    /*33*/ FP64_TABLE_D1_PD_INVALIDS
    /** @todo Underflow, Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(mulpd_XMM1_XMM2),        255,         RM_REG, T_SSE2,    XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(mulpd_XMM1_FSxBX),       255,         RM_MEM, T_SSE2,    XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vmulpd_XMM1_XMM2_XMM3),  X86_XCPT_GP, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vmulpd_XMM1_XMM2_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vmulpd_YMM1_YMM2_YMM3),  X86_XCPT_GP, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vmulpd_YMM1_YMM2_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(mulpd_XMM8_XMM9),        255,         RM_REG, T_SSE2,    XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(mulpd_XMM8_FSxBX),       255,         RM_MEM, T_SSE2,    XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vmulpd_XMM8_XMM9_XMM10), X86_XCPT_GP, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmulpd_XMM8_XMM9_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmulpd_YMM8_YMM9_YMM10), X86_XCPT_GP, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmulpd_YMM8_YMM9_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]MULSS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_mulss(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_0(0), FP32_0_x7(0) } },
            { /* =>      */ { FP32_0(0), FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_0(0), FP32_0_x7(0) } },
            { /* =>      */ { FP32_0(0), FP32_0_x7(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1), FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_0(1), FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_0(1), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_1(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 7*/{ { /*src2     */ { FP32_INF(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_1(1),   FP32_0_x7(0) } },
            { /* =>      */ { FP32_INF(1), FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_0_x7(0) } },
            { /*src1     */ { FP32_1(1),   FP32_0_x7(0) } },
            { /* =>      */ { FP32_INF(0), FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_1(0),   FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_1(1),   FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*14*/{ { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/*1.7500*/, FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_V(0, 0,        0x7d)/*0.2500*/, FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_V(0, 0x600000, 0x7d)/*0.4375*/, FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x61e000, 0x89)/*   1807*/, FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_V(0, 0x504000, 0x8a)/*   3332*/, FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_V(0, 0x37be78, 0x95)/*6020924*/, FP32_RAND_x7_V5 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_1(0),                 FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x61e000, 0x89)/*   1807*/, FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_V(0, 0x504000, 0x8a)/*   3332*/, FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_V(0, 0x37be78, 0x95)/*6020924*/, FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x4a30b8, 0x8f)/* 103521.4375*/, FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_V(0, 0x600000, 0x82)/*     14.0000*/, FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_V(0, 0x30eaa1, 0x93)/*1449300.1250*/, FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x1a5200, 0x8c)/*     9876.5*/, FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_V(1, 0x1a4000, 0x89)/*    -1234.0*/, FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_V(1, 0x39f7d1, 0x96)/*-12187601.0*/, FP32_RAND_x7_V5 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_1(1),        FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_NORM_MAX(1), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x23b6a0, 0x8e)/*41910.625000*/, FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_V(0, 0,        0x7c)/*    0.125000*/, FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_V(0, 0x23b6a0, 0x8b)/* 5238.828125*/, FP32_RAND_x7_V5 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_1(0),                 FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    /** @todo More Normals. */
    /*
     * Denormals.
     */
    /*23*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),          FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(1),          FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /** @todo More Denormals. */
    /*
     * Invalids.
     */
    /*27*/ FP32_TABLE_D1_SS_INVALIDS
    /** @todo Overflow, Underflow, Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(mulss_XMM1_XMM2),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(mulss_XMM1_FSxBX),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vmulss_XMM1_XMM2_XMM3),  255,         RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vmulss_XMM1_XMM2_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(mulss_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(mulss_XMM8_FSxBX),       X86_XCPT_AC, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vmulss_XMM8_XMM9_XMM10), 255,         RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmulss_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]MULSD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_mulsd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_NORM_V3(0), FP64_NORM_V2(0), FP64_0(0)       } },
            { /*src1     */ { FP64_0(0), FP64_0(1),       FP64_0(1),       FP64_NORM_V1(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(1),       FP64_0(1),       FP64_NORM_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1), FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_0(1), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V2(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_0(1), FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_0(1), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_0(1), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_1(0), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 8*/{ { /*src2     */ { FP64_INF(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_1(1),   FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_INF(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_1(1),   FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_INF(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_INF(1), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_1(0),   FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_INF(0), FP64_INF(1), FP64_INF(1) } },
            { /*src1     */ { FP64_1(1),   FP64_INF(1), FP64_INF(1), FP64_INF(0) } },
            { /* =>      */ { FP64_INF(1), FP64_INF(1), FP64_INF(0), FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_QNAN(0), FP64_SNAN(0), FP64_RAND_V0(0) } },
            { /*src1     */ { FP64_INF(0), FP64_QNAN(0), FP64_SNAN(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_INF(1), FP64_QNAN(0), FP64_SNAN(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*15*/{ { /*src2     */ { FP64_V(0, 0xe66f500000000, 0x40d)/*31131.828125*/, FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_1(0),                                         FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_V(0, 0xe66f500000000, 0x40d)/*31131.828125*/, FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xaf00000000000, 0x406)/*      215.50*/, FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_V(0, 0x2d69a80000000, 0x413)/*  1234586.50*/, FP64_RAND_V1(0), FP64_RAND_V1(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_V(0, 0xfb74e1d800000, 0x41a)/*266053390.75*/, FP64_RAND_V1(0), FP64_RAND_V1(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(1, 0x107526e749f80, 0x42b)/*-18723145413791.50*/, FP64_RAND_V3(0), FP64_RAND_V1(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(1, 0x4000000000000, 0x400)/*             -2.50*/, FP64_RAND_V0(0), FP64_RAND_V2(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_V(0, 0x549270a11c760, 0x42c)/* 46807863534478.75*/, FP64_RAND_V0(0), FP64_RAND_V2(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0x6fee0e4bd0000, 0x420)/* 12345678999.62500*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0xb800000000000, 0x402)/*          13.75000*/, FP64_RAND_V2(0), FP64_RAND_V1(1), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_V(0, 0x3c30944926c00, 0x424)/*169753086244.84375*/, FP64_RAND_V2(0), FP64_RAND_V1(1), FP64_RAND_V3(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(1), FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_1(1),        FP64_RAND_V1(1), FP64_RAND_V0(0), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_RAND_V1(1), FP64_RAND_V0(0), FP64_RAND_V2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_RAND_V2(0), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x8000000000000, 0x3fe)/*              0.75*/, FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_V(0, 0x4da20a80c6990, 0x42e)/*183416666481484.50*/, FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(1, 0x68b83b1ed4000, 0x41e)/*-3025935759.4140625*/, FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_V(1, 0,               0x400)/*         -2.0000000*/, FP64_RAND_V2(0), FP64_RAND_V1(1), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_V(0, 0x68b83b1ed4000, 0x41f)/* 6051871518.8281250*/, FP64_RAND_V2(0), FP64_RAND_V1(1), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x8000000000000, 0x400)/*              3.00*/, FP64_RAND_V1(1), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(0, 0x4a6a82b05f744, 0x42f)/*363296296296308.25*/, FP64_RAND_V1(1), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_1(0),                 FP64_0(0),                                                FP64_NORM_MIN(0), FP64_NORM_MAX(1) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_INF(1),      FP64_NORM_MIN(1) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0), FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_INF(1),      FP64_NORM_MIN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_V0(0), FP64_NORM_V1(1), FP64_NORM_V2(0), FP64_NORM_V3(1) } },
            { /*src1     */ { FP64_1(0),       FP64_SNAN(0),    FP64_SNAN(1),    FP64_QNAN(0)    } },
            { /* =>      */ { FP64_NORM_V0(0), FP64_SNAN(0),    FP64_SNAN(1),    FP64_QNAN(0)    } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*25*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),           FP64_DENORM_MIN(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MIN(0),  FP64_0(0),          FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),          FP64_DENORM_MIN(0), FP64_0(0),          FP64_DENORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),          FP64_0(0),           FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0),  FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_0(0),          FP64_DENORM_MIN(0),  FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_0(0),          FP64_RAND_V1(1), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(0), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_1(0),          FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_0(0),          FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(1), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MAX(1), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(0),          FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_1(1),          FP64_RAND_V3(0), FP64_RAND_V3(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(1),          FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_DE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_1(1),          FP64_RAND_V3(0), FP64_RAND_V3(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(1),          FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_1(1),          FP64_RAND_V3(0), FP64_RAND_V3(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(1),          FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_DE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_0(0),          FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
#ifdef TODO_X86_MXCSR_PE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out */
 /*--|34*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_0(0),          FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
#endif /* TODO_X86_MXCSR_PE_IEM */
 /*34|35*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_0(0),          FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(1), FP64_DENORM_MIN(1) } },
            { /* =>      */ { FP64_0(0),          FP64_DENORM_MIN(0), FP64_DENORM_MAX(1), FP64_DENORM_MIN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(1), FP64_DENORM_MIN(1) } },
            { /* =>      */ { FP64_0(0),          FP64_DENORM_MIN(0), FP64_DENORM_MAX(1), FP64_DENORM_MIN(1) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(1), FP64_DENORM_MIN(1) } },
            { /* =>      */ { FP64_0(0),          FP64_DENORM_MIN(0), FP64_DENORM_MAX(1), FP64_DENORM_MIN(1) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
 /*38|39*/ FP64_TABLE_D1_SD_INVALIDS
    /** @todo Underflow, Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(mulsd_XMM1_XMM2),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(mulsd_XMM1_FSxBX),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vmulsd_XMM1_XMM2_XMM3),  255,         RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vmulsd_XMM1_XMM2_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(mulsd_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(mulsd_XMM8_FSxBX),       X86_XCPT_AC, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vmulsd_XMM8_XMM9_XMM10), 255,         RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmulsd_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]DIVPS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_divps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /** @todo Improve port from mulps */
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP32_NORM_V0(0), FP32_NORM_V1(1), FP32_0(0),       FP32_NORM_V3(1), FP32_0(0), FP32_NORM_V1(1), FP32_NORM_V4(0), FP32_NORM_V3(0) } },
            { /*src1     */ { FP32_0(0),       FP32_0(1),       FP32_0(1),       FP32_0(0),       FP32_0(0), FP32_0(0),       FP32_0(0),       FP32_0(1)       } },
            { /* =>      */ { FP32_0(0),       FP32_0(0),       FP32_QNAN(1),    FP32_0(1),       FP32_QNAN(1), FP32_0(1),    FP32_0(0),       FP32_0(1)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE },
    /*
     * Infinity.
     */
    /* 6*/{ { /*src2     */ { FP32_INF(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_INF(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0), FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0)  } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1) } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1)  } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(0), FP32_INF(1), FP32_0(0), FP32_INF(1), FP32_0(1), FP32_INF(1), FP32_INF(1), FP32_INF(0) } },
            { /*src1     */ { FP32_INF(1), FP32_INF(1), FP32_0(1), FP32_INF(1), FP32_0(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
            { /* =>      */ { FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(0),  FP32_INF(1),  FP32_QNAN(0), FP32_QNAN(1), FP32_INF(0),  FP32_QNAN(1), FP32_QNAN(0), FP32_INF(1)  } },
            { /*src1     */ { FP32_QNAN(0), FP32_QNAN(0), FP32_INF(1),  FP32_INF(1),  FP32_QNAN(1), FP32_INF(0),  FP32_INF(0),  FP32_QNAN(1) } },
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN(0), FP32_QNAN(0), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(0), FP32_QNAN(1)  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_INF(0),  FP32_INF(1),  FP32_QNAN(0), FP32_QNAN(1), FP32_INF(0),  FP32_QNAN(1), FP32_QNAN(0), FP32_INF(1)  } },
            { /*src1     */ { FP32_QNAN(0), FP32_QNAN(0), FP32_INF(1),  FP32_INF(1),  FP32_QNAN(1), FP32_INF(0),  FP32_INF(0),  FP32_QNAN(1) } },
            { /* =>      */ { FP32_QNAN(0), FP32_QNAN(0), FP32_QNAN(0), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(0), FP32_QNAN(1)  } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
    /*
     * Overflow, Precision.
     */
#ifdef TODO_X86_MXCSR_PE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 256:out */
 /*--|13*/{ { /*src2     */ { FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(0), FP32_NORM_MAX(1), FP32_1(0), FP32_NORM_MAX(1),       FP32_2(0)                                            } },
            { /*src1     */ { FP32_0(0), FP32_1(0), FP32_0(0), FP32_1(0), FP32_0(0),        FP32_1(0), FP32_2(0),              FP32_NORM_MAX(0)                                     } },
            { /* =>      */ { FP32_0(0), FP32_1(1), FP32_0(0), FP32_1(0), FP32_0(1),        FP32_1(0), FP32_V(1, 0x400000, 0), FP32_V(0, FP32_FRAC_NORM_MAX, FP32_EXP_NORM_MAX - 1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_PE_IEM */
 /*13|14*/{ { /*src2     */ { FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(0), FP32_NORM_MAX(1), FP32_1(0), FP32_NORM_MAX(1),       FP32_2(0)                                            } },
            { /*src1     */ { FP32_0(0), FP32_1(0), FP32_0(0), FP32_1(0), FP32_0(0),        FP32_1(0), FP32_2(0),              FP32_NORM_MAX(0)                                     } },
            { /* =>      */ { FP32_0(0), FP32_1(1), FP32_0(0), FP32_1(0), FP32_0(1),        FP32_1(0), FP32_V(1, 0x400000, 0), FP32_V(0, FP32_FRAC_NORM_MAX, FP32_EXP_NORM_MAX - 1) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_UM_FIXED },
#ifdef TODO_X86_MXCSR_PE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 256:out */
 /*--|15*/{ { /*src2     */ { FP32_V(0,0,0x7e)/*0.50*/, FP32_1(1), FP32_1(0), FP32_1(0), FP32_NORM_MAX(1), FP32_1(0), FP32_NORM_MAX(1),     FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0),         FP32_1(0), FP32_0(0), FP32_1(0), FP32_0(0),        FP32_1(0), FP32_1(0),            FP32_0(0)        } },
            { /* =>      */ { FP32_INF(0),              FP32_1(1), FP32_0(0), FP32_1(0), FP32_0(1),        FP32_1(0), FP32_V(1,0x200000,0), FP32_0(0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_OM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_PE_IEM */
 /*14|16*/{ { /*src2     */ { FP32_V(0,0,0x7e)/*0.50*/, FP32_1(1), FP32_1(0), FP32_1(0), FP32_NORM_MAX(1), FP32_1(0), FP32_NORM_MAX(1),     FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0),         FP32_1(0), FP32_0(0), FP32_1(0), FP32_0(0),        FP32_1(0), FP32_1(0),            FP32_0(0)        } },
            { /* =>      */ { FP32_INF(0),              FP32_1(1), FP32_0(0), FP32_1(0), FP32_0(1),        FP32_1(0), FP32_V(1,0x200000,0), FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_OE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_OM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_V(0,0,0x7e)/*0.50*/, FP32_1(1), FP32_1(0), FP32_1(0), FP32_NORM_MAX(1), FP32_1(0), FP32_NORM_MAX(1),     FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0),         FP32_1(0), FP32_0(0), FP32_1(0), FP32_0(0),        FP32_1(0), FP32_1(0),            FP32_0(0)        } },
            { /* =>      */ { FP32_INF(0),              FP32_1(1), FP32_0(0), FP32_1(0), FP32_0(1),        FP32_1(0), FP32_V(1,0x200000,0), FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_OM_FIXED },
#ifdef TODO_X86_MXCSR_PE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out or 256:out */
 /*--|18*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_1(0), FP32_1(0), FP32_NORM_MAX(0), FP32_1(1), FP32_1(0), FP32_NORM_MIN(0) } },
            { /*src1     */ { FP32_NORM_MIN(0), FP32_NORM_MAX(1), FP32_1(0), FP32_1(0), FP32_NORM_MIN(1), FP32_1(0), FP32_1(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0),        FP32_NORM_MAX(1), FP32_1(0), FP32_1(0), FP32_0(1),        FP32_1(1), FP32_1(1), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_OM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_OM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_PE_IEM */
 /*16|19*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_1(0), FP32_1(0), FP32_NORM_MAX(0), FP32_1(1), FP32_1(0), FP32_NORM_MIN(0) } },
            { /*src1     */ { FP32_NORM_MIN(0), FP32_NORM_MAX(1), FP32_1(0), FP32_1(0), FP32_NORM_MIN(1), FP32_1(0), FP32_1(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0),        FP32_NORM_MAX(1), FP32_1(0), FP32_1(0), FP32_0(1),        FP32_1(1), FP32_1(1), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_1(0), FP32_1(0), FP32_NORM_MAX(0), FP32_1(1), FP32_1(0), FP32_NORM_MIN(0) } },
            { /*src1     */ { FP32_NORM_MIN(0), FP32_NORM_MAX(1), FP32_1(0), FP32_1(0), FP32_NORM_MIN(1), FP32_1(0), FP32_1(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0),        FP32_NORM_MAX(1), FP32_1(0), FP32_1(0), FP32_0(1),        FP32_1(1), FP32_1(1), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_UM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_NORM_V1(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_INF(0),      FP32_0(0),        FP32_NORM_V1(0), FP32_INF(0),      FP32_INF(0),      FP32_0(1),        FP32_0(1),        FP32_INF(1)      } },
            { /* =>      */ { FP32_INF(0),      FP32_0(1),        FP32_1(0),       FP32_INF(0),      FP32_INF(1),      FP32_0(1),        FP32_0(0),        FP32_INF(1)      } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_V3(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_0(1),        FP32_0(0),       FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(1),        FP32_0(1),        FP32_INF(1)      } },
            { /* =>      */ { FP32_1(0),        FP32_0(1),        FP32_0(0),       FP32_1(0),        FP32_1(1),        FP32_0(1),        FP32_0(0),        FP32_INF(1)      } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_2(0), FP32_1(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1) } },
            { /*src1     */ { FP32_0(0),        FP32_NORM_MAX(0), FP32_INF(1),      FP32_2(1), FP32_2(0), FP32_INF(1),      FP32_NORM_MAX(0), FP32_0(0)        } },
            { /* =>      */ { FP32_0(1),        FP32_1(0),        FP32_INF(1),      FP32_1(1), FP32_2(1), FP32_INF(1),      FP32_1(0),        FP32_0(1)        } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_1(0),       FP32_NORM_V2(1), FP32_1(1),       FP32_NORM_V6(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_V7(0), FP32_NORM_V2(0), FP32_NORM_V4(1), FP32_NORM_V6(1), FP32_INF(0),      FP32_INF(0),      FP32_INF(0),      FP32_INF(0)      } },
            { /* =>      */ { FP32_NORM_V7(0), FP32_1(1),       FP32_NORM_V4(0), FP32_1(1),       FP32_INF(0),      FP32_INF(1),      FP32_INF(1),      FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ },
    /** @todo More Overflow/Precision. */
    /*
     * Normals.
     */
 /*22|25*/{ { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/*1.7500*/, FP32_NORM_V0(0), FP32_NORM_V1(0), FP32_NORM_V2(1), FP32_1(1),       FP32_1(0),       FP32_1(1),       FP32_NORM_V6(1) } },
            { /*src1     */ { FP32_V(0, 0x600000, 0x7d)/*0.4375*/, FP32_NORM_V0(0), FP32_NORM_V1(1), FP32_0(1),       FP32_NORM_V0(0), FP32_NORM_V3(0), FP32_NORM_V4(1), FP32_NORM_V6(1) } },
            { /* =>      */ { FP32_V(0, 0,        0x7d)/*0.2500*/, FP32_1(0),       FP32_1(1),       FP32_0(0),       FP32_NORM_V0(1), FP32_NORM_V3(0), FP32_NORM_V4(0), FP32_1(0)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_V(0, 0x61e000, 0x89)/*   1807*/, FP32_V(0, 0x61e000, 0x89)/*   1807*/, FP32_V(0, 0x4a30b8, 0x8f)/* 103521.4375*/, FP32_V(0, 0x1a5200, 0x8c)/*     9876.5*/, FP32_V(0, 0x23b6a0, 0x8e)/*41910.625000*/, FP32_V(0, 0x23b6a0, 0x8e)/*41910.625000*/, FP32_V(0, 0,        0x7d)/*0.2500*/, FP32_V(0, 0x504000, 0x8a)/*    3332*/ } },
            { /*src1     */ { FP32_V(0, 0x37be78, 0x95)/*6020924*/, FP32_V(0, 0x37be78, 0x95)/*6020924*/, FP32_V(0, 0x30eaa1, 0x93)/*1449300.1250*/, FP32_V(1, 0x39f7d1, 0x96)/*-12187601.0*/, FP32_V(0, 0x23b6a0, 0x8b)/* 5238.828125*/, FP32_V(0, 0x23b6a0, 0x8b)/* 5238.828125*/, FP32_V(0, 0x600000, 0x7d)/*0.4375*/, FP32_V(1, 0x37be78, 0x95)/*-6020924*/ } },
            { /* =>      */ { FP32_V(0, 0x504000, 0x8a)/*   3332*/, FP32_V(0, 0x504000, 0x8a)/*   3332*/, FP32_V(0, 0x600000, 0x82)/*     14.0000*/, FP32_V(1, 0x1a4000, 0x89)/*    -1234.0*/, FP32_V(0, 0,        0x7c)/*    0.125000*/, FP32_V(0, 0,        0x7c)/*    0.125000*/, FP32_V(0, 0x600000, 0x7f)/*1.7500*/, FP32_V(1, 0x61e000, 0x89)/*   -1807*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_1(0),        FP32_NORM_SAFE_INT_MAX(1), FP32_1(1),                 FP32_NORM_MIN(1), FP32_1(1),        FP32_NORM_MIN(0), FP32_NORM_SAFE_INT_MAX(0) } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_MIN(0), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_0(0),        FP32_0(1)                 } },
            { /* =>      */ { FP32_1(0),                 FP32_NORM_MIN(0), FP32_1(0),                 FP32_NORM_SAFE_INT_MAX(1), FP32_1(0),        FP32_NORM_MIN(1), FP32_0(0),        FP32_0(1)                 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_1(0),        FP32_NORM_MAX(1), FP32_1(1),        FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_1(0),        FP32_1(1)        } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(0) } },
            { /* =>      */ { FP32_1(0),        FP32_NORM_MAX(1), FP32_1(0),        FP32_NORM_MAX(1), FP32_1(0),        FP32_1(1),        FP32_NORM_MIN(1), FP32_NORM_MIN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /** @todo More Normals. */
   /*
    * Denormals.
    */
 /*26|29*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1)          } },
            { /*src1     */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(0),          FP32_0(1),          FP32_INF(0),        FP32_INF(1),        FP32_INF(1),        FP32_INF(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_ZE },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 256:out */
 /*--|30*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0) } },
            { /* =>      */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*27|31*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0) } },
            { /* =>      */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1)          } },
            { /*src1     */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /*src1     */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1)          } },
            { /*src1     */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(0),          FP32_0(1),          FP32_INF(0),        FP32_INF(1),        FP32_INF(1),        FP32_INF(0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_ZE },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /* =>      */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0) } },
            { /*src1     */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 256:out */
 /*--|36*/{ { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /* =>      */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0) } },
            { /*src1     */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*32|37*/{ { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1)          } },
            { /* =>      */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0) } },
            { /*src1     */ { FP32_1(0),          FP32_1(1),          FP32_1(0),          FP32_1(1),          FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_0(0),          FP32_0(0),          FP32_0(1),          FP32_0(1)          } },
            { /*src1     */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE },
          { { /*src2     */ { FP32_1(0),          FP32_1(0),          FP32_1(1),          FP32_1(1),          FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1) } },
            { /*src1     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0)          } },
            { /* =>      */ { FP32_0(0),          FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MIN(1) } },
            { /* =>      */ { FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1),       FP32_QNAN(1)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_IE },
    /** @todo More Denormals. */
    /*
     * Invalids.
     */
 /*39|44*/ FP32_TABLE_D1_PS_INVALIDS
    /** @todo Underflow, Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(divps_XMM1_XMM2),        255, RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(divps_XMM1_FSxBX),       255, RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vdivps_XMM1_XMM2_XMM3),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vdivps_XMM1_XMM2_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vdivps_YMM1_YMM2_YMM3),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vdivps_YMM1_YMM2_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(divps_XMM8_XMM9),        255, RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(divps_XMM8_FSxBX),       255, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vdivps_XMM8_XMM9_XMM10), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vdivps_XMM8_XMM9_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vdivps_YMM8_YMM9_YMM10), 255, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vdivps_YMM8_YMM9_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]DIVPD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_divpd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
          { { /*src2     */ { FP64_0(1),    FP64_0(1),    FP64_0(0),    FP64_0(0) } },
            { /*src1     */ { FP64_0(1),    FP64_0(0),    FP64_0(1),    FP64_0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP64_0(1),    FP64_0(1),    FP64_0(0),    FP64_0(0) } },
            { /*src1     */ { FP64_0(1),    FP64_0(0),    FP64_0(1),    FP64_0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP64_0(1),    FP64_0(1),    FP64_0(0),    FP64_0(0) } },
            { /*src1     */ { FP64_0(1),    FP64_0(0),    FP64_0(1),    FP64_0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },
          { { /*src2     */ { FP64_0(1),    FP64_0(1),    FP64_0(0),    FP64_0(0) } },
            { /*src1     */ { FP64_0(1),    FP64_0(0),    FP64_0(1),    FP64_0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP64_0(1),    FP64_0(1),    FP64_0(0),    FP64_0(0) } },
            { /*src1     */ { FP64_0(1),    FP64_0(0),    FP64_0(1),    FP64_0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE },
          { { /*src2     */ { FP64_0(1),    FP64_0(1),    FP64_0(0),    FP64_0(0) } },
            { /*src1     */ { FP64_0(1),    FP64_0(0),    FP64_0(1),    FP64_0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE },
          { { /*src2     */ { FP64_NORM_V0(0), FP64_NORM_V1(1), FP64_0(0),       FP64_0(1)       } },
            { /*src1     */ { FP64_0(0),       FP64_0(0),       FP64_NORM_V2(1), FP64_NORM_V3(1) } },
            { /* =>      */ { FP64_0(0),       FP64_0(1),       FP64_INF(1),     FP64_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_ZE },
    /*
     * Infinity.
     */
    /* 7*/{ { /*src2     */ { FP64_INF(0), FP64_INF(0), FP64_INF(1), FP64_INF(1) } },
            { /*src1     */ { FP64_0(0),   FP64_0(1),   FP64_0(0),   FP64_0(1) } },
            { /* =>      */ { FP64_0(0),   FP64_0(1),   FP64_0(1),   FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0),   FP64_0(0),   FP64_0(1),   FP64_0(1)   } },
            { /*src1     */ { FP64_INF(0), FP64_INF(1), FP64_INF(0), FP64_INF(1) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(1), FP64_INF(1), FP64_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_INF(0),  FP64_INF(0),  FP64_INF(1),  FP64_INF(1) } },
            { /*src1     */ { FP64_INF(0),  FP64_INF(1),  FP64_INF(0),  FP64_INF(1) } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(0),  FP64_INF(0),  FP64_INF(1),  FP64_INF(1) } },
            { /*src1     */ { FP64_INF(0),  FP64_INF(1),  FP64_INF(0),  FP64_INF(1) } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(0), FP64_INF(0),     FP64_1(1),   FP64_NORM_V1(1) } },
            { /*src1     */ { FP64_1(0),   FP64_NORM_V0(1), FP64_INF(0), FP64_INF(1)     } },
            { /* =>      */ { FP64_0(0),   FP64_0(1),       FP64_INF(1), FP64_INF(0)     } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_INF(0), FP64_INF(0),     FP64_1(1),   FP64_NORM_V2(1) } },
            { /*src1     */ { FP64_1(0),   FP64_NORM_V3(1), FP64_INF(0), FP64_INF(1)     } },
            { /* =>      */ { FP64_0(0),   FP64_0(1),       FP64_INF(1), FP64_INF(0)     } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
    /*
     * Normals.
     */
    /*13*/{ { /*src2     */ { FP64_V(0, 0xe66f500000000, 0x40d)/*31131.828125*/, FP64_V(0, 0xaf00000000000, 0x406)/*      215.50*/, FP64_V(1, 0x107526e749f80, 0x42b)/*-18723145413791.50*/, FP64_V(0, 0x6fee0e4bd0000, 0x420)/* 12345678999.62500*/ } },
            { /*src1     */ { FP64_V(0, 0xe66f500000000, 0x40d)/*31131.828125*/, FP64_V(0, 0xfb74e1d800000, 0x41a)/*266053390.75*/, FP64_V(0, 0x549270a11c760, 0x42c)/* 46807863534478.75*/, FP64_V(0, 0x3c30944926c00, 0x424)/*169753086244.84375*/ } },
            { /* =>      */ { FP64_1(0),                                         FP64_V(0, 0x2d69a80000000, 0x413)/*  1234586.50*/, FP64_V(1, 0x4000000000000, 0x400)/*             -2.50*/, FP64_V(0, 0xb800000000000, 0x402)/*          13.75000*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_NORM_MAX(1), FP64_NORM_V3(1), FP64_1(0),       FP64_1(1)        } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_V3(1), FP64_NORM_V1(0), FP64_NORM_MIN(0) } },
            { /* =>      */ { FP64_1(1),        FP64_1(0),       FP64_NORM_V1(0), FP64_NORM_MIN(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_V(1, 0x68b83b1ed4000, 0x41e)/*-3025935759.4140625*/, FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/ } },
            { /*src1     */ { FP64_V(0, 0x4da20a80c6990, 0x42e)/*183416666481484.50*/, FP64_V(0, 0x68b83b1ed4000, 0x41f)/* 6051871518.8281250*/, FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646*/, FP64_V(0, 0x4a6a82b05f744, 0x42f)/*363296296296308.25*/ } },
            { /* =>      */ { FP64_V(0, 0x8000000000000, 0x3fe)/*              0.75*/, FP64_V(1, 0,               0x400)/*         -2.0000000*/, FP64_1(0),                                            FP64_V(0, 0x8000000000000, 0x400)/*              3.00*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_1(0),                 FP64_1(0),                                                FP64_NORM_MIN(0), FP64_1(0)        } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_NORM_MIN(0), FP64_NORM_MIN(1) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0), FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_1(0),        FP64_NORM_MIN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_NORM_V0(0), FP64_NORM_V1(1), FP64_NORM_V2(0), FP64_NORM_V3(1) } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_NORM_V1(0), FP64_NORM_V2(1), FP64_NORM_V3(0) } },
            { /* =>      */ { FP64_1(0),       FP64_1(1),       FP64_1(1),       FP64_1(1)       } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          /** @todo More Normals. */
    /*
     * Denormals.
     */
    /*18*/{ { /*src2     */ { FP64_DENORM_MAX(1), FP64_DENORM_MIN(0), FP64_DENORM_MIN(1), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_0(1),          FP64_DENORM_MIN(1), FP64_0(0),          FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),          FP64_1(1),          FP64_0(1),          FP64_1(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP64_1(0), FP64_1(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0),          FP64_0(0)          } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DE },
          { { /*src2     */ { FP64_1(0), FP64_1(1), FP64_1(0),          FP64_1(0)          } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */ },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 256:out */
 /*--|21*/{ { /*src2     */ { FP64_1(0), FP64_1(1), FP64_1(0),          FP64_1(0)          } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*21|22*/{ { /*src2     */ { FP64_1(0), FP64_1(1), FP64_1(0),          FP64_1(0)          } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 256:out */
 /*--|23*/{ { /*src2     */ { FP64_1(0), FP64_1(1), FP64_1(0),          FP64_1(0)          } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*22|24*/{ { /*src2     */ { FP64_1(0), FP64_1(1), FP64_1(0),          FP64_1(0)          } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP64_1(0),          FP64_1(0),          FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_0(0),          FP64_1(1)          } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_QNAN(1),       FP64_INF(1)        } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_IE | X86_MXCSR_ZE },
          { { /*src2     */ { FP64_1(0),          FP64_1(0),          FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_1(0),          FP64_1(0)          } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_INF(0),        FP64_INF(0)        } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_ZE },
          { { /*src2     */ { FP64_DENORM_MIN(1), FP64_DENORM_MIN(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(1) } },
            { /*src1     */ { FP64_1(0),          FP64_1(1),          FP64_DENORM_MIN(0), FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_INF(1),        FP64_INF(0),        FP64_QNAN(1),       FP64_QNAN(1)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_ZE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_ZE | X86_MXCSR_IE },
          { { /*src2     */ { FP64_1(0),       FP64_NORM_V1(0), FP64_DENORM_MAX(0), FP64_1(0)          } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_NORM_V1(0), FP64_0(0),          FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_NORM_V0(0), FP64_1(0),       FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_DE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0),          FP64_INF(1),        FP64_INF(0)        } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_INF(1),        FP64_INF(1)        } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1) } },
            { /*src1     */ { FP64_0(0),          FP64_0(0),          FP64_0(1),          FP64_0(0)          } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(1),          FP64_0(1)          } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE },
    /*
     * Overflow, Precision.
     */
 /*29|31*/{ { /*src2     */ { FP64_NORM_V3(1), FP64_1(0), FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_V3(1), FP64_1(0), FP64_NORM_MAX(0), FP64_INF(0)      } },
            { /* =>      */ { FP64_1(0),       FP64_1(0), FP64_1(0),        FP64_INF(0)      } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_NORM_V3(1), FP64_1(1), FP64_NORM_MIN(0), FP64_NORM_MIN(0) } },
            { /*src1     */ { FP64_NORM_V3(0), FP64_1(1), FP64_NORM_MIN(1), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_1(1),       FP64_1(0), FP64_1(1),        FP64_INF(0)      } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */ },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_V3(1), FP64_NORM_MAX(1) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_INF(0),      FP64_NORM_V3(1), FP64_NORM_MIN(0) } },
            { /* =>      */ { FP64_1(0),        FP64_INF(0),      FP64_1(0),       FP64_0(1)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src2     */ { FP64_NORM_V3(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_V(1, 0, 0x3fe)/*-0.5*/ } },
            { /*src1     */ { FP64_NORM_V3(1), FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1)            } },
            { /* =>      */ { FP64_1(1),       FP64_1(0),        FP64_1(1),        FP64_NORM_MAX(0)            } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP64_NORM_V3(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_V(1, 0, 0x3fe)/*-0.5*/ } },
            { /*src1     */ { FP64_NORM_V3(1), FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1)            } },
            { /* =>      */ { FP64_1(1),       FP64_1(0),        FP64_1(1),        FP64_NORM_MAX(0)            } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_V3(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_V(1, 0, 0x3fe)/*-0.5*/ } },
            { /*src1     */ { FP64_NORM_V3(1), FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1)            } },
            { /* =>      */ { FP64_1(1),       FP64_1(0),        FP64_1(1),        FP64_NORM_MAX(0)            } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */ },
          { { /*src2     */ { FP64_NORM_V3(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_V(1, 0, 0x3fe)/*-0.5*/ } },
            { /*src1     */ { FP64_NORM_V3(1), FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_MAX(1)            } },
            { /* =>      */ { FP64_1(1),       FP64_1(0),        FP64_1(1),        FP64_INF(0)                 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */ },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MIN(1), FP64_NORM_MIN(1),                                       FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_INF(0),      FP64_0(0),        FP64_V(0, FP64_FRAC_NORM_MAX, RTFLOAT64U_EXP_BIAS + 1), FP64_INF(0)      } },
            { /* =>      */ { FP64_INF(0),      FP64_0(1),        FP64_NORM_MAX(1),                                       FP64_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ },
          { { /*src2     */ { FP64_NORM_V3(0), FP64_1(1),       FP64_V(1, 0, 0x3fe)/*-0.5*/, FP64_NORM_MIN(0)                                       } },
            { /*src1     */ { FP64_NORM_V3(0), FP64_NORM_V2(0), FP64_NORM_MAX(0),            FP64_V(1, FP64_FRAC_NORM_MAX, RTFLOAT64U_EXP_BIAS + 1) } },
            { /* =>      */ { FP64_1(0),       FP64_NORM_V2(1), FP64_NORM_MAX(1),            FP64_NORM_MAX(1)                                       } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* i7-10700, IEM */ },
          { { /*src2     */ { FP64_NORM_MIN(0),                                  FP64_NORM_MAX(0), FP64_NORM_SAFE_INT_MAX(1),                                FP64_NORM_MIN(0)                     } },
            { /*src1     */ { FP64_V(0, FP64_FRAC_NORM_MAX, FP64_FRAC_BITS + 1), FP64_NORM_MAX(1), FP64_V(0, FP64_FRAC_NORM_MAX - 1, 0x468),                 FP64_V(0, FP64_FRAC_NORM_MAX, 0x035) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0),                         FP64_1(1),        FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_NORM_SAFE_INT_MAX(0)            } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
          { { /*src2     */ { FP64_NORM_MIN(0),                                  FP64_NORM_MAX(0), FP64_V(0, 0x8000000000000, 0x400)/*3.0*/, FP64_1(1) } },
            { /*src1     */ { FP64_V(0, FP64_FRAC_NORM_MAX, FP64_FRAC_BITS + 1), FP64_INF(1),      FP64_1(1),                                FP64_1(0) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0),                         FP64_INF(1),      FP64_V(1, 0x5555555555556, 0x3fd)/*1/3*/, FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_PE },
    /*
     * Invalids.
     */
 /*40|42*/ FP64_TABLE_D1_PD_INVALIDS
    /** @todo Underflow, Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(divpd_XMM1_XMM2),        255,         RM_REG, T_SSE2,    XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(divpd_XMM1_FSxBX),       255,         RM_MEM, T_SSE2,    XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vdivpd_XMM1_XMM2_XMM3),  X86_XCPT_GP, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vdivpd_XMM1_XMM2_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vdivpd_YMM1_YMM2_YMM3),  X86_XCPT_GP, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vdivpd_YMM1_YMM2_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(divpd_XMM8_XMM9),        255,         RM_REG, T_SSE2,    XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(divpd_XMM8_FSxBX),       255,         RM_MEM, T_SSE2,    XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vdivpd_XMM8_XMM9_XMM10), X86_XCPT_GP, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vdivpd_XMM8_XMM9_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vdivpd_YMM8_YMM9_YMM10), X86_XCPT_GP, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vdivpd_YMM8_YMM9_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]DIVSS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_divss(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0),    FP32_0_x7(0) } },
            { /*src1     */ { FP32_0(0),    FP32_0_x7(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),    FP32_0_x7(0) } },
            { /*src1     */ { FP32_0(0),    FP32_0_x7(0) } },
            { /* =>      */ { FP32_QNAN(1), FP32_0_x7(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),    FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_0(0),    FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1),    FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_0(1),    FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1),    FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_0(0),    FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),    FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_0(1),    FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),   FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_1(0),   FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_FSW_ZE,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 7*/{ { /*src2     */ { FP32_INF(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_1(1),   FP32_0_x7(0) } },
            { /* =>      */ { FP32_0(1),   FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_0_x7(0) } },
            { /*src1     */ { FP32_1(1),   FP32_0_x7(0) } },
            { /* =>      */ { FP32_0(0),   FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0),  FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_INF(0),  FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1),  FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_INF(0),  FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_1(0),   FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_1(1),   FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_0(1),   FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1),  FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_INF(0),  FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*14*/{ { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/*1.7500*/, FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_V(0, 0x600000, 0x7d)/*0.4375*/, FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(0, 0,        0x7d)/*0.2500*/, FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x61e000, 0x89)/*   1807*/, FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_V(0, 0x37be78, 0x95)/*6020924*/, FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0, 0x504000, 0x8a)/*   3332*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_1(0),                 FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x61e000, 0x89)/*   1807*/, FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_V(0, 0x37be78, 0x95)/*6020924*/, FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_V(0, 0x504000, 0x8a)/*   3332*/, FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x4a30b8, 0x8f)/* 103521.4375*/, FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_V(0, 0x30eaa1, 0x93)/*1449300.1250*/, FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0, 0x600000, 0x82)/*     14.0000*/, FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x1a5200, 0x8c)/*     9876.5*/, FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_V(1, 0x39f7d1, 0x96)/*-12187601.0*/, FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(1, 0x1a4000, 0x89)/*    -1234.0*/, FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_NORM_MAX(1), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_1(1),        FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x23b6a0, 0x8e)/*41910.625000*/, FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_V(0, 0x23b6a0, 0x8b)/* 5238.828125*/, FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_V(0, 0,        0x7c)/*    0.125000*/, FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_1(0),                 FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    /** @todo More Normals. */
    /*
     * Denormals.
     */
    /*23*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),          FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0),        FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_ZE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),          FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(1),        FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_ZE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_QNAN(1),       FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,
              /*256:out  */ -1 },
    /** @todo More Denormals. */
    /*
     * Invalids.
     */
    /*27*/ FP32_TABLE_D1_SS_INVALIDS
    /** @todo Overflow; Underflow; Precision; Rounding, FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(divss_XMM1_XMM2),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(divss_XMM1_FSxBX),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vdivss_XMM1_XMM2_XMM3),  255,         RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vdivss_XMM1_XMM2_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(divss_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(divss_XMM8_FSxBX),       X86_XCPT_AC, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vdivss_XMM8_XMM9_XMM10), 255,         RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vdivss_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]DIVSD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_divsd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0),    FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0),    FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),    FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0),    FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),    FP64_NORM_V3(0), FP64_NORM_V2(0), FP64_0(0)       } },
            { /*src1     */ { FP64_0(0),    FP64_0(1),       FP64_0(1),       FP64_NORM_V1(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_0(1),       FP64_0(1),       FP64_NORM_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1),    FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_0(1),    FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V2(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1),    FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_0(0),    FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),    FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_0(1),    FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V1(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),   FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_1(0),   FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_FSW_ZE,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 7*/{ { /*src2     */ { FP64_INF(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_1(1),   FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(1),   FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_1(1),   FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0),   FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0),  FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_INF(0),  FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1),  FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_INF(0),  FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_1(0),   FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_INF(0), FP64_INF(1), FP64_INF(1) } },
            { /*src1     */ { FP64_1(1),   FP64_INF(1), FP64_INF(1), FP64_INF(0) } },
            { /* =>      */ { FP64_0(1),   FP64_INF(1), FP64_INF(0), FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1),  FP64_QNAN(0), FP64_SNAN(0), FP64_RAND_V0(0) } },
            { /*src1     */ { FP64_INF(0),  FP64_QNAN(0), FP64_SNAN(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(0), FP64_SNAN(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*14*/{ { /*src2     */ { FP64_V(0, 0xe66f500000000, 0x40d)/*31131.828125*/, FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_V(0, 0xe66f500000000, 0x40d)/*31131.828125*/, FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_1(0),                                         FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xaf00000000000, 0x406)/*      215.50*/, FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_V(0, 0xfb74e1d800000, 0x41a)/*266053390.75*/, FP64_RAND_V1(0), FP64_RAND_V1(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_V(0, 0x2d69a80000000, 0x413)/*  1234586.50*/, FP64_RAND_V1(0), FP64_RAND_V1(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(1, 0x107526e749f80, 0x42b)/*-18723145413791.50*/, FP64_RAND_V3(0), FP64_RAND_V1(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x549270a11c760, 0x42c)/* 46807863534478.75*/, FP64_RAND_V0(0), FP64_RAND_V2(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_V(1, 0x4000000000000, 0x400)/*             -2.50*/, FP64_RAND_V0(0), FP64_RAND_V2(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0x6fee0e4bd0000, 0x420)/* 12345678999.62500*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x3c30944926c00, 0x424)/*169753086244.84375*/, FP64_RAND_V2(0), FP64_RAND_V1(1), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_V(0, 0xb800000000000, 0x402)/*          13.75000*/, FP64_RAND_V2(0), FP64_RAND_V1(1), FP64_RAND_V3(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(1), FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V1(1), FP64_RAND_V0(0), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_1(1),        FP64_RAND_V1(1), FP64_RAND_V0(0), FP64_RAND_V2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_RAND_V2(0), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x4da20a80c6990, 0x42e)/*183416666481484.50*/, FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_V(0, 0x8000000000000, 0x3fe)/*              0.75*/, FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(1, 0x68b83b1ed4000, 0x41e)/*-3025935759.4140625*/, FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_V(0, 0x68b83b1ed4000, 0x41f)/* 6051871518.8281250*/, FP64_RAND_V2(0), FP64_RAND_V1(1), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_V(1, 0,               0x400)/*         -2.0000000*/, FP64_RAND_V2(0), FP64_RAND_V1(1), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x4a6a82b05f744, 0x42f)/*363296296296308.25*/, FP64_RAND_V1(1), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(0, 0x8000000000000, 0x400)/*              3.00*/, FP64_RAND_V1(1), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_1(0),                 FP64_0(0),                                                FP64_NORM_MIN(0), FP64_NORM_MAX(1) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_INF(1),      FP64_NORM_MIN(1) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0), FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_INF(1),      FP64_NORM_MIN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_V0(0), FP64_NORM_V1(1), FP64_NORM_V2(0), FP64_NORM_V3(1) } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_SNAN(0),    FP64_SNAN(1),    FP64_QNAN(0)    } },
            { /* =>      */ { FP64_1(0),       FP64_SNAN(0),    FP64_SNAN(1),    FP64_QNAN(0)    } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*24*/{ { /*                     0 /  DENORM_MAX = 0        &_DE */
              /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MIN(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MIN(0), FP64_0(0),          FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),          FP64_DENORM_MIN(0), FP64_0(0),          FP64_DENORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*            DENORM_MAX / -0          = -INF     &_ZE */
              /*src2     */ { FP64_0(1),          FP64_0(0),          FP64_DENORM_MIN(0), FP64_0(0)          } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_0(0),          FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_INF(1),        FP64_DENORM_MIN(0), FP64_0(0),          FP64_DENORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_ZE,
              /*256:out  */ -1 },
          { { /*            DENORM_MAX / -0          = INF      &_ZE */
              /*src2     */ { FP64_0(1),          FP64_0(0),          FP64_DENORM_MIN(0), FP64_0(0)          } },
            { /*src1     */ { FP64_DENORM_MAX(1), FP64_DENORM_MIN(0), FP64_0(0),          FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_INF(0),        FP64_DENORM_MIN(0), FP64_0(0),          FP64_DENORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_ZE,
              /*256:out  */ -1 },
          { { /*           -DENORM_MAX /  DENORM_MIN = (-huge)  &_DE */
              /*src2     */ { FP64_DENORM_MIN(0),                                       FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MAX(1),                                       FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(1, 0xffffffffffffe, 0x432)/*-4503599627370495.0*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*           -DENORM_MAX / -DENORM_MIN = (huge)   &_DE */
              /*src2     */ { FP64_DENORM_MIN(1),                                      FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MAX(1),                                      FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(0, 0xffffffffffffe, 0x432)/*4503599627370495.0*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*           -DENORM_MIN /  DENORM_MAX = (-tiny)  &_DE &_PE */
              /*src2     */ { FP64_DENORM_MAX(0),                                             FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MIN(1),                                             FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(1, 0x0000000000001, 0x3cb)/*-22204460492503135739e-35*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*                    -0 /  DENORM_MIN = -0       &_DE */
              /*src2     */ { FP64_DENORM_MIN(0), FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_0(1),          FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_0(1),          FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*                 -0.25 /  DENORM_MAX = (-HUGE)  &_DE &_PE */
              /*src2     */ { FP64_DENORM_MAX(0),                FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(1, 0, 0x3fd)/*0.25*/,       FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(1, 1, 0x7fb)/*1.1XYZe307*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*                  42.0 /  DENORM_MIN = INF      &_DE &_PE(if OM) &_OE */
              /*src2     */ { FP64_DENORM_MIN(0),                        FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x5000000000000, 0x404)/*42.0*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_INF(0),                               FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*                  42.0 /  DENORM_MIN = INF      &_DE &_PE(if !DM) &_OE */
              /*src2     */ { FP64_DENORM_MIN(0),                        FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x5000000000000, 0x404)/*42.0*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_INF(0),                               FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_OE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
          { { /*                  42.0 /  DENORM_MIN = INF      &_DE &!_PE(if !OM && DM) &_OE */
              /*src2     */ { FP64_DENORM_MIN(0),                        FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x5000000000000, 0x404)/*42.0*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_INF(0),                               FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_OE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /* ~DMASKED:        42.0 /  DENORM_MIN = INF      &_DE &_OE &!_PE(if !DM)*/
              /*src2     */ { FP64_DENORM_MIN(0),                        FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x5000000000000, 0x404)/*42.0*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_INF(0),                               FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_OE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
          { { /* ~OMASKED:        42.0 /  DENORM_MIN = INF      &_DE &_OE &!_PE(if !OM)*/
              /*src2     */ { FP64_DENORM_MIN(0),                        FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x5000000000000, 0x404)/*42.0*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_INF(0),                               FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /* DOMASKED:        42.0 /  DENORM_MIN = INF      &_DE &_OE &_PE(if DM && OM) */
              /*src2     */ { FP64_DENORM_MIN(0),                        FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x5000000000000, 0x404)/*42.0*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_INF(0),                               FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_OM | X86_MXCSR_DE | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /* DAZ:             42.0 /  DENORM_MIN = INF      &_ZE */
              /*src2     */ { FP64_DENORM_MIN(0),                        FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0x5000000000000, 0x404)/*42.0*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_INF(0),                               FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_ZE | X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*            DENORM_MAX /       -42.0 = -5e-310  &_DE &_PE(if UM) &_UE */
              /*src2     */ { FP64_V(1, 0x5000000000000, 0x404)/*-42.0*/,    FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0),                            FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(1, 0x618618618618, 0)/*-5.29XYZe-310*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*            DENORM_MAX /       -42.0 = -5e-310  &_DE &_PE(if !DM) &_UE */
              /*src2     */ { FP64_V(1, 0x5000000000000, 0x404)/*-42.0*/,    FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0),                            FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(1, 0x618618618618, 0)/*-5.29XYZe-310*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
#ifdef TODO_X86_MXCSR_PE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out */
 /*--|41*/{ { /*            DENORM_MAX /       -42.0 = -5e-310  &_DE &!_PE(if DM && !UM) &_UE */
              /*src2     */ { FP64_V(1, 0x5000000000000, 0x404)/*-42.0*/,    FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0),                            FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(1, 0x618618618618, 0)/*-5.29XYZe-310*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
#endif /* TODO_X86_MXCSR_PE_IEM */
 /*41|42*/{ { /*  UMASKED:  DENORM_MAX /        42.0 = 5e-310   &_DE &_PE(if UM) &_UE */
              /*src2     */ { FP64_V(0, 0x5000000000000, 0x404)/*-42.0*/,    FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0),                            FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(0, 0x618618618618, 0)/*-5.29XYZe-310*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_PE | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /* ~DMASKED:  DENORM_MAX /        42.0 = 5e-310   &_DE &_PE(if !DM) &_UE */
              /*src2     */ { FP64_V(0, 0x5000000000000, 0x404)/*-42.0*/,    FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0),                            FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(0, 0x618618618618, 0)/*-5.29XYZe-310*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ -1 },
#ifdef TODO_X86_MXCSR_PE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_PE not set in 128:out */
 /*--|44*/{ { /* D~UMASKED: DENORM_MAX /        42.0 = 5e-310   &_DE &!_PE(if DM && !UM) &_UE */
              /*src2     */ { FP64_V(0, 0x5000000000000, 0x404)/*-42.0*/,    FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0),                            FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(0, 0x618618618618, 0)/*-5.29XYZe-310*/, FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_PE | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
#endif /* TODO_X86_MXCSR_PE_IEM */
 /*43|45*/{ { /* DAZ:       DENORM_MAX /       -42.0 = -0       &- */
              /*src2     */ { FP64_V(1, 0x5000000000000, 0x404)/*-42.0*/, FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0),                         FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_0(1),                                  FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /* DAZ+FZ:    DENORM_MAX /       -42.0 = -0       &- */
              /*src2     */ { FP64_V(1, 0x5000000000000, 0x404)/*-42.0*/, FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0),                         FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_0(1),                                  FP64_DENORM_MIN(0), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          /** @todo how to usefully test FZ, RC_{NEAREST,UP,DOWN,ZERO} ? */
    /*
     * Invalids.
     */
 /*45|47*/ FP64_TABLE_D1_SD_INVALIDS
    /** @todo Underflow, Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(divsd_XMM1_XMM2),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(divsd_XMM1_FSxBX),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vdivsd_XMM1_XMM2_XMM3),  255,         RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vdivsd_XMM1_XMM2_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(divsd_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(divsd_XMM8_FSxBX),       X86_XCPT_AC, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vdivsd_XMM8_XMM9_XMM10), 255,         RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vdivsd_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]ADDSUBPS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_addsubps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    /*
     * Infinity.
     */
    /* 8*/{ { /*src2     */ { FP32_INF(0),  FP32_INF(0), FP32_INF(0), FP32_INF(0),  FP32_INF(1), FP32_INF(1),  FP32_INF(1),  FP32_INF(1) } },
            { /*src1     */ { FP32_INF(0),  FP32_INF(0), FP32_INF(1), FP32_INF(1),  FP32_INF(0), FP32_INF(0),  FP32_INF(1),  FP32_INF(1) } },
            { /* =>      */ { FP32_QNAN(1), FP32_INF(0), FP32_INF(1), FP32_QNAN(1), FP32_INF(0), FP32_QNAN(1), FP32_QNAN(1), FP32_INF(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(0),  FP32_INF(0), FP32_INF(0), FP32_INF(0),  FP32_INF(1), FP32_INF(1),  FP32_INF(1),  FP32_INF(1) } },
            { /*src1     */ { FP32_INF(0),  FP32_INF(0), FP32_INF(1), FP32_INF(1),  FP32_INF(0), FP32_INF(0),  FP32_INF(1),  FP32_INF(1) } },
            { /* =>      */ { FP32_QNAN(1), FP32_INF(0), FP32_INF(1), FP32_QNAN(1), FP32_INF(0), FP32_QNAN(1), FP32_QNAN(1), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(0),  FP32_INF(0), FP32_INF(0), FP32_INF(0),  FP32_INF(1), FP32_INF(1),  FP32_INF(1),  FP32_INF(1) } },
            { /*src1     */ { FP32_INF(0),  FP32_INF(0), FP32_INF(1), FP32_INF(1),  FP32_INF(0), FP32_INF(0),  FP32_INF(1),  FP32_INF(1) } },
            { /* =>      */ { FP32_QNAN(1), FP32_INF(0), FP32_INF(1), FP32_QNAN(1), FP32_INF(0), FP32_QNAN(1), FP32_QNAN(1), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(0),  FP32_INF(0), FP32_INF(0), FP32_INF(0),  FP32_INF(1), FP32_INF(1),  FP32_INF(1),  FP32_INF(1) } },
            { /*src1     */ { FP32_INF(0),  FP32_INF(0), FP32_INF(1), FP32_INF(1),  FP32_INF(0), FP32_INF(0),  FP32_INF(1),  FP32_INF(1) } },
            { /* =>      */ { FP32_QNAN(1), FP32_INF(0), FP32_INF(1), FP32_QNAN(1), FP32_INF(0), FP32_QNAN(1), FP32_QNAN(1), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1), FP32_INF(1),  FP32_INF(1),  FP32_INF(1) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0), FP32_INF(0),  FP32_INF(1),  FP32_INF(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(0), FP32_QNAN(1), FP32_QNAN(1), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },
          { { /*src2     */ { FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_0(1),   FP32_INF(1), FP32_INF(1) } },
            { /*src1     */ { FP32_0(0),   FP32_INF(0), FP32_INF(1), FP32_0(1),   FP32_INF(0), FP32_INF(0), FP32_0(1),   FP32_0(1)   } },
            { /* =>      */ { FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_INF(0),     FP32_NORM_V1(0), FP32_NORM_V2(0), FP32_INF(0),     FP32_NORM_V3(1), FP32_NORM_V2(1), FP32_INF(1),     FP32_INF(1)     } },
            { /*src1     */ { FP32_NORM_V0(0), FP32_INF(0),     FP32_INF(1),     FP32_NORM_V3(1), FP32_INF(0),     FP32_INF(0),     FP32_NORM_V1(1), FP32_NORM_V0(1) } },
            { /* =>      */ { FP32_INF(1),     FP32_INF(0),     FP32_INF(1),     FP32_INF(0),     FP32_INF(0),     FP32_INF(0),     FP32_INF(0),     FP32_INF(1)     } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_V7(0), FP32_NORM_V6(0), FP32_NORM_V5(0), FP32_NORM_V4(0), FP32_NORM_V3(1), FP32_NORM_V2(1), FP32_NORM_V1(1), FP32_NORM_V0(1) } },
            { /*src1     */ { FP32_INF(0),     FP32_INF(0),     FP32_INF(1),     FP32_INF(1),     FP32_INF(0),     FP32_INF(0),     FP32_INF(1),     FP32_INF(1)     } },
            { /* =>      */ { FP32_INF(0),     FP32_INF(0),     FP32_INF(1),     FP32_INF(1),     FP32_INF(0),     FP32_INF(0),     FP32_INF(1),     FP32_INF(1)     } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
    /*
     * Overflow, Precision.
     */
    /*16*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),        FP32_0(0), FP32_0(0),        FP32_INF(0)      } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),        FP32_0(0), FP32_0(0),        FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MIN(0),                                     FP32_NORM_MAX(0), FP32_1(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_1(0), FP32_0(0),       FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0),                                     FP32_NORM_MAX(0), FP32_2(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_1(0), FP32_NORM_V7(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MAX), FP32_NORM_MAX(0), FP32_1(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_2(0), FP32_NORM_V7(1), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1),                     FP32_NORM_V3(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0),                                     FP32_NORM_MIN(1),                    FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1),                     FP32_NORM_V3(0), FP32_NORM_MAX(0), FP32_NORM_MIN(0),                                     FP32_NORM_MIN(1),                    FP32_0(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0),        FP32_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP32_0(0),       FP32_INF(0),      FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MAX), FP32_V(1, 0, FP32_EXP_NORM_MIN + 1), FP32_0(0), FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1),                     FP32_NORM_V3(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0),                                     FP32_NORM_MIN(1),                    FP32_0(0), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MIN(1),                     FP32_NORM_V3(0), FP32_NORM_MAX(0), FP32_NORM_MIN(0),                                     FP32_NORM_MIN(1),                    FP32_0(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0),        FP32_V(1, 0, FP32_EXP_NORM_MIN + 1),  FP32_0(0),       FP32_INF(0),      FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MAX), FP32_V(1, 0, FP32_EXP_NORM_MIN + 1), FP32_0(0), FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE },
          { { /*src2     */ { FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1)                    } },
            { /*src1     */ { FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_0(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MIN(1)                    } },
            { /* =>      */ { FP32_0(1),        FP32_NORM_MAX(0), FP32_INF(1),      FP32_0(0), FP32_0(1), FP32_0(1),        FP32_0(1),        FP32_V(1, 0, FP32_EXP_NORM_MIN + 1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0), FP32_0(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1)                    } },
            { /*src1     */ { FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_0(0), FP32_0(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MIN(1)                    } },
            { /* =>      */ { FP32_0(1),        FP32_NORM_MAX(0), FP32_INF(1),      FP32_0(0), FP32_0(1), FP32_0(1),        FP32_0(1),        FP32_V(1, 0, FP32_EXP_NORM_MIN + 1) } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0),        FP32_INF(1),      FP32_0(0),        FP32_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0),        FP32_NORM_MAX(1), FP32_0(0),        FP32_NORM_MAX(0), FP32_0(0),        FP32_NORM_MAX(1), FP32_0(0),        FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0),        FP32_NORM_MAX(1), FP32_0(0),        FP32_NORM_MAX(0), FP32_0(0),        FP32_NORM_MAX(1), FP32_0(0),        FP32_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src2     */ { FP32_NORM_MIN(0),                                     FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1),                                FP32_NORM_MIN(0),                                     FP32_NORM_MAX(0), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1)                                } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),                            FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1),                                FP32_NORM_SAFE_INT_MAX(0),                            FP32_NORM_MAX(1), FP32_0(0), FP32_NORM_SAFE_INT_MAX(1)                                } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX), FP32_0(0),        FP32_0(0), FP32_V(1, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(0, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX), FP32_0(0),        FP32_0(0), FP32_V(1, FP32_FRAC_NORM_MAX, FP32_EXP_SAFE_INT_MAX + 1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_PE },
    /*
     * Normals.
     */
    /*28*/{ { /*src2     */ { FP32_V(0, 0,        0x7d)/*0.25*/, FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_V(0, 0,        0x7d)/*0.25*/, FP32_V(1, 0,        0x7e)/*-0.50*/, FP32_V(0, 0x400000, 0x7e)/* 0.75*/, FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_V(0, 0,        0x7e)/*0.50*/, FP32_V(0, 0x534000, 0x86)/*211.25*/} },
            { /*src1     */ { FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_V(0, 0x400000, 0x7e)/*0.75*/, FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_V(0, 0,        0x7e)/* 0.50*/, FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_V(0, 0x400000, 0x7e)/*0.75*/, FP32_1(1)                /*- 1.00*/} },
            { /* =>      */ { FP32_V(0, 0x400000, 0x7f)/*1.50*/, FP32_V(0, 0x400000, 0x7f)/* 1.50*/, FP32_V(0, 0,        0x7e)/*0.50*/, FP32_V(1, 0x400000, 0x7e)/*-0.75*/, FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_V(0, 0x400000, 0x7f)/* 1.50*/, FP32_V(0, 0,        0x7d)/*0.25*/, FP32_V(0, 0x524000, 0x86)/*210.25*/} },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_V(0, 0x600000, 0x81)/* 7*/, FP32_V(0, 0x5c0000, 0x84)/*55*/, FP32_V(0, 0x534000, 0x86)/*211.25*/, FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_V(0, 0x7c9000, 0x88)/*   1010.25*/, FP32_V(0, 0x534000, 0x86)/*211.25*/ } },
            { /*src1     */ { FP32_V(0, 0x669050, 0x93)/*1888778*/, FP32_V(0, 0x1ea980, 0x8f)/*  81235*/, FP32_V(0, 0x780000, 0x84)/*62*/, FP32_V(0, 0x600000, 0x81)/* 7*/, FP32_1(0)                /*  1.00*/, FP32_V(0, 0x7c9000, 0x88)/*   1010.25*/, FP32_V(0, 0x253468, 0x93)/*1353357.00*/, FP32_1(1)                /*- 1.00*/ } },
            { /* =>      */ { FP32_V(0, 0x1ea980, 0x8f)/*  81235*/, FP32_V(0, 0x669050, 0x93)/*1888778*/, FP32_V(0, 0x5c0000, 0x84)/*55*/, FP32_V(0, 0x780000, 0x84)/*62*/, FP32_V(1, 0x524000, 0x86)/*210.25*/, FP32_V(0, 0x253468, 0x93)/*1353357.00*/, FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_V(0, 0x524000, 0x86)/*210.25*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_V(1, 0x3c614e, 0x96)/*-12345678*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_V(0, 0x712060, 0x92)/*  987654*/, FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_V(0, 0x2514d6, 0x93)/* 1352346.75*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/ } },
            { /*src1     */ { FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_V(1, 0x712060, 0x92)/*- 987654*/, FP32_V(0, 0x3c614e, 0x96)/* 12345678*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/, FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_V(1, 0x712060, 0x92)/*- 987654*/, FP32_V(1, 0x7c9000, 0x88)/*   -1010.25*/, FP32_V(0, 0x3c614e, 0x96)/*12345678*/ } },
            { /* =>      */ { FP32_V(0, 0x712060, 0x92)/*  987654*/, FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_V(0, 0x3c614e, 0x97)/* 24691356*/, FP32_V(0, 0x3c614e, 0x97)/*24691356*/, FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_V(0, 0x6cb99c, 0x97)/*31028024*/, FP32_V(1, 0x253468, 0x93)/*-1353357.00*/, FP32_V(0, 0x3c614e, 0x97)/*24691356*/ } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
          { { /*src2     */ { FP32_1(0),                                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(1),                                                FP32_NORM_SAFE_INT_MAX(0),                                FP32_1(1),                                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_NORM_SAFE_INT_MAX(0),               FP32_NORM_SAFE_INT_MAX(0)                                } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),                                FP32_1(0),                                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(1),                                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_1(0),                                                FP32_V(0, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_1(1)                                                } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_NORM_SAFE_INT_MAX(0),                                FP32_NORM_SAFE_INT_MAX(0),                                FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX), FP32_NORM_SAFE_INT_MAX(0),                                FP32_NORM_SAFE_INT_MAX(0),                                FP32_1(0),                               FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_SAFE_INT_MAX) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_NORM_MIN(0),                        FP32_0(0),        FP32_0(0),        FP32_NORM_MIN(0), FP32_1(0),                               FP32_NORM_MIN(0)                        } },
            { /*src1     */ { FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_V(0, 0, FP32_EXP_SAFE_INT_MIN + 1), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_0(0),        FP32_NORM_SAFE_INT_MAX(1),               FP32_NORM_MIN(0)                        } },
            { /* =>      */ { FP32_0(1),        FP32_0(1),        FP32_NORM_MIN(0),                        FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_V(1, 0, FP32_EXP_SAFE_INT_MAX + 1), FP32_V(0, 0, FP32_EXP_SAFE_INT_MIN + 1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_V(0, 0x3ce348, 0x90)/*193421.125*/, FP32_V(0, 0x600000, 0x7e)/*      0.875*/, FP32_V(1, 0x0a19f0, 0x8f)/*-70707.875*/, FP32_V(0, 0x3ce348, 0x90)/*193421.125*/, FP32_V(0, 0x00c6d3, 0x94)/*2109876.75*/, FP32_V(0, 0x6423f2, 0x92)/*934463.125*/, FP32_V(0, 0x316740, 0x8e)/* 45415.25*/, FP32_V(0, 0x16b43a, 0x93)/*1234567.25*/ } },
            { /*src1     */ { FP32_V(0, 0x10c030, 0x92)/*592899.000*/, FP32_V(0, 0x769b50, 0x92)/*1010101.000*/, FP32_V(0, 0x52e0b4, 0x92)/*863755.250*/, FP32_V(0, 0x430ebc, 0x91)/*399477.875*/, FP32_V(0, 0x4c20f0, 0x94)/*3344444.00*/, FP32_V(1, 0x0a19f0, 0x8f)/*-70707.875*/, FP32_V(0, 0x792318, 0x91)/*510232.75*/, FP32_V(0, 0x00c6d3, 0x94)/*2109876.75*/ } },
            { /* =>      */ { FP32_V(0, 0x430ebc, 0x91)/*399477.875*/, FP32_V(0, 0x769b5e, 0x92)/*1010101.875*/, FP32_V(0, 0x6423f2, 0x92)/*934463.125*/, FP32_V(0, 0x10c030, 0x92)/*592899.000*/, FP32_V(0, 0x16b43a, 0x93)/*1234567.25*/, FP32_V(0, 0x52e0b4, 0x92)/*863755.250*/, FP32_V(0, 0x62f630, 0x91)/*464817.50*/, FP32_V(0, 0x4c20f0, 0x94)/*3344444.00*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
    /** @todo More Normals. */
   /*
    * Denormals.
    */
    /*34*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(0),                                   FP32_DENORM_MAX(0), FP32_DENORM_MAX(1),                                   FP32_0(0),          FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0),                                   FP32_0(0),          FP32_DENORM_MAX(1),                                   FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_0(0),          FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MIN), FP32_DENORM_MAX(1), FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MIN), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|35*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(0),                                   FP32_DENORM_MAX(0), FP32_DENORM_MAX(1),                                   FP32_0(0),          FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0),                                   FP32_0(0),          FP32_DENORM_MAX(1),                                   FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_0(0),          FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MIN), FP32_DENORM_MAX(1), FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MIN), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*35|36*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(0),                                   FP32_DENORM_MAX(0), FP32_DENORM_MAX(1),                                   FP32_0(0),          FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0),                                   FP32_0(0),          FP32_DENORM_MAX(1),                                   FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_0(0),          FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MIN), FP32_DENORM_MAX(1), FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MIN), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1),                                   FP32_0(0),          FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_0(0),          FP32_DENORM_MAX(1),                                   FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MIN), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1),                                   FP32_0(0),          FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_0(0),          FP32_DENORM_MAX(1),                                   FP32_DENORM_MAX(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(1),          FP32_0(1),          FP32_0(0),          FP32_V(0, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MIN), FP32_0(1),          FP32_V(1, FP32_FRAC_NORM_MAX - 1, FP32_EXP_NORM_MIN), FP32_0(0),          FP32_0(1)          } },
              /*mxcsr:in */ X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_DE | X86_MXCSR_UE | X86_MXCSR_PE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0)} },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)} },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)} },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 256:out */
 /*--|40*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0)} },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)} },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)} },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*39|41*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0)} },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)} },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)} },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0) } },
            { /* =>      */ { FP32_0(1),          FP32_0(0),          FP32_0(1),          FP32_0(0),          FP32_0(1),          FP32_0(0),          FP32_0(1),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN },
    /** @todo More Denormals. */
    /*
     * Invalids.
     */
 /*45|47*/ FP32_TABLE_D1_PS_INVALIDS
    /** @todo Underflow; Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(addsubps_XMM1_XMM2),          255, RM_REG, T_SSE3,    XMM1,  XMM1,  XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(addsubps_XMM1_FSxBX),         255, RM_MEM, T_SSE3,    XMM1,  XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vaddsubps_XMM1_XMM2_XMM3),    255, RM_REG, T_AVX_128, XMM1,  XMM2,  XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vaddsubps_XMM1_XMM2_FSxBX),   255, RM_MEM, T_AVX_128, XMM1,  XMM2,  FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vaddsubps_YMM1_YMM2_YMM3),    255, RM_REG, T_AVX_256, YMM1,  YMM2,  YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vaddsubps_YMM1_YMM2_FSxBX),   255, RM_MEM, T_AVX_256, YMM1,  YMM2,  FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(addsubps_XMM8_XMM9),          255, RM_REG, T_SSE3,    XMM8,  XMM8,  XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(addsubps_XMM8_FSxBX),         255, RM_MEM, T_SSE3,    XMM8,  XMM8,  FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vaddsubps_XMM8_XMM9_XMM10),   255, RM_REG, T_AVX_128, XMM8,  XMM9,  XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vaddsubps_XMM8_XMM9_FSxBX),   255, RM_MEM, T_AVX_128, XMM8,  XMM9,  FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vaddsubps_YMM13_YMM14_YMM15), 255, RM_REG, T_AVX_256, YMM13, YMM14, YMM15, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vaddsubps_YMM13_YMM14_FSxBX), 255, RM_MEM, T_AVX_256, YMM13, YMM14, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]ADDSUBPD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_addsubpd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(1) } },
            { /*src1     */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(1) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(0), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(1) } },
            { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    /*
     * Infinity.
     */
    /* 9*/{ { /*src2     */ { FP64_INF(0),  FP64_INF(0), FP64_INF(0), FP64_INF(0)  } },
            { /*src1     */ { FP64_INF(0),  FP64_INF(0), FP64_INF(1), FP64_INF(1)  } },
            { /* =>      */ { FP64_QNAN(1), FP64_INF(0), FP64_INF(1), FP64_QNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(0),  FP64_QNAN(1), FP64_QNAN(1), FP64_INF(1) } },
            { /*src1     */ { FP64_INF(0),  FP64_QNAN(1), FP64_QNAN(1), FP64_INF(1) } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1), FP64_QNAN(1), FP64_INF(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(0),  FP64_INF(0), FP64_INF(0), FP64_INF(0)  } },
            { /*src1     */ { FP64_INF(0),  FP64_INF(0), FP64_INF(1), FP64_INF(1)  } },
            { /* =>      */ { FP64_QNAN(1), FP64_INF(0), FP64_INF(1), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(1), FP64_INF(1),  FP64_INF(1),  FP64_INF(1) } },
            { /*src1     */ { FP64_INF(0), FP64_INF(0),  FP64_INF(1),  FP64_INF(1) } },
            { /* =>      */ { FP64_INF(0), FP64_QNAN(1), FP64_QNAN(1), FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO | X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(0),  FP64_INF(0), FP64_INF(0), FP64_INF(0)  } },
            { /*src1     */ { FP64_INF(0),  FP64_INF(0), FP64_INF(1), FP64_INF(1)  } },
            { /* =>      */ { FP64_QNAN(1), FP64_INF(0), FP64_INF(1), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(1), FP64_INF(1),  FP64_INF(1),  FP64_INF(1) } },
            { /*src1     */ { FP64_INF(0), FP64_INF(0),  FP64_INF(1),  FP64_INF(1) } },
            { /* =>      */ { FP64_INF(0), FP64_QNAN(1), FP64_QNAN(1), FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(0),  FP64_INF(0), FP64_INF(0), FP64_INF(0)  } },
            { /*src1     */ { FP64_INF(0),  FP64_INF(0), FP64_INF(1), FP64_INF(1)  } },
            { /* =>      */ { FP64_QNAN(1), FP64_INF(0), FP64_INF(1), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(1), FP64_INF(1),  FP64_INF(1),  FP64_INF(1) } },
            { /*src1     */ { FP64_INF(0), FP64_INF(0),  FP64_INF(1),  FP64_INF(1) } },
            { /* =>      */ { FP64_INF(0), FP64_QNAN(1), FP64_QNAN(1), FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_INF(1), FP64_INF(1)  } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_INF(0), FP64_INF(0)  } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_INF(0), FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_IE },
          { { /*src2     */ { FP64_INF(0), FP64_0(0),   FP64_0(1),   FP64_0(1)   } },
            { /*src1     */ { FP64_0(0),   FP64_INF(0), FP64_INF(0), FP64_INF(0) } },
            { /* =>      */ { FP64_INF(1), FP64_INF(0), FP64_INF(0), FP64_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_INF(0),     FP64_NORM_V1(0), FP64_INF(1),     FP64_INF(1)     } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_INF(0),     FP64_NORM_V1(1), FP64_NORM_V0(1) } },
            { /* =>      */ { FP64_INF(1),     FP64_INF(0),     FP64_INF(0),     FP64_INF(1)     } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_NORM_V3(0), FP64_NORM_V3(0), FP64_NORM_V1(1), FP64_NORM_V0(1) } },
            { /*src1     */ { FP64_INF(0),     FP64_INF(0),     FP64_INF(1),     FP64_INF(1)     } },
            { /* =>      */ { FP64_INF(0),     FP64_INF(0),     FP64_INF(1),     FP64_INF(1)     } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_ZERO },
    /*
     * Overflow, Precision.
     */
    /*21*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0),        FP64_INF(0)      } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MIN(0),                                     FP64_NORM_MAX(0), FP64_1(0), FP64_NORM_MAX(1) } },
            { /*src1     */ { FP64_NORM_MAX(0),                                     FP64_NORM_MAX(0), FP64_2(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MAX), FP64_NORM_MAX(0), FP64_1(0), FP64_NORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_1(0), FP64_0(0),       FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MAX(1), FP64_1(0), FP64_NORM_V3(1), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_NORM_MAX(1), FP64_2(0), FP64_NORM_V3(1), FP64_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MIN(1),                     FP64_NORM_V3(0), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MIN(1),                     FP64_NORM_V3(0), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),        FP64_V(1, 0, FP64_EXP_NORM_MIN + 1),  FP64_0(0),       FP64_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MAX(0),                                     FP64_NORM_MIN(1),                    FP64_0(0), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MIN(0),                                     FP64_NORM_MIN(1),                    FP64_0(0), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MAX), FP64_V(1, 0, FP64_EXP_NORM_MIN + 1), FP64_0(0), FP64_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE },
          { { /*src2     */ { FP64_NORM_MIN(1), FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_V2(1) } },
            { /*src1     */ { FP64_NORM_MIN(1), FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_0(0)       } },
            { /* =>      */ { FP64_0(1),        FP64_NORM_MAX(0), FP64_INF(1),      FP64_NORM_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),        FP64_INF(1),      FP64_0(0),        FP64_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),        FP64_NORM_MAX(1), FP64_0(0),        FP64_NORM_MAX(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),        FP64_NORM_MAX(1), FP64_0(0),        FP64_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ X86_MXCSR_RC_UP | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY },
          { { /*src2     */ { FP64_NORM_MIN(0),                                     FP64_NORM_MAX(0), FP64_0(0), FP64_NORM_SAFE_INT_MAX(1)                                } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                            FP64_NORM_MAX(1), FP64_0(0), FP64_NORM_SAFE_INT_MAX(1)                                } },
            { /* =>      */ { FP64_V(0, FP64_FRAC_NORM_MAX, FP64_EXP_SAFE_INT_MAX), FP64_0(0),        FP64_0(0), FP64_V(1, FP64_FRAC_NORM_MAX, FP64_EXP_SAFE_INT_MAX + 1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_PE },
    /*
     * Normals.
     */
    /*31*/{ { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0), FP64_NORM_V1(0), FP64_NORM_MAX(1) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_V1(0), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),        FP64_0(0),        FP64_0(0),       FP64_0(0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_V(0, 0,               0x409)/*1024*/, FP64_V(0, 0,               0x409)/*1024*/, FP64_V(1, 0xc000000000000, 0x401)/* 7*/, FP64_V(0, 0xb800000000000, 0x404)/*55*/ } },
            { /*src1     */ { FP64_V(0, 0x8000000000000, 0x409)/*1536*/, FP64_V(0, 0,               0x408)/* 512*/, FP64_V(0, 0xb800000000000, 0x404)/*55*/, FP64_V(0, 0xc000000000000, 0x401)/* 7*/ } },
            { /* =>      */ { FP64_V(0, 0,               0x408)/* 512*/, FP64_V(0, 0x8000000000000, 0x409)/*1536*/, FP64_V(0, 0xf000000000000, 0x404)/*62*/, FP64_V(0, 0xf000000000000, 0x404)/*62*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_V(0, 0x9000000000000, 0x405)/*      100*/, FP64_V(0, 0xd6f3458800000, 0x41c)/*987654321*/, FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/, FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/ } },
            { /*src1     */ { FP64_V(0, 0xd6f3458800000, 0x41c)/*987654321*/, FP64_V(1, 0x9000000000000, 0x405)/*     -100*/, FP64_V(0, 0xcf00348ec5858, 0x432)/*4072598123457580.0*/, FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/ } },
            { /* =>      */ { FP64_V(0, 0xd6f3426800000, 0x41c)/*987654221*/, FP64_V(0, 0xd6f3426800000, 0x41c)/*987654221*/, FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/, FP64_V(0, 0xcf00348ec5858, 0x432)/*4072598123457580.0*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_NORM_SAFE_INT_MAX(0),                                FP64_NORM_SAFE_INT_MAX(0)                                } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                                FP64_1(0),                                                FP64_1(0),                                                FP64_1(1)                                                } },
            { /* =>      */ { FP64_1(0),                                                FP64_NORM_SAFE_INT_MAX(0),                                FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_1(0),                                                FP64_NORM_SAFE_INT_MAX(0),               FP64_1(1),                                                FP64_1(1)                               } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                                FP64_1(0),                               FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_NORM_SAFE_INT_MAX(1)               } },
            { /* =>      */ { FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_SAFE_INT_MAX), FP64_V(0, 0, FP64_EXP_SAFE_INT_MAX + 1), FP64_NORM_SAFE_INT_MAX(0),                                FP64_V(1, 0, FP64_EXP_SAFE_INT_MAX + 1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_NORM_SAFE_INT_MAX(1),  FP64_NORM_MIN(0),                        FP64_NORM_MIN(1),                        FP64_NORM_MIN(0) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(1),  FP64_NORM_MIN(0),                        FP64_NORM_MIN(0),                        FP64_0(0)        } },
            { /* =>      */ { FP64_0(0),                  FP64_V(0, 0, FP64_EXP_SAFE_INT_MIN + 1), FP64_V(0, 0, FP64_EXP_SAFE_INT_MIN + 1), FP64_NORM_MIN(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_NORM_MIN(1),                        FP64_NORM_MIN(0),                        FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/ } },
            { /*src1     */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_NORM_MIN(1),                        FP64_NORM_MIN(1),                        FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/ } },
            { /* =>      */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_V(1, 0, FP64_EXP_SAFE_INT_MIN + 1), FP64_V(1, 0, FP64_EXP_SAFE_INT_MIN + 1), FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/ } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /** @todo More Normals. */
    /*
     * Denormals.
     */
    /*38*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(1),                                   FP64_DENORM_MAX(0), FP64_DENORM_MAX(0)                                   } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1),                                   FP64_DENORM_MAX(0), FP64_DENORM_MAX(0)                                   } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MIN), FP64_0(0),          FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MIN) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(1),                                   FP64_DENORM_MAX(0), FP64_DENORM_MAX(0)                                   } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1),                                   FP64_DENORM_MAX(0), FP64_DENORM_MAX(0)                                   } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MIN), FP64_0(0),          FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MIN) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|40*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(1),                                   FP64_DENORM_MAX(0), FP64_DENORM_MAX(0)                                   } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1),                                   FP64_DENORM_MAX(0), FP64_DENORM_MAX(0)                                   } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MIN), FP64_0(0),          FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MIN) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*40|41*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_DENORM_MAX(0)                                   } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0)                                   } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_DENORM_MAX(1), FP64_0(0),          FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MIN) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_DENORM_MAX(0)                                   } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0)                                   } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_DENORM_MAX(1), FP64_0(0),          FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MIN) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|43*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_DENORM_MAX(0)                                   } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0)                                   } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_DENORM_MAX(1), FP64_0(0),          FP64_V(0, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MIN) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*42|44*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(1),                                   FP64_0(0),          FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1),                                   FP64_DENORM_MAX(0), FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MIN), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(1),                                   FP64_0(0),          FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1),                                   FP64_DENORM_MAX(0), FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MIN), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|46*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(1),                                   FP64_0(0),          FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1),                                   FP64_DENORM_MAX(0), FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_V(1, FP64_FRAC_NORM_MAX - 1, FP64_EXP_NORM_MIN), FP64_DENORM_MAX(0), FP64_DENORM_MAX(1) } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*44|47*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0),          FP64_0(0)} },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0)} },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0)} },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0),          FP64_0(0)} },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0)} },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0)} },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
#ifdef TODO_X86_MXCSR_UE_IEM /** @todo THIS FAILS ON IEM: X86_MXCSR_UE not set in 128:out or 256:out */
 /*--|49*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0),          FP64_0(0)} },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0)} },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_DENORM_MAX(0), FP64_0(0)} },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
#endif /* TODO_X86_MXCSR_UE_IEM */
 /*46|50*/{ { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)         } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MIN(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MIN(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MIN(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MIN(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(1),          FP64_0(0),          FP64_0(1),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(1),          FP64_0(0),          FP64_0(1),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_DOWN },
    /** @todo More Denormals. */
    /*
     * Invalids.
     */
 /*56|60*/ FP64_TABLE_D1_PD_INVALIDS
    /** @todo Underflow; Precision; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(addsubpd_XMM1_XMM2),          255, RM_REG, T_SSE3,    XMM1,  XMM1,  XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(addsubpd_XMM1_FSxBX),         255, RM_MEM, T_SSE3,    XMM1,  XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vaddsubpd_XMM1_XMM2_XMM3),    255, RM_REG, T_AVX_128, XMM1,  XMM2,  XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vaddsubpd_XMM1_XMM2_FSxBX),   255, RM_MEM, T_AVX_128, XMM1,  XMM2,  FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vaddsubpd_YMM1_YMM2_YMM3),    255, RM_REG, T_AVX_256, YMM1,  YMM2,  YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vaddsubpd_YMM1_YMM2_FSxBX),   255, RM_MEM, T_AVX_256, YMM1,  YMM2,  FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(addsubpd_XMM8_XMM9),          255, RM_REG, T_SSE3,    XMM8,  XMM8,  XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(addsubpd_XMM8_FSxBX),         255, RM_MEM, T_SSE3,    XMM8,  XMM8,  FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vaddsubpd_XMM8_XMM9_XMM10),   255, RM_REG, T_AVX_128, XMM8,  XMM9,  XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vaddsubpd_XMM8_XMM9_FSxBX),   255, RM_MEM, T_AVX_128, XMM8,  XMM9,  FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vaddsubpd_YMM13_YMM14_YMM15), 255, RM_REG, T_AVX_256, YMM13, YMM14, YMM15, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vaddsubpd_YMM13_YMM14_FSxBX), 255, RM_MEM, T_AVX_256, YMM13, YMM14, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]MAXPS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_maxps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 9*/{ { /*src2     */ { FP32_INF(0), FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(1), FP32_0(0),   FP32_INF(1), FP32_0(0)   } },
            { /*src1     */ { FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(0), FP32_0(0),   FP32_INF(1), FP32_0(0),   FP32_INF(1) } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_INF(0), FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(1), FP32_0(0),   FP32_INF(1), FP32_0(0)   } },
            { /*src1     */ { FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(0), FP32_0(0),   FP32_INF(1), FP32_0(0),   FP32_INF(1) } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_INF(0), FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(1), FP32_0(0),   FP32_INF(1), FP32_0(0)   } },
            { /*src1     */ { FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(0), FP32_0(0),   FP32_INF(1), FP32_0(0),   FP32_INF(1) } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_INF(0), FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(1), FP32_0(0),   FP32_INF(1), FP32_0(0)   } },
            { /*src1     */ { FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(0), FP32_0(0),   FP32_INF(1), FP32_0(0),   FP32_INF(1) } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_INF(0), FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(1), FP32_0(0),   FP32_INF(1), FP32_0(0)   } },
            { /*src1     */ { FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(0), FP32_0(0),   FP32_INF(1), FP32_0(0),   FP32_INF(1) } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0) } },
            { /*src1     */ { FP32_INF(0), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(0) } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(0), FP32_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0) } },
            { /*src1     */ { FP32_INF(0), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(0) } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(0), FP32_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_INF(0),     FP32_NORM_V1(0), FP32_INF(1),     FP32_NORM_V3(1), FP32_INF(1),     FP32_NORM_V5(0), FP32_INF(1),     FP32_NORM_V7(0) } },
            { /*src1     */ { FP32_NORM_V0(0), FP32_INF(1),     FP32_NORM_V2(0), FP32_INF(1),     FP32_NORM_V4(1), FP32_INF(1),     FP32_NORM_V6(0), FP32_INF(0)     } },
            { /* =>      */ { FP32_INF(0),     FP32_NORM_V1(0), FP32_NORM_V2(0), FP32_NORM_V3(1), FP32_NORM_V4(1), FP32_NORM_V5(0), FP32_NORM_V6(0), FP32_INF(0)     } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_INF(0),     FP32_NORM_V1(0), FP32_INF(1),     FP32_NORM_V3(1), FP32_INF(1),     FP32_NORM_V5(0), FP32_INF(1),     FP32_NORM_V7(0) } },
            { /*src1     */ { FP32_NORM_V0(0), FP32_INF(1),     FP32_NORM_V2(0), FP32_INF(1),     FP32_NORM_V4(1), FP32_INF(1),     FP32_NORM_V6(0), FP32_INF(0)     } },
            { /* =>      */ { FP32_INF(0),     FP32_NORM_V1(0), FP32_NORM_V2(0), FP32_NORM_V3(1), FP32_NORM_V4(1), FP32_NORM_V5(0), FP32_NORM_V6(0), FP32_INF(0)     } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_NORM_V7(0), FP32_INF(1),     FP32_NORM_V5(1), FP32_INF(1),     FP32_NORM_V3(0), FP32_INF(1),     FP32_NORM_V1(0), FP32_INF(0)     } },
            { /*src1     */ { FP32_INF(1),     FP32_NORM_V6(0), FP32_INF(1),     FP32_NORM_V4(1), FP32_INF(1),     FP32_NORM_V2(0), FP32_INF(0),     FP32_NORM_V0(0) } },
            { /* =>      */ { FP32_NORM_V7(0), FP32_NORM_V6(0), FP32_NORM_V5(1), FP32_NORM_V4(1), FP32_NORM_V3(0), FP32_NORM_V2(0), FP32_INF(0),     FP32_INF(0)     } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_NORM_V7(0), FP32_INF(1),     FP32_NORM_V5(1), FP32_INF(1),     FP32_NORM_V3(0), FP32_INF(1),     FP32_NORM_V1(0), FP32_INF(0)     } },
            { /*src1     */ { FP32_INF(0),     FP32_NORM_V6(0), FP32_INF(0),     FP32_NORM_V4(1), FP32_INF(0),     FP32_NORM_V2(0), FP32_INF(1),     FP32_NORM_V0(0) } },
            { /* =>      */ { FP32_INF(0),     FP32_NORM_V6(0), FP32_INF(0),     FP32_NORM_V4(1), FP32_INF(0),     FP32_NORM_V2(0), FP32_NORM_V1(0), FP32_INF(0)     } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    /*
     * Normals.
     */
    /*20*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_0(0),        FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_0(1),        FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0),        FP32_0(0),        FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_0(1),        FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0),        FP32_NORM_MAX(1), FP32_0(1),        FP32_0(1),        FP32_NORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_0(0),        FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_0(1),        FP32_NORM_MIN(1), FP32_NORM_MIN(1) } },
            { /*src1     */ { FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_0(0),        FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_0(1),        FP32_NORM_MIN(0) } },
            { /* =>      */ { FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_0(0),        FP32_NORM_MIN(1), FP32_0(1),        FP32_0(1),        FP32_NORM_MIN(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_NORM_MIN(1) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MAX(0), FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MIN(0), FP32_NORM_MIN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_MIN(0),          FP32_NORM_MIN(0),          FP32_NORM_MIN(1),          FP32_NORM_MIN(1),          FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(1) } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_MIN(0),          FP32_NORM_MIN(1),          FP32_NORM_MIN(0),          FP32_NORM_MIN(1)          } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_MIN(0),          FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_MIN(1),          FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_MIN(0),          FP32_NORM_MIN(1)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_V(0, 0, 0x7d)/*0.25*/, FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_V(0, 0, 0x7d)/*0.25*/, FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_V(0, 0, 0x7d)/* 0.25*/, FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_V(1, 0, 0x7d)/*-0.25*/ } },
            { /*src1     */ { FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_V(0, 0, 0x7e)/*0.50*/, FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_V(0, 0, 0x7e)/*0.50*/, FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_V(1, 0, 0x7e)/*-0.50*/, FP32_V(1, 0,        0x7d)/*0.25*/, FP32_V(1, 0, 0x7e)/*-0.50*/ } },
            { /* =>      */ { FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_V(0, 0, 0x7e)/*0.50*/, FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_V(0, 0, 0x7e)/*0.50*/, FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_V(0, 0, 0x7d)/* 0.25*/, FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_V(1, 0, 0x7d)/*-0.25*/ } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_V1(0), FP32_NORM_V2(1), FP32_NORM_V3(1), FP32_NORM_V5(0), FP32_0(1),       FP32_NORM_V5(1), FP32_0(0)       } },
            { /*src1     */ { FP32_NORM_V1(0),  FP32_NORM_V1(1), FP32_NORM_V2(0), FP32_NORM_V3(1), FP32_0(1),       FP32_NORM_V6(0), FP32_0(1),       FP32_NORM_V7(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_NORM_V1(0), FP32_NORM_V2(0), FP32_NORM_V3(1), FP32_NORM_V5(0), FP32_NORM_V6(0), FP32_0(1),       FP32_NORM_V7(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_V(0, 0x5c0000, 0x84)/*55*/, FP32_V(1, 0x2514d6, 0x93)/*-1352346.75*/, FP32_V(1, 0x5c0000, 0x84)/*-55*/, FP32_V(1, 0x2514d6, 0x93)/*-1352346.75*/, FP32_V(1, 0x534000, 0x86)/*-211.25*/, FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_1(1) } },
            { /*src1     */ { FP32_V(0, 0x1ea980, 0x8f)/*  81235*/, FP32_V(0, 0x600000, 0x81)/* 7*/, FP32_V(0, 0x7c9000, 0x88)/*    1010.25*/, FP32_V(0, 0x600000, 0x81)/*  7*/, FP32_V(0, 0x253468, 0x93)/* 1353357.00*/, FP32_1(1),                            FP32_V(1, 0x712060, 0x92)/*- 987654*/, FP32_1(0) } },
            { /* =>      */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_V(0, 0x5c0000, 0x84)/*55*/, FP32_V(0, 0x7c9000, 0x88)/*    1010.25*/, FP32_V(0, 0x600000, 0x81)/*  7*/, FP32_V(0, 0x253468, 0x93)/* 1353357.00*/, FP32_1(1),                            FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_V(0, 0x600000, 0x7e)/*      0.875*/, FP32_V(0, 0x3ce348, 0x90)/*193421.125*/, FP32_V(0, 0x6423f2, 0x92)/*934463.125*/, FP32_NORM_MIN(1), FP32_NORM_MIN(0),          FP32_V(0, 0x16b43a, 0x93)/*1234567.25*/, FP32_V(0, 0x792318, 0x91)/*510232.75*/, FP32_V(0, 0x600000, 0x7e)/* 0.875*/ } },
            { /*src1     */ { FP32_V(0, 0x769b50, 0x92)/*1010101.000*/, FP32_V(0, 0x430ebc, 0x91)/*399477.875*/, FP32_V(0, 0x52e0b4, 0x92)/*863755.250*/, FP32_NORM_MIN(1), FP32_NORM_SAFE_INT_MAX(1), FP32_V(0, 0x00c6d3, 0x94)/*2109876.75*/, FP32_V(1, 0x316740, 0x8e)/*-45415.25*/, FP32_V(1, 0,        0x7d)/*-0.250*/ } },
            { /* =>      */ { FP32_V(0, 0x769b50, 0x92)/*1010101.000*/, FP32_V(0, 0x430ebc, 0x91)/*399477.875*/, FP32_V(0, 0x6423f2, 0x92)/*934463.125*/, FP32_NORM_MIN(1), FP32_NORM_MIN(0),          FP32_V(0, 0x00c6d3, 0x94)/*2109876.75*/, FP32_V(0, 0x792318, 0x91)/*510232.75*/, FP32_V(0, 0x600000, 0x7e)/* 0.875*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_V(0, 0x490fda, 0x80)/*3.1415926*/, FP32_V(0, 0x620b2e, 0x92)/*925874.9*/, FP32_V(0, 0x5dd520, 0x8e)/* 56789.125*/, FP32_V(1, 0x40e6b6, 0x8c)/*-12345.678*/, FP32_V(1, 0x490fda, 0x80)/*-3.1415926*/, FP32_V(1, 0x620b2e, 0x92)/*-925874.8*/, FP32_V(0, 0x5dd520, 0x8e)/*56789.125*/, FP32_V(0, 0x40e6b6, 0x8c)/*12345.678*/ } },
            { /*src1     */ { FP32_V(0, 0x490fdb, 0x80)/*3.1415927*/, FP32_V(0, 0x620b2d, 0x92)/*925874.8*/, FP32_V(1, 0x5dd521, 0x8e)/*-56789.127*/, FP32_V(1, 0x40e6b7, 0x8c)/*-12345.679*/, FP32_V(1, 0x490fdb, 0x80)/*-3.1415927*/, FP32_V(0, 0x620b2d, 0x92)/* 925874.9*/, FP32_V(0, 0x5dd521, 0x8e)/*56789.127*/, FP32_V(0, 0x40e6b7, 0x8c)/*12345.679*/ } },
            { /* =>      */ { FP32_V(0, 0x490fdb, 0x80)/*3.1415927*/, FP32_V(0, 0x620b2e, 0x92)/*925874.9*/, FP32_V(0, 0x5dd520, 0x8e)/* 56789.125*/, FP32_V(1, 0x40e6b6, 0x8c)/*-12345.678*/, FP32_V(1, 0x490fda, 0x80)/*-3.1415926*/, FP32_V(0, 0x620b2d, 0x92)/* 925874.9*/, FP32_V(0, 0x5dd521, 0x8e)/*56789.127*/, FP32_V(0, 0x40e6b7, 0x8c)/*12345.678*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /** @todo More Normals. */
    /*
     * Denormals.
     */
    /*29*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /* =>      */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(1)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
    /** @todo More Denormals. */
    /*35*/ FP32_TABLE_D9_PS_INVALIDS
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(maxps_XMM1_XMM2),        255, RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(maxps_XMM1_FSxBX),       255, RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vmaxps_XMM1_XMM2_XMM3),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vmaxps_XMM1_XMM2_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vmaxps_YMM1_YMM2_YMM3),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vmaxps_YMM1_YMM2_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(maxps_XMM8_XMM9),        255, RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(maxps_XMM8_FSxBX),       255, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vmaxps_XMM8_XMM9_XMM10), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmaxps_XMM8_XMM9_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmaxps_YMM8_YMM9_YMM10), 255, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmaxps_YMM8_YMM9_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]MAXPD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_maxpd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(1), FP64_0(1), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(1), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 9*/{ { /*src2     */ { FP64_INF(0), FP64_0(0),   FP64_INF(0), FP64_0(1)   } },
            { /*src1     */ { FP64_0(0),   FP64_INF(0), FP64_0(1),   FP64_INF(0) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(0), FP64_INF(0), FP64_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_INF(0), FP64_0(0),   FP64_INF(0), FP64_0(1)   } },
            { /*src1     */ { FP64_0(0),   FP64_INF(0), FP64_0(1),   FP64_INF(0) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(0), FP64_INF(0), FP64_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_INF(0), FP64_0(0),   FP64_INF(0), FP64_0(1)   } },
            { /*src1     */ { FP64_0(0),   FP64_INF(0), FP64_0(1),   FP64_INF(0) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(0), FP64_INF(0), FP64_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_INF(0), FP64_0(0),   FP64_INF(0), FP64_0(1)   } },
            { /*src1     */ { FP64_0(0),   FP64_INF(0), FP64_0(1),   FP64_INF(0) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(0), FP64_INF(0), FP64_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_INF(0), FP64_0(0),   FP64_INF(0), FP64_0(1)   } },
            { /*src1     */ { FP64_0(0),   FP64_INF(0), FP64_0(1),   FP64_INF(0) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(0), FP64_INF(0), FP64_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_INF(0), FP64_INF(0), FP64_INF(1), FP64_INF(1) } },
            { /*src1     */ { FP64_INF(0), FP64_INF(1), FP64_INF(0), FP64_INF(1) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(0), FP64_INF(0), FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_INF(0), FP64_INF(0), FP64_INF(1), FP64_INF(1) } },
            { /*src1     */ { FP64_INF(0), FP64_INF(1), FP64_INF(0), FP64_INF(1) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(0), FP64_INF(0), FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_INF(0),     FP64_NORM_V1(0), FP64_INF(1),     FP64_NORM_V3(1) } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_INF(1),     FP64_NORM_V2(0), FP64_INF(1)     } },
            { /* =>      */ { FP64_INF(0),     FP64_NORM_V1(0), FP64_NORM_V2(0), FP64_NORM_V3(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_INF(0),     FP64_NORM_V1(0), FP64_INF(1),     FP64_NORM_V3(1) } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_INF(1),     FP64_NORM_V2(0), FP64_INF(1)     } },
            { /* =>      */ { FP64_INF(0),     FP64_NORM_V1(0), FP64_NORM_V2(0), FP64_NORM_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_NORM_V1(0), FP64_INF(1),     FP64_NORM_V2(1), FP64_INF(1)     } },
            { /*src1     */ { FP64_INF(1),     FP64_NORM_V3(0), FP64_INF(1),     FP64_NORM_V0(1) } },
            { /* =>      */ { FP64_NORM_V1(0), FP64_NORM_V3(0), FP64_NORM_V2(1), FP64_NORM_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_NORM_V1(0), FP64_INF(1),     FP64_NORM_V3(1), FP64_INF(1)     } },
            { /*src1     */ { FP64_INF(0),     FP64_NORM_V2(0), FP64_INF(0),     FP64_NORM_V0(1) } },
            { /* =>      */ { FP64_INF(0),     FP64_NORM_V2(0), FP64_INF(0),     FP64_NORM_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    /*
     * Normals.
     */
    /*20*/{ { /*src2     */ { FP64_NORM_V0(0), FP64_NORM_V1(1), FP64_NORM_V2(0), FP64_NORM_V1(1) } },
            { /*src1     */ { FP64_NORM_V3(1), FP64_NORM_V1(0), FP64_NORM_V2(1), FP64_NORM_V1(0) } },
            { /* =>      */ { FP64_NORM_V0(0), FP64_NORM_V1(0), FP64_NORM_V2(0), FP64_NORM_V1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_NORM_V0(0), FP64_0(1),       FP64_NORM_V2(0), FP64_0(1)       } },
            { /*src1     */ { FP64_0(0),       FP64_NORM_V1(1), FP64_0(0),       FP64_NORM_V1(0) } },
            { /* =>      */ { FP64_NORM_V0(0), FP64_0(1),       FP64_NORM_V2(0), FP64_NORM_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_V(0, 0, 0x409)/*1024*/, FP64_V(0, 0xb800000000000, 0x404)/*55*/, FP64_V(0, 0x8000000000000, 0x409)/*1536*/, FP64_V(0, 0xf000000000000, 0x404)/* 62*/ } },
            { /*src1     */ { FP64_V(0, 0, 0x408)/* 512*/, FP64_V(0, 0xc000000000000, 0x401)/* 7*/, FP64_1(1),                                 FP64_V(1, 0xf000000000000, 0x404)/*-62*/ } },
            { /* =>      */ { FP64_V(0, 0, 0x409)/*1024*/, FP64_V(0, 0xb800000000000, 0x404)/*55*/, FP64_V(0, 0x8000000000000, 0x409)/*1536*/, FP64_V(0, 0xf000000000000, 0x404)/* 62*/ } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
          { { /*src2     */ { FP64_V(0, 0x26580b4800000, 0x41d)/* 1234567890*/, FP64_V(0, 0xd6f3458800000, 0x41c)/*987654321*/, FP64_V(0, 0xd6f3426800000, 0x41c)/*987654221*/, FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/ } },
            { /*src1     */ { FP64_V(1, 0x26580b4800000, 0x41d)/*-1234567890*/, FP64_V(0, 0x9000000000000, 0x405)/*      100*/, FP64_1(0),                                      FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/ } },
            { /* =>      */ { FP64_V(0, 0x26580b4800000, 0x41d)/* 1234567890*/, FP64_V(0, 0xd6f3458800000, 0x41c)/*987654321*/, FP64_V(0, 0xd6f3426800000, 0x41c)/*987654221*/, FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/ } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP64_V(0, 0x26580b4800000, 0x41d)/* 1234567890*/, FP64_V(0, 0xd6f3458800000, 0x41c)/*987654321*/, FP64_V(0, 0xd6f3426800000, 0x41c)/*987654221*/, FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/ } },
            { /*src1     */ { FP64_V(1, 0x26580b4800000, 0x41d)/*-1234567890*/, FP64_V(0, 0x9000000000000, 0x405)/*     -100*/, FP64_1(0),                                      FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/ } },
            { /* =>      */ { FP64_V(0, 0x26580b4800000, 0x41d)/* 1234567890*/, FP64_V(0, 0xd6f3458800000, 0x41c)/*987654321*/, FP64_V(0, 0xd6f3426800000, 0x41c)/*987654221*/, FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_MIN(0), FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_MIN(0) } },
            { /*src1     */ { FP64_1(0),                 FP64_NORM_MIN(1), FP64_NORM_MIN(0),          FP64_0(0)        } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_MIN(0), FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_MIN(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_NORM_MIN(0), FP64_0(0),        FP64_NORM_MIN(0), FP64_NORM_MIN(1) } },
            { /*src1     */ { FP64_NORM_MIN(1), FP64_NORM_MIN(1), FP64_0(0),        FP64_NORM_MIN(0) } },
            { /* =>      */ { FP64_NORM_MIN(0), FP64_0(0),        FP64_NORM_MIN(0), FP64_NORM_MIN(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_V(1, 0xbcd80e0108cc0, 0x42e)/*-244555555308646.00*/ } },
            { /*src1     */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/* 121098765432102.75*/ } },
            { /* =>      */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/* 121098765432102.75*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_V(0, 0xc000000000000, 0x3ff)/*1.75*/, FP64_V(0, 0, 0x3fd)/*0.25*/, FP64_V(0, 0x26580b4c7e6b7, 0x41d)/*1234567891.1234567*/, FP64_V(0, 0xf9b0207d06184, 0x3fb)/*0.1234589833333129*/ } },
            { /*src1     */ { FP64_V(0, 0,               0x3fd)/*0.25*/, FP64_V(0, 0, 0x3fe)/*0.50*/, FP64_V(0, 0x26580b4c7e6bc, 0x41d)/*1234567891.1234580*/, FP64_V(0, 0xf9b0207d0617d, 0x3fb)/*0.1234589833333128*/ } },
            { /* =>      */ { FP64_V(0, 0xc000000000000, 0x3ff)/*1.75*/, FP64_V(0, 0, 0x3fe)/*0.50*/, FP64_V(0, 0x26580b4c7e6bc, 0x41d)/*1234567891.1234580*/, FP64_V(0, 0xf9b0207d06184, 0x3fb)/*0.1234589833333129*/ } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Denormals.
     */
    /*29*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0)         } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1), FP64_0(0),          FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP64_0(0), FP64_0(0),          FP64_0(0),          FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_0(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /* =>      */ { FP64_0(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP64_0(0), FP64_0(0),          FP64_0(0),          FP64_DENORM_MAX(1) } },
            { /*src1     */ { FP64_0(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /* =>      */ { FP64_0(0), FP64_0(0),          FP64_0(0),          FP64_0(1)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
    /** @todo Denormals. */
    /*
     * Invalids.
     */
    /*35*/ FP64_TABLE_D9_PD_INVALIDS
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(maxpd_XMM1_XMM2),        255,         RM_REG, T_SSE2,    XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(maxpd_XMM1_FSxBX),       255,         RM_MEM, T_SSE2,    XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vmaxpd_XMM1_XMM2_XMM3),  X86_XCPT_GP, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vmaxpd_XMM1_XMM2_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vmaxpd_YMM1_YMM2_YMM3),  X86_XCPT_GP, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vmaxpd_YMM1_YMM2_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(maxpd_XMM8_XMM9),        255,         RM_REG, T_SSE2,    XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(maxpd_XMM8_FSxBX),       255,         RM_MEM, T_SSE2,    XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vmaxpd_XMM8_XMM9_XMM10), X86_XCPT_GP, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmaxpd_XMM8_XMM9_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmaxpd_YMM8_YMM9_YMM10), X86_XCPT_GP, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmaxpd_YMM8_YMM9_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]MAXSS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_maxss(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_0(0), FP32_0_x7(0) } },
            { /* =>      */ { FP32_0(0), FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_0(0), FP32_0_x7(0) } },
            { /* =>      */ { FP32_0(0), FP32_0_x7(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_0(1), FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_0(1), FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1), FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_0(1), FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_0(1), FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /*11*/{ { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_0(0),   FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),   FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_0(0),   FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),   FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_INF(1), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_0(0),   FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_INF(1), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_INF(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_INF(1), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_INF(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0),     FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_NORM_V0(0), FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_INF(0),     FP32_RAND_x7_V5 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0),     FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_NORM_V3(0), FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_INF(0),     FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_V7(0), FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_NORM_V7(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_V7(0), FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(0),     FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*27*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_NORM_MIN(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_NORM_MIN(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(0),          FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_NORM_MIN(0),          FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0, 0x7d)/*0.25*/, FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_V(0, 0, 0x7e)/*0.50*/, FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0, 0, 0x7e)/*0.50*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_NORM_V1(0),  FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_V(0, 0x1ea980, 0x8f)/*  81235*/, FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(1, 0x2514d6, 0x93)/*-1352346.75*/, FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_V(0, 0x7c9000, 0x88)/*    1010.25*/, FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0, 0x7c9000, 0x88)/*    1010.25*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(1, 0x2514d6, 0x93)/*-1352346.75*/, FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_V(0, 0x253468, 0x93)/* 1353357.00*/, FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_V(0, 0x253468, 0x93)/* 1353357.00*/, FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(1, 0x40e6b6, 0x8c)/*-12345.678*/, FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_V(1, 0x40e6b7, 0x8c)/*-12345.679*/, FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(1, 0x40e6b6, 0x8c)/*-12345.678*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x620b2e, 0x92)/*925874.9*/, FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_V(0, 0x620b2d, 0x92)/*925874.8*/, FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_V(0, 0x620b2e, 0x92)/*925874.9*/, FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x490fda, 0x80)/*3.1415926*/, FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_V(0, 0x490fdb, 0x80)/*3.1415927*/, FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0, 0x490fdb, 0x80)/*3.1415927*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(1, 0x40e6b6, 0x8c)/*-12345.678*/, FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_V(1, 0x40e6b7, 0x8c)/*-12345.679*/, FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(1, 0x40e6b6, 0x8c)/*-12345.678*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x5dd520, 0x8e)/* 56789.125*/, FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_V(1, 0x5dd521, 0x8e)/*-56789.127*/, FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_V(0, 0x5dd520, 0x8e)/* 56789.125*/, FP32_RAND_x7_V4 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x600000, 0x7e)/* 0.875*/, FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_V(1, 0,        0x7d)/*-0.250*/, FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0, 0x600000, 0x7e)/* 0.875*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /** @todo More Normals. */
    /*
     * Denormals.
     */
    /*46*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),          FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(1),          FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
    /** @todo More Denormals. */
    /*56*/ FP32_TABLE_D9_SS_INVALIDS
    /** @todo Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(maxss_XMM3_XMM4),        255,         RM_REG, T_SSE,     XMM3, XMM3, XMM4,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(maxss_XMM3_FSxBX),       255,         RM_MEM, T_SSE,     XMM3, XMM3, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vmaxss_XMM1_XMM6_XMM7),  255,         RM_REG, T_AVX_128, XMM1, XMM6, XMM7,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vmaxss_XMM1_XMM6_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM6, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(maxss_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(maxss_XMM8_FSxBX),       X86_XCPT_AC, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vmaxss_XMM8_XMM9_XMM10), 255,         RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmaxss_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]MAXSD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_maxsd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_INF(0), FP64_SNAN(0), FP64_SNAN(0) } },
            { /*src1     */ { FP64_0(0), FP64_INF(1), FP64_QNAN(0), FP64_SNAN(1) } },
            { /* =>      */ { FP64_0(0), FP64_INF(1), FP64_QNAN(0), FP64_SNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V0(0), FP64_RAND_V0(0) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_0(1), FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(0) } },
            { /*src1     */ { FP64_0(1), FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_0(1), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_0(1), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1), FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_0(1), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_0(1), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1), FP64_RAND_V3(1), FP64_RAND_V1(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_0(1), FP64_RAND_V1(0), FP64_RAND_V0(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(1), FP64_RAND_V1(0), FP64_RAND_V0(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /*11*/{ { /*src2     */ { FP64_INF(0), FP64_RAND_V3(1), FP64_RAND_V1(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_0(0),   FP64_RAND_V1(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),   FP64_RAND_V1(1), FP64_RAND_V1(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_INF(1),     FP64_SNAN(1),    FP64_QNAN(1)    } },
            { /*src1     */ { FP64_0(0),   FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),   FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_INF(1), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_0(0),   FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_RAND_V3(1), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V0(0) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V0(1), FP64_RAND_V0(1), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V0(1), FP64_RAND_V0(1), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_RAND_V3(0),   FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_INF(1), FP64_QNAN_V(1, 1), FP64_RAND_V1(1), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_INF(1), FP64_QNAN_V(1, 1), FP64_RAND_V1(1), FP64_RAND_V2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_RAND_V2(1), FP64_RAND_V1(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(1), FP64_RAND_V0(0), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_INF(1), FP64_RAND_V0(0), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_RAND_V1(1), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V0(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V0(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_RAND_V2(1), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(1), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(1), FP64_RAND_V0(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V0(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0),     FP64_RAND_V0(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_RAND_V1(1), FP64_RAND_V3(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_INF(0),     FP64_RAND_V1(1), FP64_RAND_V3(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0),     FP64_INF(0), FP64_SNAN(1), FP64_INF(1)  } },
            { /*src1     */ { FP64_NORM_V3(0), FP64_INF(1), FP64_QNAN(1), FP64_SNAN(1) } },
            { /* =>      */ { FP64_INF(0),     FP64_INF(1), FP64_QNAN(1), FP64_SNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_V2(0), FP64_RAND_V3(1), FP64_QNAN(1),    FP64_SNAN(1)    } },
            { /*src1     */ { FP64_INF(1),     FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_NORM_V2(0), FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_V2(0), FP64_SNAN(0), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_INF(0),     FP64_RAND_V2(0),   FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_INF(0),     FP64_RAND_V2(0),   FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*27*/{ { /*src2     */ { FP64_NORM_MAX(0), FP64_RAND_V2(1), FP64_RAND_V0(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(0), FP64_RAND_V3(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_NORM_MIN(0), FP64_RAND_V2(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_NORM_MIN(0), FP64_RAND_V2(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(0), FP64_RAND_V3(1), FP64_RAND_V0(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V1(0), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_RAND_V1(0), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V1(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(0),          FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_RAND_V1(0), FP64_RAND_V1(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0), FP64_RAND_V1(0), FP64_RAND_V1(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_INF(0),     FP64_QNAN(1),    FP64_QNAN(0)    } },
            { /*src1     */ { FP64_NORM_MIN(0),          FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0, 0x409)/*1024*/,  FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_V(0, 0, 0x408)/* 512*/,  FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_V(0, 0, 0x409)/*1024*/,  FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/,  FP64_RAND_V2(1), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/,  FP64_RAND_V0(0), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/,  FP64_RAND_V0(0), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_NORM_V1(0),  FP64_RAND_V0(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_RAND_V0(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xc000000000000, 0x3ff)/*1.75*/, FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_V(0, 0,               0x3fd)/*0.25*/, FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_V(0, 0xc000000000000, 0x3ff)/*1.75*/, FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(1, 0, 0x3fd)/*-0.25*/, FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_V(1, 0, 0x3fe)/*-0.50*/, FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_V(1, 0, 0x3fd)/*-0.25*/, FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0x26580b4c7e6b7, 0x41d)/*1234567891.1234567*/, FP64_RAND_V2(1), FP64_RAND_V3(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_V(0, 0x26580b4c7e6bc, 0x41d)/*1234567891.1234580*/, FP64_RAND_V3(0), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_V(0, 0x26580b4c7e6bc, 0x41d)/*1234567891.1234580*/, FP64_RAND_V3(0), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xf9b0207d06184, 0x3fb)/*0.1234589833333129*/, FP64_RAND_V3(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_V(0, 0xf9b0207d0617d, 0x3fb)/*0.1234589833333128*/, FP64_RAND_V1(1), FP64_RAND_V0(0), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_V(0, 0xf9b0207d06184, 0x3fb)/*0.1234589833333129*/, FP64_RAND_V1(1), FP64_RAND_V0(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/* 121098765432102.75*/,  FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_V(1, 0xbcd80e0108cc0, 0x42e)/*-244555555308646.00*/,  FP64_RAND_V3(0), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/* 121098765432102.75*/,  FP64_RAND_V3(0), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/, FP64_RAND_V3(1), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(1, 0xbcd80e0108cc0, 0x42e)/*-244555555308646.00*/, FP64_INF(1), FP64_SNAN(1), FP64_INF(1)  } },
            { /*src1     */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/* 121098765432102.75*/, FP64_INF(1), FP64_QNAN(0), FP64_SNAN(0) } },
            { /* =>      */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/* 121098765432102.75*/, FP64_INF(1), FP64_QNAN(0), FP64_SNAN(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/* 244555555308646.00*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_V(1, 0xb88e0395d49b0, 0x42d)/*-121098765432102.75*/, FP64_RAND_V0(0), FP64_RAND_V0(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/* 244555555308646.00*/, FP64_RAND_V0(0), FP64_RAND_V0(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(1, 0xcf0033a34f337, 0x432)/*-4072598000007579.5*/, FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
            { /*src1     */ { FP64_V(0, 0xd6eca42000000, 0x419)/*        123450000.5*/, FP64_RAND_V2(0), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(0, 0xd6eca42000000, 0x419)/*        123450000.5*/, FP64_RAND_V2(0), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /** @todo More Normals. */
    /*
     * Denormals.
     */
    /*46*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(0), FP64_RAND_V0(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_0(0),          FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),          FP64_SNAN(0),    FP64_QNAN(1),    FP64_QNAN(0)    } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(0), FP64_RAND_V3(1), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_RAND_V2(0), FP64_RAND_V3(1), FP64_RAND_V2(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_INF(1), FP64_SNAN(0), FP64_INF(1)  } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_INF(0), FP64_QNAN(1), FP64_SNAN(1) } },
            { /* =>      */ { FP64_0(0),          FP64_INF(0), FP64_QNAN(1), FP64_SNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(1), FP64_RAND_V0(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V2(0) } },
            { /*src1     */ { FP64_DENORM_MAX(1), FP64_RAND_V0(0), FP64_RAND_V3(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_RAND_V0(0), FP64_RAND_V3(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MAX(1), FP64_RAND_V3(1), FP64_RAND_V0(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(1), FP64_RAND_V3(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_RAND_V2(1), FP64_RAND_V3(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(1), FP64_RAND_V0(1), FP64_RAND_V3(1), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_DENORM_MIN(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(1), FP64_INF(0),     FP64_QNAN(1),    FP64_SNAN(1) } },
            { /*src1     */ { FP64_DENORM_MIN(1), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V0(1)   } },
            { /* =>      */ { FP64_DENORM_MIN(1), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V0(1)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(1), FP64_SNAN(1),    FP64_SNAN(0),    FP64_QNAN(0)    } },
            { /*src1     */ { FP64_DENORM_MIN(1), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_0(1),          FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_0(0),          FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_DENORM_MIN(0), FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
    /** @todo More Denormals. */
    /*
     * Invalids.
     */
    /*56*/ FP64_TABLE_D9_SD_INVALIDS
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(maxsd_XMM3_XMM4),        255,         RM_REG, T_SSE2,    XMM3, XMM3, XMM4,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(maxsd_XMM3_FSxBX),       255,         RM_MEM, T_SSE2,    XMM3, XMM3, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vmaxsd_XMM1_XMM6_XMM7),  255,         RM_REG, T_AVX_128, XMM1, XMM6, XMM7,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vmaxsd_XMM1_XMM6_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM6, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(maxsd_XMM8_XMM9),        255,         RM_REG, T_SSE2,    XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(maxsd_XMM8_FSxBX),       X86_XCPT_AC, RM_MEM, T_SSE2,    XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vmaxsd_XMM8_XMM9_XMM10), 255,         RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vmaxsd_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]MINPS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_minps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /*src1     */ { FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1) } },
            { /*src1     */ { FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 9*/{ { /*src2     */ { FP32_INF(0), FP32_0(0),   FP32_INF(1), FP32_0(1),   FP32_INF(1), FP32_0(0),   FP32_INF(1), FP32_0(0)   } },
            { /*src1     */ { FP32_0(0),   FP32_INF(0), FP32_0(0),   FP32_INF(0), FP32_0(0),   FP32_INF(1), FP32_0(0),   FP32_INF(1) } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_INF(1), FP32_0(1),   FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_INF(0), FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(1), FP32_0(0),   FP32_INF(1), FP32_0(0)   } },
            { /*src1     */ { FP32_0(0),   FP32_INF(1), FP32_0(1),   FP32_INF(1), FP32_0(0),   FP32_INF(1), FP32_0(0),   FP32_INF(1) } },
            { /* =>      */ { FP32_0(0),   FP32_INF(1), FP32_0(1),   FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_INF(0), FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(1), FP32_0(0),   FP32_INF(1), FP32_0(0)   } },
            { /*src1     */ { FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(0), FP32_0(0),   FP32_INF(1), FP32_0(0),   FP32_INF(1) } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_INF(0), FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(1), FP32_0(0),   FP32_INF(1), FP32_0(0)   } },
            { /*src1     */ { FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(0), FP32_0(0),   FP32_INF(1), FP32_0(0),   FP32_INF(1) } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_INF(0), FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(1), FP32_0(0),   FP32_INF(1), FP32_0(0)   } },
            { /*src1     */ { FP32_0(0),   FP32_INF(0), FP32_0(1),   FP32_INF(0), FP32_0(0),   FP32_INF(1), FP32_0(0),   FP32_INF(1) } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0) } },
            { /*src1     */ { FP32_INF(0), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(0) } },
            { /* =>      */ { FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0) } },
            { /*src1     */ { FP32_INF(0), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(0) } },
            { /* =>      */ { FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_INF(0),     FP32_NORM_V1(0), FP32_INF(1),     FP32_NORM_V3(1), FP32_INF(1),     FP32_NORM_V5(0), FP32_INF(1),     FP32_NORM_V7(0) } },
            { /*src1     */ { FP32_NORM_V0(0), FP32_INF(1),     FP32_NORM_V2(0), FP32_INF(1),     FP32_NORM_V4(1), FP32_INF(1),     FP32_NORM_V6(0), FP32_INF(0)     } },
            { /* =>      */ { FP32_NORM_V0(0), FP32_INF(1),     FP32_INF(1),     FP32_INF(1),     FP32_INF(1),     FP32_INF(1),     FP32_INF(1),     FP32_NORM_V7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_INF(0),     FP32_NORM_V1(0), FP32_INF(1),     FP32_NORM_V3(1), FP32_INF(0),     FP32_NORM_V5(0), FP32_INF(1),     FP32_NORM_V7(0) } },
            { /*src1     */ { FP32_NORM_V0(0), FP32_INF(1),     FP32_NORM_V2(0), FP32_INF(0),     FP32_NORM_V4(1), FP32_INF(1),     FP32_NORM_V6(0), FP32_INF(0)     } },
            { /* =>      */ { FP32_NORM_V0(0), FP32_INF(1),     FP32_INF(1),     FP32_NORM_V3(1), FP32_NORM_V4(1), FP32_INF(1),     FP32_INF(1),     FP32_NORM_V7(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_NORM_V7(0), FP32_INF(0),     FP32_NORM_V5(0), FP32_INF(0),     FP32_NORM_V3(0), FP32_INF(0),     FP32_NORM_V1(0), FP32_INF(0)     } },
            { /*src1     */ { FP32_INF(1),     FP32_NORM_V6(1), FP32_INF(0),     FP32_NORM_V4(0), FP32_INF(0),     FP32_NORM_V2(1), FP32_INF(1),     FP32_NORM_V0(1) } },
            { /* =>      */ { FP32_INF(1),     FP32_NORM_V6(1), FP32_NORM_V5(0), FP32_NORM_V4(0), FP32_NORM_V3(0), FP32_NORM_V2(1), FP32_INF(1),     FP32_NORM_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_NORM_V7(0), FP32_INF(0),     FP32_NORM_V5(1), FP32_INF(0),     FP32_NORM_V3(1), FP32_INF(0),     FP32_NORM_V1(1), FP32_INF(0)     } },
            { /*src1     */ { FP32_INF(0),     FP32_NORM_V6(1), FP32_INF(0),     FP32_NORM_V4(1), FP32_INF(0),     FP32_NORM_V2(1), FP32_INF(0),     FP32_NORM_V0(1) } },
            { /* =>      */ { FP32_NORM_V7(0), FP32_NORM_V6(1), FP32_NORM_V5(1), FP32_NORM_V4(1), FP32_NORM_V3(1), FP32_NORM_V2(1), FP32_NORM_V1(1), FP32_NORM_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    /*
     * Normals.
     */
    /*20*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_0(0),        FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_0(1),        FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_0(0),        FP32_0(0),        FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_0(1),        FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_0(0),        FP32_0(0),        FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_0(0),        FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_0(1),        FP32_NORM_MIN(1), FP32_NORM_MIN(1) } },
            { /*src1     */ { FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_0(0),        FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_0(1),        FP32_NORM_MIN(0) } },
            { /* =>      */ { FP32_NORM_MIN(0), FP32_0(0),        FP32_0(0),        FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MIN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MIN(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MIN(0), FP32_NORM_MIN(1) } },
            { /* =>      */ { FP32_NORM_MIN(0), FP32_NORM_MAX(1), FP32_NORM_MIN(1), FP32_NORM_MAX(1), FP32_NORM_MIN(0), FP32_NORM_MIN(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_NORM_MIN(0),          FP32_NORM_MIN(0),          FP32_NORM_MIN(1),          FP32_NORM_MIN(1),          FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(1) } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_MIN(0),          FP32_NORM_MIN(1),          FP32_NORM_MIN(0),          FP32_NORM_MIN(1)          } },
            { /* =>      */ { FP32_NORM_MIN(0),          FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_MIN(1),          FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_MIN(0),          FP32_NORM_MIN(1),          FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_V(0, 0, 0x7d)/*0.25*/, FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_V(0, 0, 0x7d)/*0.25*/, FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_V(0, 0, 0x7d)/* 0.25*/, FP32_V(0, 0x600000, 0x7f)/*1.75*/, FP32_V(1, 0, 0x7d)/*-0.25*/ } },
            { /*src1     */ { FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_V(0, 0, 0x7e)/*0.50*/, FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_V(0, 0, 0x7e)/*0.50*/, FP32_V(1, 0x600000, 0x7f)/*-1.75*/, FP32_V(1, 0, 0x7e)/*-0.50*/, FP32_V(1, 0,        0x7d)/*0.25*/, FP32_V(1, 0, 0x7e)/*-0.50*/ } },
            { /* =>      */ { FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_V(0, 0, 0x7d)/*0.25*/, FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_V(0, 0, 0x7d)/*0.25*/, FP32_V(1, 0x600000, 0x7f)/*-1.75*/, FP32_V(1, 0, 0x7e)/*-0.50*/, FP32_V(1, 0,        0x7d)/*0.25*/, FP32_V(1, 0, 0x7e)/*-0.50*/ } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_V1(0), FP32_NORM_V2(1), FP32_NORM_V3(1), FP32_NORM_V5(0), FP32_0(1),       FP32_NORM_V5(1), FP32_0(0)       } },
            { /*src1     */ { FP32_NORM_V1(0),  FP32_NORM_V1(1), FP32_NORM_V2(0), FP32_NORM_V3(1), FP32_0(1),       FP32_NORM_V6(0), FP32_0(1),       FP32_NORM_V7(1) } },
            { /* =>      */ { FP32_NORM_V1(0),  FP32_NORM_V1(1), FP32_NORM_V2(1), FP32_NORM_V3(1), FP32_0(1),       FP32_0(1),       FP32_NORM_V5(1), FP32_NORM_V7(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_V(0, 0x600000, 0x81)/* 7*/, FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_V(0, 0x5c0000, 0x84)/* 55*/, FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_V(1, 0x534000, 0x86)/*-211.25*/, FP32_V(0, 0x74429f, 0x97)/*32015678*/, FP32_1(1) } },
            { /*src1     */ { FP32_V(0, 0x1ea980, 0x8f)/*  81235*/, FP32_V(0, 0x5c0000, 0x84)/*55*/, FP32_V(0, 0x7c9000, 0x88)/*   1010.25*/, FP32_V(1, 0x600000, 0x81)/* -7*/, FP32_V(0, 0x253468, 0x93)/*1353357.00*/, FP32_1(1),                            FP32_V(0, 0x712060, 0x92)/*  987654*/, FP32_1(0) } },
            { /* =>      */ { FP32_V(0, 0x1ea980, 0x8f)/*  81235*/, FP32_V(0, 0x600000, 0x81)/* 7*/, FP32_V(0, 0x7c9000, 0x88)/*   1010.25*/, FP32_V(1, 0x600000, 0x81)/* -7*/, FP32_V(0, 0x2514d6, 0x93)/*1352346.75*/, FP32_V(1, 0x534000, 0x86)/*-211.25*/, FP32_V(0, 0x712060, 0x92)/*  987654*/, FP32_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP32_V(0, 0x600000, 0x7e)/*      0.875*/, FP32_V(0, 0x3ce348, 0x90)/*193421.125*/, FP32_V(0, 0x6423f2, 0x92)/*934463.125*/, FP32_NORM_MIN(1), FP32_NORM_MIN(0),          FP32_V(0, 0x16b43a, 0x93)/*1234567.25*/, FP32_V(0, 0x792318, 0x91)/*510232.75*/, FP32_V(0, 0x600000, 0x7e)/* 0.875*/ } },
            { /*src1     */ { FP32_V(0, 0x769b50, 0x92)/*1010101.000*/, FP32_V(0, 0x430ebc, 0x91)/*399477.875*/, FP32_V(0, 0x52e0b4, 0x92)/*863755.250*/, FP32_NORM_MIN(1), FP32_NORM_SAFE_INT_MAX(1), FP32_V(0, 0x00c6d3, 0x94)/*2109876.75*/, FP32_V(1, 0x316740, 0x8e)/*-45415.25*/, FP32_V(1, 0,        0x7d)/*-0.250*/ } },
            { /* =>      */ { FP32_V(0, 0x600000, 0x7e)/*      0.875*/, FP32_V(0, 0x3ce348, 0x90)/*193421.125*/, FP32_V(0, 0x52e0b4, 0x92)/*863755.250*/, FP32_NORM_MIN(1), FP32_NORM_SAFE_INT_MAX(1), FP32_V(0, 0x16b43a, 0x93)/*1234567.25*/, FP32_V(1, 0x316740, 0x8e)/*-45415.25*/, FP32_V(1, 0,        0x7d)/*-0.250*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP32_V(0, 0x490fda, 0x80)/*3.1415926*/, FP32_V(0, 0x620b2e, 0x92)/*925874.9*/, FP32_V(0, 0x5dd520, 0x8e)/* 56789.125*/, FP32_V(1, 0x40e6b6, 0x8c)/*-12345.678*/, FP32_V(1, 0x490fda, 0x80)/*-3.1415926*/, FP32_V(1, 0x620b2e, 0x92)/*-925874.8*/, FP32_V(0, 0x5dd520, 0x8e)/*56789.125*/, FP32_V(0, 0x40e6b6, 0x8c)/*12345.678*/ } },
            { /*src1     */ { FP32_V(0, 0x490fdb, 0x80)/*3.1415927*/, FP32_V(0, 0x620b2d, 0x92)/*925874.8*/, FP32_V(1, 0x5dd521, 0x8e)/*-56789.127*/, FP32_V(1, 0x40e6b7, 0x8c)/*-12345.679*/, FP32_V(1, 0x490fdb, 0x80)/*-3.1415927*/, FP32_V(0, 0x620b2d, 0x92)/* 925874.9*/, FP32_V(0, 0x5dd521, 0x8e)/*56789.127*/, FP32_V(0, 0x40e6b7, 0x8c)/*12345.679*/ } },
            { /* =>      */ { FP32_V(0, 0x490fda, 0x80)/*3.1415926*/, FP32_V(0, 0x620b2d, 0x92)/*925874.8*/, FP32_V(1, 0x5dd521, 0x8e)/*-56789.127*/, FP32_V(1, 0x40e6b7, 0x8c)/*-12345.679*/, FP32_V(1, 0x490fdb, 0x80)/*-3.1415927*/, FP32_V(1, 0x620b2e, 0x92)/*-925874.8*/, FP32_V(0, 0x5dd520, 0x8e)/*56789.125*/, FP32_V(0, 0x40e6b6, 0x8c)/*12345.678*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /** @todo More Normals. */
    /*
     * Denormals.
     */
    /*29*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /*src1     */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /* =>      */ { FP32_0(0),          FP32_DENORM_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*src1     */ { FP32_0(0),         FP32_0(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /* =>      */ { FP32_0(0),         FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_DENORM_MAX(1) } },
            { /*src1     */ { FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_DENORM_MAX(0), FP32_0(0), FP32_0(0), FP32_0(0)          } },
            { /* =>      */ { FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(0),          FP32_0(0), FP32_0(0), FP32_0(1)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0) } },
            { /* =>      */ { FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
    /** @todo More Denormals. */
    /*35*/ FP32_TABLE_D9_PS_INVALIDS
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(minps_XMM1_XMM2),        255, RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(minps_XMM1_FSxBX),       255, RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vminps_XMM1_XMM2_XMM3),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vminps_XMM1_XMM2_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vminps_YMM1_YMM2_YMM3),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vminps_YMM1_YMM2_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(minps_XMM8_XMM9),        255, RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(minps_XMM8_FSxBX),       255, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vminps_XMM8_XMM9_XMM10), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vminps_XMM8_XMM9_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vminps_YMM8_YMM9_YMM10), 255, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vminps_YMM8_YMM9_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]MINPD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_minpd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(1), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_0(1), FP64_0(1), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(1), FP64_0(1), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 9*/{ { /*src2     */ { FP64_INF(0), FP64_0(0),   FP64_INF(0), FP64_0(1)   } },
            { /*src1     */ { FP64_0(0),   FP64_INF(0), FP64_0(1),   FP64_INF(1) } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(1),   FP64_INF(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_INF(0), FP64_0(0),   FP64_INF(0), FP64_0(1)   } },
            { /*src1     */ { FP64_0(0),   FP64_INF(1), FP64_0(1),   FP64_INF(1) } },
            { /* =>      */ { FP64_0(0),   FP64_INF(1), FP64_0(1),   FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_INF(0), FP64_0(0),   FP64_INF(0), FP64_0(1)   } },
            { /*src1     */ { FP64_0(0),   FP64_INF(1), FP64_0(1),   FP64_INF(1) } },
            { /* =>      */ { FP64_0(0),   FP64_INF(1), FP64_0(1),   FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_INF(0), FP64_0(0),   FP64_INF(0), FP64_0(1)   } },
            { /*src1     */ { FP64_0(0),   FP64_INF(1), FP64_0(1),   FP64_INF(1) } },
            { /* =>      */ { FP64_0(0),   FP64_INF(1), FP64_0(1),   FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_INF(0), FP64_0(0),   FP64_INF(0), FP64_0(1)   } },
            { /*src1     */ { FP64_0(0),   FP64_INF(0), FP64_0(1),   FP64_INF(1) } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(1),   FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_INF(0), FP64_INF(0), FP64_INF(1), FP64_INF(1) } },
            { /*src1     */ { FP64_INF(0), FP64_INF(1), FP64_INF(0), FP64_INF(1) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(1), FP64_INF(1), FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_INF(0), FP64_INF(0), FP64_INF(1), FP64_INF(1) } },
            { /*src1     */ { FP64_INF(0), FP64_INF(1), FP64_INF(0), FP64_INF(1) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(1), FP64_INF(1), FP64_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_INF(0),     FP64_NORM_V1(0), FP64_INF(1),     FP64_NORM_V3(1) } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_INF(1),     FP64_NORM_V2(0), FP64_INF(1)     } },
            { /* =>      */ { FP64_NORM_V0(0), FP64_INF(1),     FP64_INF(1),     FP64_INF(1)     } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_INF(0),     FP64_NORM_V1(0), FP64_INF(1),     FP64_NORM_V3(1) } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_INF(1),     FP64_NORM_V2(0), FP64_INF(1)     } },
            { /* =>      */ { FP64_NORM_V0(0), FP64_INF(1),     FP64_INF(1),     FP64_INF(1)     } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_INF(0),     FP64_NORM_V1(0), FP64_INF(1),     FP64_NORM_V3(1) } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_INF(1),     FP64_NORM_V2(0), FP64_INF(1)     } },
            { /* =>      */ { FP64_NORM_V0(0), FP64_INF(1),     FP64_INF(1),     FP64_INF(1)     } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_INF(0),     FP64_NORM_V1(0), FP64_INF(1),     FP64_NORM_V3(1) } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_INF(1),     FP64_NORM_V2(0), FP64_INF(1)     } },
            { /* =>      */ { FP64_NORM_V0(0), FP64_INF(1),     FP64_INF(1),     FP64_INF(1)     } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    /*
     * Normals.
     */
    /*20*/{ { /*src2     */ { FP64_NORM_V0(0), FP64_NORM_V1(1), FP64_NORM_V2(0), FP64_NORM_V1(1) } },
            { /*src1     */ { FP64_NORM_V3(1), FP64_NORM_V1(0), FP64_NORM_V2(1), FP64_NORM_V1(0) } },
            { /* =>      */ { FP64_NORM_V3(1), FP64_NORM_V1(1), FP64_NORM_V2(1), FP64_NORM_V1(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src2     */ { FP64_NORM_V0(0), FP64_0(1),       FP64_NORM_V2(0), FP64_0(1)       } },
            { /*src1     */ { FP64_0(0),       FP64_NORM_V1(1), FP64_0(0),       FP64_NORM_V1(0) } },
            { /* =>      */ { FP64_0(0),       FP64_NORM_V1(1), FP64_0(0),       FP64_0(1)       } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_V(0, 0, 0x409)/*1024*/, FP64_V(0, 0xb800000000000, 0x404)/*55*/, FP64_V(1, 0x8000000000000, 0x409)/*-1536*/, FP64_V(0, 0xf000000000000, 0x404)/* 62*/ } },
            { /*src1     */ { FP64_V(0, 0, 0x408)/* 512*/, FP64_V(0, 0xc000000000000, 0x401)/* 7*/, FP64_1(1),                                  FP64_V(1, 0xf000000000000, 0x404)/*-62*/ } },
            { /* =>      */ { FP64_V(0, 0, 0x408)/* 512*/, FP64_V(0, 0xc000000000000, 0x401)/* 7*/, FP64_V(1, 0x8000000000000, 0x409)/*-1536*/, FP64_V(1, 0xf000000000000, 0x404)/*-62*/ } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
          { { /*src2     */ { FP64_V(0, 0x26580b4800000, 0x41d)/* 1234567890*/, FP64_V(0, 0xd6f3458800000, 0x41c)/*987654321*/, FP64_V(1, 0xd6f3426800000, 0x41c)/*-987654221*/, FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/ } },
            { /*src1     */ { FP64_V(1, 0x26580b4800000, 0x41d)/*-1234567890*/, FP64_V(0, 0x9000000000000, 0x405)/*      100*/, FP64_1(0),                                       FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/ } },
            { /* =>      */ { FP64_V(1, 0x26580b4800000, 0x41d)/*-1234567890*/, FP64_V(0, 0x9000000000000, 0x405)/*      100*/, FP64_V(1, 0xd6f3426800000, 0x41c)/*-987654221*/, FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/ } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP64_V(0, 0x26580b4800000, 0x41d)/* 1234567890*/, FP64_V(0, 0xd6f3458800000, 0x41c)/*987654321*/, FP64_V(0, 0xd6f3426800000, 0x41c)/*987654221*/, FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/ } },
            { /*src1     */ { FP64_V(1, 0x26580b4800000, 0x41d)/*-1234567890*/, FP64_V(0, 0x9000000000000, 0x405)/*     -100*/, FP64_1(0),                                      FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/ } },
            { /* =>      */ { FP64_V(1, 0x26580b4800000, 0x41d)/*-1234567890*/, FP64_V(0, 0x9000000000000, 0x405)/*     -100*/, FP64_1(0),                                      FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_MIN(0), FP64_NORM_SAFE_INT_MAX(0), FP64_NORM_MIN(0) } },
            { /*src1     */ { FP64_1(0),                 FP64_NORM_MIN(1), FP64_NORM_MIN(0),          FP64_0(0)        } },
            { /* =>      */ { FP64_1(0),                 FP64_NORM_MIN(1), FP64_NORM_MIN(0),          FP64_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src2     */ { FP64_NORM_MIN(0), FP64_0(0),        FP64_NORM_MIN(0), FP64_NORM_MIN(1) } },
            { /*src1     */ { FP64_NORM_MIN(1), FP64_NORM_MIN(1), FP64_0(0),        FP64_NORM_MIN(0) } },
            { /* =>      */ { FP64_NORM_MIN(1), FP64_NORM_MIN(1), FP64_0(0),        FP64_NORM_MIN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src2     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_V(0, 0xbcd80e0108cc0, 0x42e)/*244555555308646.00*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_V(1, 0xbcd80e0108cc0, 0x42e)/*-244555555308646.00*/ } },
            { /*src1     */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/* 121098765432102.75*/ } },
            { /* =>      */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/, FP64_V(1, 0xbcd80e0108cc0, 0x42e)/*-244555555308646.00*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_V(0, 0xc000000000000, 0x3ff)/*1.75*/, FP64_V(0, 0, 0x3fd)/*0.25*/, FP64_V(0, 0x26580b4c7e6b7, 0x41d)/*1234567891.1234567*/, FP64_V(0, 0xf9b0207d06184, 0x3fb)/*0.1234589833333129*/ } },
            { /*src1     */ { FP64_V(0, 0,               0x3fd)/*0.25*/, FP64_V(0, 0, 0x3fe)/*0.50*/, FP64_V(0, 0x26580b4c7e6bc, 0x41d)/*1234567891.1234580*/, FP64_V(0, 0xf9b0207d0617d, 0x3fb)/*0.1234589833333128*/ } },
            { /* =>      */ { FP64_V(0, 0,               0x3fd)/*0.25*/, FP64_V(0, 0, 0x3fd)/*0.25*/, FP64_V(0, 0x26580b4c7e6b7, 0x41d)/*1234567891.1234567*/, FP64_V(0, 0xf9b0207d0617d, 0x3fb)/*0.1234589833333128*/ } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Denormals.
     */
    /*29*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(1), FP64_0(0),          FP64_DENORM_MAX(1) } },
            { /* =>      */ { FP64_0(0),          FP64_DENORM_MAX(1), FP64_0(0),          FP64_DENORM_MAX(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP64_0(0), FP64_0(0),          FP64_0(0),          FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_0(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /* =>      */ { FP64_0(0), FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /*src1     */ { FP64_0(0),          FP64_DENORM_MAX(0), FP64_0(0),          FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /*src2     */ { FP64_0(0), FP64_0(0),          FP64_0(0),          FP64_DENORM_MAX(1) } },
            { /*src1     */ { FP64_0(0), FP64_DENORM_MAX(0), FP64_DENORM_MAX(0), FP64_0(0)          } },
            { /* =>      */ { FP64_0(0), FP64_0(0),          FP64_0(0),          FP64_0(1)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
    /** @todo Denormals. */
    /*
     * Invalids.
     */
    /*35*/ FP64_TABLE_D9_PD_INVALIDS
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(minpd_XMM1_XMM2),        255,         RM_REG, T_SSE2,    XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(minpd_XMM1_FSxBX),       255,         RM_MEM, T_SSE2,    XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vminpd_XMM1_XMM2_XMM3),  X86_XCPT_GP, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vminpd_XMM1_XMM2_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vminpd_YMM1_YMM2_YMM3),  X86_XCPT_GP, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vminpd_YMM1_YMM2_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(minpd_XMM8_XMM9),        255,         RM_REG, T_SSE2,    XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(minpd_XMM8_FSxBX),       255,         RM_MEM, T_SSE2,    XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vminpd_XMM8_XMM9_XMM10), X86_XCPT_GP, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vminpd_XMM8_XMM9_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vminpd_YMM8_YMM9_YMM10), X86_XCPT_GP, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vminpd_YMM8_YMM9_FSxBX), X86_XCPT_GP, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]MINSS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_minss(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP32_0(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_0(0), FP32_0_x7(0) } },
            { /* =>      */ { FP32_0(0), FP32_0_x7(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_0_x7(0) } },
            { /*src1     */ { FP32_0(0), FP32_0_x7(0) } },
            { /* =>      */ { FP32_0(0), FP32_0_x7(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_0(1), FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_0(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_0(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_0(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(1), FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_0(1), FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /*11*/{ { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_0(0),   FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_0(0),   FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),   FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_0(0),   FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_0(0),   FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_0(0),   FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),   FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_INF(1), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_INF(1), FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_INF(1), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(1), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_INF(1), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_INF(1), FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0),     FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_NORM_V0(0), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_NORM_V0(0), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_INF(0),     FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_NORM_V3(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_NORM_V3(0), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_V7(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(1),     FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_V7(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_NORM_V7(0), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*27*/{ { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_NORM_MIN(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_NORM_MIN(0), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(0), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_NORM_MIN(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_NORM_MAX(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MIN(0),          FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_NORM_MIN(0),          FP32_RAND_x7_V5 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_NORM_MIN(0),          FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_NORM_MIN(0),          FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x600000, 0x7f)/* 1.75*/, FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(1, 0,        0x7d)/*-0.25*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0, 0x7d)/*0.25*/, FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_V(0, 0, 0x7e)/*0.50*/, FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0, 0, 0x7d)/*0.25*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_NORM_MAX(0), FP32_RAND_x7_V0 } },
            { /*src1     */ { FP32_NORM_V1(0),  FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_NORM_V1(0),  FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_V(0, 0x1ea980, 0x8f)/*  81235*/, FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0, 0x1ea980, 0x8f)/*  81235*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(1, 0x2514d6, 0x93)/*-1352346.75*/, FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_V(0, 0x7c9000, 0x88)/*    1010.25*/, FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(1, 0x2514d6, 0x93)/*-1352346.75*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(1, 0x2514d6, 0x93)/*-1352346.75*/, FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_V(0, 0x253468, 0x93)/* 1353357.00*/, FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(1, 0x2514d6, 0x93)/*-1352346.75*/, FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(1, 0x40e6b6, 0x8c)/*-12345.678*/, FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_V(1, 0x40e6b7, 0x8c)/*-12345.679*/, FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(1, 0x40e6b7, 0x8c)/*-12345.679*/, FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x620b2e, 0x92)/*925874.9*/, FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_V(0, 0x620b2d, 0x92)/*925874.8*/, FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0, 0x620b2d, 0x92)/*925874.8*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x490fda, 0x80)/*3.1415926*/, FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_V(0, 0x490fdb, 0x80)/*3.1415927*/, FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0, 0x490fda, 0x80)/*3.1415926*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(1, 0x40e6b6, 0x8c)/*-12345.678*/, FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_V(1, 0x40e6b7, 0x8c)/*-12345.679*/, FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(1, 0x40e6b7, 0x8c)/*-12345.679*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x5dd520, 0x8e)/* 56789.125*/, FP32_RAND_x7_V4 } },
            { /*src1     */ { FP32_V(1, 0x5dd521, 0x8e)/*-56789.127*/, FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(1, 0x5dd521, 0x8e)/*-56789.127*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_V(0, 0x600000, 0x7e)/* 0.875*/, FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_V(1, 0,        0x7d)/*-0.250*/, FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(1, 0,        0x7d)/*-0.250*/, FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /** @todo More Normals. */
    /*
     * Denormals.
     */
    /*46*/{ { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_0(0),          FP32_RAND_x7_V2 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V4 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V5 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V1 } },
            { /*src1     */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V3 } },
            { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V7 } },
            { /*src1     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_0(1),          FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V6 } },
            { /*src1     */ { FP32_0(0),          FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0),          FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
    /** @todo More Denormals. */
    /*56*/ FP32_TABLE_D9_SS_INVALIDS
    /** @todo Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(minss_XMM3_XMM4),        255,         RM_REG, T_SSE,     XMM3, XMM3, XMM4,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(minss_XMM3_FSxBX),       255,         RM_MEM, T_SSE,     XMM3, XMM3, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vminss_XMM1_XMM6_XMM7),  255,         RM_REG, T_AVX_128, XMM1, XMM6, XMM7,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vminss_XMM1_XMM6_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM6, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(minss_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(minss_XMM8_FSxBX),       X86_XCPT_AC, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vminss_XMM8_XMM9_XMM10), 255,         RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vminss_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    /** Note: Intel 64 & IA-32 Architecture SDM Vol 2B says Table 2-19, "Type 2 Class Exception Conditions."; testing says Type 3 */
    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]MINSD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_minsd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_INF(0), FP64_SNAN(0), FP64_SNAN(0) } },
            { /*src1     */ { FP64_0(0), FP64_INF(1), FP64_QNAN(0), FP64_SNAN(1) } },
            { /* =>      */ { FP64_0(0), FP64_INF(1), FP64_QNAN(0), FP64_SNAN(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V0(0), FP64_RAND_V0(0) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_0(1), FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(0) } },
            { /*src1     */ { FP64_0(1), FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_0(0), FP64_RAND_V2(1), FP64_RAND_V3(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_0(1), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
            { /*src1     */ { FP64_0(0), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_0(1), FP64_RAND_V0(1), FP64_RAND_V1(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1), FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_0(1), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_0(1), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(1), FP64_RAND_V3(1), FP64_RAND_V1(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_0(1), FP64_RAND_V1(0), FP64_RAND_V0(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(1), FP64_RAND_V1(0), FP64_RAND_V0(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /*11*/{ { /*src2     */ { FP64_INF(0), FP64_RAND_V3(1), FP64_RAND_V1(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_0(0),   FP64_RAND_V1(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(0),   FP64_RAND_V1(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),   FP64_RAND_V1(1), FP64_RAND_V1(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_0(0),   FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_INF(1),     FP64_SNAN(1),    FP64_QNAN(1)    } },
            { /*src1     */ { FP64_0(0),   FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_0(0),   FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),   FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_INF(1), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_INF(1), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_RAND_V3(1), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V0(0) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V0(1), FP64_RAND_V0(1), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_V0(1), FP64_RAND_V0(1), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_RAND_V3(0),   FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_INF(1), FP64_QNAN_V(1, 1), FP64_RAND_V1(1), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_INF(1), FP64_QNAN_V(1, 1), FP64_RAND_V1(1), FP64_RAND_V2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_RAND_V2(1), FP64_RAND_V1(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(1), FP64_RAND_V0(0), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_INF(1), FP64_RAND_V0(0), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_RAND_V1(1), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_INF(1), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(1), FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(0), FP64_RAND_V0(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_INF(1), FP64_RAND_V0(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_RAND_V2(1), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(1), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_INF(1), FP64_RAND_V2(0), FP64_RAND_V3(0), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0), FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_INF(1), FP64_RAND_V0(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_INF(1), FP64_RAND_V0(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0),     FP64_RAND_V0(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /*src1     */ { FP64_NORM_V0(0), FP64_RAND_V1(1), FP64_RAND_V3(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_NORM_V0(0), FP64_RAND_V1(1), FP64_RAND_V3(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_INF(0),     FP64_INF(0), FP64_SNAN(1), FP64_INF(1)  } },
            { /*src1     */ { FP64_NORM_V3(0), FP64_INF(1), FP64_QNAN(1), FP64_SNAN(1) } },
            { /* =>      */ { FP64_NORM_V3(0), FP64_INF(1), FP64_QNAN(1), FP64_SNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_V2(0), FP64_RAND_V3(1), FP64_QNAN(1),    FP64_SNAN(1)    } },
            { /*src1     */ { FP64_INF(1),     FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_INF(1),     FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_V2(0), FP64_SNAN(0), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_INF(0),     FP64_RAND_V2(0),   FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_NORM_V2(0), FP64_RAND_V2(0),   FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*27*/{ { /*src2     */ { FP64_NORM_MAX(0), FP64_RAND_V2(1), FP64_RAND_V0(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_RAND_V3(1), FP64_RAND_V2(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(0), FP64_RAND_V3(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_NORM_MIN(0), FP64_RAND_V2(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_NORM_MIN(0), FP64_RAND_V2(0), FP64_RAND_V1(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(0), FP64_RAND_V3(1), FP64_RAND_V0(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V1(0), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_NORM_MIN(0), FP64_RAND_V1(0), FP64_RAND_V3(0), FP64_RAND_V1(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_NORM_MAX(0), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_NORM_MAX(0), FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V1(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MIN(0),          FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_RAND_V1(0), FP64_RAND_V1(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_NORM_MIN(0),          FP64_RAND_V1(0), FP64_RAND_V1(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_NORM_SAFE_INT_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_SAFE_INT_MAX(0), FP64_INF(0),     FP64_QNAN(1),    FP64_QNAN(0)    } },
            { /*src1     */ { FP64_NORM_MIN(0),          FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_NORM_MIN(0),          FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0, 0x409)/*1024*/,  FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_V(0, 0, 0x408)/* 512*/,  FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_V(0, 0, 0x408)/* 512*/,  FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xc122186c3cfd0, 0x42d)/*123456789876543.25*/,  FP64_RAND_V2(1), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/,  FP64_RAND_V0(0), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/*121098765432102.75*/,  FP64_RAND_V0(0), FP64_RAND_V2(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_NORM_MAX(0), FP64_RAND_V0(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_NORM_V1(0),  FP64_RAND_V0(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_NORM_V1(0),  FP64_RAND_V0(1), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xc000000000000, 0x3ff)/*1.75*/, FP64_RAND_V3(0), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_V(0, 0,               0x3fd)/*0.25*/, FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V1(0) } },
            { /* =>      */ { FP64_V(0, 0,               0x3fd)/*0.25*/, FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(1, 0, 0x3fd)/*-0.25*/, FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_V(1, 0, 0x3fe)/*-0.50*/, FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V1(1) } },
            { /* =>      */ { FP64_V(1, 0, 0x3fe)/*-0.50*/, FP64_RAND_V0(0), FP64_RAND_V1(0), FP64_RAND_V1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0x26580b4c7e6b7, 0x41d)/*1234567891.1234567*/, FP64_RAND_V2(1), FP64_RAND_V3(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_V(0, 0x26580b4c7e6bc, 0x41d)/*1234567891.1234580*/, FP64_RAND_V3(0), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_V(0, 0x26580b4c7e6b7, 0x41d)/*1234567891.1234567*/, FP64_RAND_V3(0), FP64_RAND_V1(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xf9b0207d06184, 0x3fb)/*0.1234589833333129*/, FP64_RAND_V3(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_V(0, 0xf9b0207d0617d, 0x3fb)/*0.1234589833333128*/, FP64_RAND_V1(1), FP64_RAND_V0(0), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_V(0, 0xf9b0207d0617d, 0x3fb)/*0.1234589833333128*/, FP64_RAND_V1(1), FP64_RAND_V0(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/* 121098765432102.75*/,  FP64_RAND_V2(1), FP64_RAND_V2(1), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_V(1, 0xbcd80e0108cc0, 0x42e)/*-244555555308646.00*/,  FP64_RAND_V3(0), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_V(1, 0xbcd80e0108cc0, 0x42e)/*-244555555308646.00*/,  FP64_RAND_V3(0), FP64_RAND_V3(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xcf0033a34f337, 0x432)/*4072598000007579.5*/, FP64_RAND_V3(1), FP64_RAND_V2(1), FP64_RAND_V1(1) } },
            { /*src1     */ { FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_V(0, 0xd6eca42000000, 0x419)/*       123450000.5*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(1, 0xbcd80e0108cc0, 0x42e)/*-244555555308646.00*/, FP64_INF(1), FP64_SNAN(1), FP64_INF(1)  } },
            { /*src1     */ { FP64_V(0, 0xb88e0395d49b0, 0x42d)/* 121098765432102.75*/, FP64_INF(1), FP64_QNAN(0), FP64_SNAN(0) } },
            { /* =>      */ { FP64_V(1, 0xbcd80e0108cc0, 0x42e)/*-244555555308646.00*/, FP64_INF(1), FP64_QNAN(0), FP64_SNAN(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(0, 0xbcd80e0108cc0, 0x42e)/* 244555555308646.00*/, FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_V(1, 0xb88e0395d49b0, 0x42d)/*-121098765432102.75*/, FP64_RAND_V0(0), FP64_RAND_V0(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_V(1, 0xb88e0395d49b0, 0x42d)/*-121098765432102.75*/, FP64_RAND_V0(0), FP64_RAND_V0(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_V(1, 0xcf0033a34f337, 0x432)/*-4072598000007579.5*/, FP64_RAND_V1(0), FP64_RAND_V2(0), FP64_RAND_V1(0) } },
            { /*src1     */ { FP64_V(0, 0xd6eca42000000, 0x419)/*        123450000.5*/, FP64_RAND_V2(0), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
            { /* =>      */ { FP64_V(1, 0xcf0033a34f337, 0x432)/*-4072598000007579.5*/, FP64_RAND_V2(0), FP64_RAND_V2(1), FP64_RAND_V3(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /** @todo More Normals. */
    /*
     * Denormals.
     */
    /*46*/{ { /*src2     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(0), FP64_RAND_V0(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_0(0),          FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_0(0),          FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_0(0),          FP64_SNAN(0),    FP64_QNAN(1),    FP64_QNAN(0)    } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(0), FP64_RAND_V3(1), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_0(0),          FP64_RAND_V2(0), FP64_RAND_V3(1), FP64_RAND_V2(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_INF(1), FP64_SNAN(0), FP64_INF(1)  } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_INF(0), FP64_QNAN(1), FP64_SNAN(1) } },
            { /* =>      */ { FP64_0(0),          FP64_INF(0), FP64_QNAN(1), FP64_SNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(1), FP64_RAND_V0(1), FP64_RAND_V3(0) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
            { /* =>      */ { FP64_DENORM_MAX(0), FP64_RAND_V3(0), FP64_RAND_V2(0), FP64_RAND_V3(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MAX(0), FP64_RAND_V1(1), FP64_RAND_V2(1), FP64_RAND_V2(0) } },
            { /*src1     */ { FP64_DENORM_MAX(1), FP64_RAND_V0(0), FP64_RAND_V3(0), FP64_RAND_V0(0) } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_RAND_V0(0), FP64_RAND_V3(0), FP64_RAND_V0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MAX(1), FP64_RAND_V3(1), FP64_RAND_V0(0), FP64_RAND_V3(1) } },
            { /*src1     */ { FP64_DENORM_MAX(0), FP64_RAND_V2(1), FP64_RAND_V3(1), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_DENORM_MAX(1), FP64_RAND_V2(1), FP64_RAND_V3(1), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(1), FP64_RAND_V0(1), FP64_RAND_V3(1), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_DENORM_MIN(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /* =>      */ { FP64_DENORM_MIN(1), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(1), FP64_INF(0),     FP64_QNAN(1),    FP64_SNAN(1) } },
            { /*src1     */ { FP64_DENORM_MIN(1), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V0(1)   } },
            { /* =>      */ { FP64_DENORM_MIN(1), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V0(1)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(1), FP64_SNAN(1),    FP64_SNAN(0),    FP64_QNAN(0)    } },
            { /*src1     */ { FP64_DENORM_MIN(1), FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
            { /* =>      */ { FP64_0(1),          FP64_RAND_V1(0), FP64_RAND_V2(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src2     */ { FP64_DENORM_MIN(0), FP64_RAND_V0(1), FP64_RAND_V1(0), FP64_RAND_V2(1) } },
            { /*src1     */ { FP64_0(0),          FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(0) } },
            { /* =>      */ { FP64_0(0),          FP64_RAND_V0(0), FP64_RAND_V1(1), FP64_RAND_V2(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
    /** @todo More Denormals. */
    /*
     * Invalids.
     */
    /*56*/ FP64_TABLE_D9_SD_INVALIDS
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(minsd_XMM3_XMM4),        255,         RM_REG, T_SSE2,    XMM3, XMM3, XMM4,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(minsd_XMM3_FSxBX),       255,         RM_MEM, T_SSE2,    XMM3, XMM3, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vminsd_XMM1_XMM6_XMM7),  255,         RM_REG, T_AVX_128, XMM1, XMM6, XMM7,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vminsd_XMM1_XMM6_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM6, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(minsd_XMM8_XMM9),        255,         RM_REG, T_SSE2,    XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(minsd_XMM8_FSxBX),       X86_XCPT_AC, RM_MEM, T_SSE2,    XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vminsd_XMM8_XMM9_XMM10), 255,         RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vminsd_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]RCPPS.
 */
/** @todo this fails entirely under IEM: the instructions rcpps, rcpss, rsqrtps, rsqrtss are all implemented with too much precision & attention to exceptions! */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_rcpps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    /*
     * Infinity.
     */
    /* 4*/{ { /*src1     */ { FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_0(0)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_0(0)   } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_0(0)   } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_0(1)   } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP },
    /*
     * Normals.
     */
    /* 8*/{ { /*src1     */ { FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_FZ },
          { { /*src1     */ { FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(1), FP32_1(0), FP32_1(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_V(0, 0, RTFLOAT32U_EXP_BIAS + 1)/*  2*/,
                              FP32_V(1, 0, RTFLOAT32U_EXP_BIAS + 2)/* -4*/,
                              FP32_V(0, 0, RTFLOAT32U_EXP_BIAS + 3)/*  8*/,
                              FP32_V(1, 0, RTFLOAT32U_EXP_BIAS + 4)/*-16*/,
                              FP32_NORM_MAX(0),
                              FP32_NORM_MIN(0),
                              FP32_NORM_MAX(1),
                              FP32_NORM_MIN(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 2),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 3),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 4),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 5),
                              FP32_0(0),
                              FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_MAX - 3),
                              FP32_0(1),
                              FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_MAX - 3) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_V(0, 0x7fe800, RTFLOAT32U_EXP_BIAS - 2)/* 1.11111111110100000000000(bin)*2^0 */,
                              FP32_V(0, 0xc01,    RTFLOAT32U_EXP_BIAS - 1)/* 1.00000000000110000000001(bin)*2^1 */,
                              FP32_V(0, 0x7fe800, RTFLOAT32U_EXP_MAX  - 3)/* 1.11111111110100000000000(bin)*2^125 */,
                              FP32_V(0, 0xc01,    RTFLOAT32U_EXP_MAX  - 2)/* 1.00000000000110000000001(bin)*2^126 */,
                              FP32_V(0, 0xc01,    RTFLOAT32U_EXP_MAX  - 3)/* 1.00000000000110000000001(bin)*2^125 */,
                              FP32_V(0, 0xc00,    RTFLOAT32U_EXP_MAX  - 2)/* 1.00000000000110000000000(bin)*2^126 */,
                              FP32_V(0, 0xc02,    RTFLOAT32U_EXP_MAX  - 2)/* 1.00000000000110000000010(bin)*2^126 */,
                              FP32_V(0, 0x7fe801, RTFLOAT32U_EXP_MAX  - 3)/* 1.11111111110100000000001(bin)*2^125 */ } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0, 4096, RTFLOAT32U_EXP_BIAS + 1),
                              FP32_V(0, FP32_FRAC_DENORM_MAX - 4095, RTFLOAT32U_EXP_BIAS),
                              FP32_V(0, 4096, 1),
                              FP32_0(0),
                              FP32_V(0, 0x7ff000, 1),
                              FP32_0(0),
                              FP32_0(0),
                              FP32_V(0, 4096, 1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/,
                              FP32_V(0, 0x1ea980, 0x8f)/*81235*/,
                              FP32_V(0, 0x253468, 0x93)/*1353357*/,
                              FP32_V(0, 0x620b2d, 0x92)/*925874.8*/,
                              FP32_V(0, 0x600000, 0x7e)/*0.875*/,
                              FP32_V(0, 0x490fda, 0x80)/*3.1415926*/,
                              FP32_V(1, 0,        0x7d)/*-0.250*/,
                              FP32_V(1, 0x534000, 0x86)/*-211.25*/ } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0, 1343488, 106),
                              FP32_V(0, 5146624, 110),
                              FP32_V(0, 4610048, 106),
                              FP32_V(0, 1112064, 107),
                              FP32_V(0, 1196032, 127),
                              FP32_V(0, 2293760, 125),
                              FP32_V(1, 8384512, 128),
                              FP32_V(1, 1775616, 119) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
   /*
    * Denormals.
    */
    /*15*/{ { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0),        FP32_INF(1),        FP32_INF(0),        FP32_INF(1),        FP32_INF(0),        FP32_INF(1),        FP32_INF(1),        FP32_INF(0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(1),        FP32_INF(1),        FP32_INF(1),        FP32_INF(1),        FP32_INF(0),        FP32_INF(1),        FP32_INF(0),        FP32_INF(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0),        FP32_INF(1),        FP32_INF(0),        FP32_INF(1),        FP32_INF(0),        FP32_INF(1),        FP32_INF(1),        FP32_INF(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0),        FP32_INF(1),        FP32_INF(0),        FP32_INF(1),        FP32_INF(0),        FP32_INF(1),        FP32_INF(1),        FP32_INF(0)        } },
              /*mxcsr:in */ X86_MXCSR_RC_UP | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_RC_UP | X86_MXCSR_FZ },
          { { /*src1     */ { FP32_DENORM_V0(0), FP32_DENORM_V1(0), FP32_DENORM_V2(0), FP32_DENORM_V3(0), FP32_DENORM_V4(0), FP32_DENORM_V5(0), FP32_DENORM_V6(0), FP32_DENORM_V7(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0),       FP32_INF(0),       FP32_INF(0),       FP32_INF(0),       FP32_INF(0),       FP32_INF(0),       FP32_INF(0),       FP32_INF(0)       } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_DENORM_V0(1), FP32_DENORM_V1(1), FP32_DENORM_V2(1), FP32_DENORM_V3(1), FP32_DENORM_V4(1), FP32_DENORM_V5(1), FP32_DENORM_V6(1), FP32_DENORM_V7(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(1),       FP32_INF(1),       FP32_INF(1),       FP32_INF(1),       FP32_INF(1),       FP32_INF(1),       FP32_INF(1),       FP32_INF(1)       } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_DENORM_V7(1), FP32_DENORM_V6(0), FP32_DENORM_V5(1), FP32_DENORM_V4(0), FP32_DENORM_V3(1), FP32_DENORM_V2(0), FP32_DENORM_V1(1), FP32_DENORM_V0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(1),       FP32_INF(0),       FP32_INF(1),       FP32_INF(0),       FP32_INF(1),       FP32_INF(0),       FP32_INF(1),       FP32_INF(0)       } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_DENORM_V7(1), FP32_DENORM_V6(0), FP32_DENORM_V5(1), FP32_DENORM_V4(0), FP32_DENORM_V3(1), FP32_DENORM_V2(0), FP32_DENORM_V1(1), FP32_DENORM_V0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(1),       FP32_INF(0),       FP32_INF(1),       FP32_INF(0),       FP32_INF(1),       FP32_INF(0),       FP32_INF(1),       FP32_INF(0)       } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ },
    /** @todo More Denormals. */
    /*
     * Invalids.
     */
    /*23*/{ { /*src1     */ { FP32_SNAN(0),      FP32_SNAN(1),      FP32_QNAN(0), FP32_QNAN(1), FP32_SNAN(1),      FP32_QNAN(1), FP32_QNAN(1), FP32_SNAN(1)      } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_V(1, 1), FP32_QNAN(0), FP32_QNAN(1), FP32_QNAN_V(1, 1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN_V(1, 1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_SNAN(0),      FP32_SNAN(1),      FP32_QNAN(0), FP32_QNAN(1), FP32_SNAN(1),      FP32_QNAN(1), FP32_QNAN(1), FP32_SNAN(1)      } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_V(1, 1), FP32_QNAN(0), FP32_QNAN(1), FP32_QNAN_V(1, 1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN_V(1, 1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_SNAN(0),      FP32_SNAN(1),      FP32_QNAN(0), FP32_QNAN(1), FP32_SNAN(1),      FP32_QNAN(1), FP32_QNAN(1), FP32_SNAN(1)      } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_V(1, 1), FP32_QNAN(0), FP32_QNAN(1), FP32_QNAN_V(1, 1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN_V(1, 1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_SNAN(0),      FP32_SNAN(1),      FP32_QNAN(0), FP32_QNAN(1), FP32_SNAN(1),      FP32_QNAN(1), FP32_QNAN(1), FP32_SNAN(1)      } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_QNAN_V(1, 1), FP32_QNAN(0), FP32_QNAN(1), FP32_QNAN_V(1, 1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN_V(1, 1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_SNAN_V0(0), FP32_SNAN_V1(1), FP32_SNAN_V2(0), FP32_SNAN_V3(1), FP32_SNAN_V4(1), FP32_SNAN_V5(1), FP32_SNAN_V6(1), FP32_SNAN_V7(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_QNAN_V0(0), FP32_QNAN_V1(1), FP32_QNAN_V2(0), FP32_QNAN_V3(1), FP32_QNAN_V4(1), FP32_QNAN_V5(1), FP32_QNAN_V6(1), FP32_QNAN_V7(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_QNAN_V0(0), FP32_QNAN_V0(1), FP32_QNAN_V0(0), FP32_QNAN_V0(1), FP32_QNAN_V0(1), FP32_QNAN_V0(0), FP32_QNAN_V0(1), FP32_QNAN_V0(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_QNAN_V0(0), FP32_QNAN_V0(1), FP32_QNAN_V0(0), FP32_QNAN_V0(1), FP32_QNAN_V0(1), FP32_QNAN_V0(0), FP32_QNAN_V0(1), FP32_QNAN_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_QNAN_V0(1), FP32_SNAN_V0(1), FP32_QNAN_V1(1), FP32_SNAN_V0(1), FP32_QNAN_V7(1), FP32_SNAN_V7(1), FP32_QNAN_V3(1), FP32_SNAN_V0(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_QNAN_V0(1), FP32_QNAN_V0(1), FP32_QNAN_V1(1), FP32_QNAN_V0(1), FP32_QNAN_V7(1), FP32_QNAN_V7(1), FP32_QNAN_V3(1), FP32_QNAN_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_QNAN_V0(1), FP32_SNAN_V0(1), FP32_QNAN_V1(1), FP32_SNAN_V3(1), FP32_QNAN_V4(1), FP32_SNAN_V5(1), FP32_QNAN_V6(1), FP32_SNAN_V7(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_QNAN_V0(1), FP32_QNAN_V0(1), FP32_QNAN_V1(1), FP32_QNAN_V3(1), FP32_QNAN_V4(1), FP32_QNAN_V5(1), FP32_QNAN_V6(1), FP32_QNAN_V7(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(rcpps_XMM1_XMM2),   255, RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(rcpps_XMM1_FSxBX),  255, RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vrcpps_XMM1_XMM2),  255, RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vrcpps_XMM1_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vrcpps_YMM1_YMM2),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vrcpps_YMM1_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(rcpps_XMM8_XMM9),   255, RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(rcpps_XMM8_FSxBX),  255, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vrcpps_XMM8_XMM9),  255, RM_REG, T_AVX_128, XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vrcpps_XMM8_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vrcpps_YMM8_YMM9),  255, RM_REG, T_AVX_256, YMM8, YMM8, YMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vrcpps_YMM8_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig4));
}


/*
 * [V]RCPSS.
 */
/** @todo this fails entirely under IEM: the instructions rcpps, rcpss, rsqrtps, rsqrtss are all implemented with too much precision & attention to exceptions! */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_rcpss(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0),       FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(0),     FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),       FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V3(1), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(1),     FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),       FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V5(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(1),     FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),       FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V5(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(1),     FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),       FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V1(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(1),     FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(0),       FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V0(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(0),     FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 6*/{ { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_0(0),       FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_0(0),       FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),       FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_0(0),       FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(1),       FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_0(1),       FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V3(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(1),       FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V4(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_0(1),       FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V5(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_0(1),       FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /*15*/{ { /*src1     */ { FP32_1(0),                                    FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V3(0),                              FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_1(0),                                    FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V2(0),                              FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_1(0),                                    FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V2(0),                              FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_1(0),                                    FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V1(0),                              FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x7fe800, RTFLOAT32U_EXP_BIAS - 2), FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V2(0),                              FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0, 4096, RTFLOAT32U_EXP_BIAS + 1),     FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0xc01, RTFLOAT32U_EXP_BIAS - 1),                   FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V2(0),                                             FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_DENORM_MAX - 4095, RTFLOAT32U_EXP_BIAS), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x7fe800, RTFLOAT32U_EXP_MAX  - 3), FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V1(1),                              FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(0, 4096, 1),                           FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x7fe800, RTFLOAT32U_EXP_MAX  - 3), FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V1(1),                              FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(0, 4096, 1),                           FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x7fe800, RTFLOAT32U_EXP_MAX  - 3), FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V1(1),                              FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(0, 4096, 1),                           FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0xc01, RTFLOAT32U_EXP_MAX  - 2), FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V2(1),                           FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_0(0),                                 FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0xc01, RTFLOAT32U_EXP_MAX  - 3), FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V2(1),                           FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(0, 0x7ff000, 1),                    FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0xc00, RTFLOAT32U_EXP_MAX  - 2), FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V1(1),                           FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),                                 FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0xc00, RTFLOAT32U_EXP_MAX  - 2), FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V2(1),                           FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_0(0),                                 FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0xc00, RTFLOAT32U_EXP_MAX  - 2), FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V4(1),                           FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_0(0),                                 FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0xc02, RTFLOAT32U_EXP_MAX  - 2), FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V6(1),                           FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_0(0),                                 FP32_RAND_x7_V5 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0xc02, RTFLOAT32U_EXP_MAX  - 2), FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V2(0),                           FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0),                                 FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0xc02, RTFLOAT32U_EXP_MAX  - 2), FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V3(1),                           FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_0(0),                                 FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0xc02, RTFLOAT32U_EXP_MAX  - 2), FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V5(1),                           FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_0(0),                                 FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x7fe801, RTFLOAT32U_EXP_MAX  - 3), FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_RAND_V7(1),                              FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0, 4096, 1),                           FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x7fe801, RTFLOAT32U_EXP_MAX  - 3), FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V4(1),                              FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_V(0, 4096, 1),                           FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x7fe801, RTFLOAT32U_EXP_MAX  - 3), FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V3(1),                              FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(0, 4096, 1),                           FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x7fe801, RTFLOAT32U_EXP_MAX  - 3), FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V2(1),                              FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0, 4096, 1),                           FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V3(1),                      FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0, 1343488, 106),              FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V3(1),                      FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0, 1343488, 106),              FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V3(1),                      FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0, 1343488, 106),              FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x1ea980, 0x8f)/*81235*/, FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V2(0),                    FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0, 5146624, 110),            FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x253468, 0x93)/*1353357*/, FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V3(0),                      FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0, 4610048, 106),              FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x620b2d, 0x92)/*925874.8*/, FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_RAND_V2(0),                       FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0, 1112064, 107),               FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x620b2d, 0x92)/*925874.8*/, FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_RAND_V2(0),                       FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0, 1112064, 107),               FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x600000, 0x7e)/*0.875*/, FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_RAND_V3(0),                    FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0, 1196032, 127),            FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x490fda, 0x80)/*3.1415926*/, FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V1(0),                        FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0, 2293760, 125),                FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x490fda, 0x80)/*3.1415926*/, FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V1(0),                        FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0, 2293760, 125),                FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x490fda, 0x80)/*3.1415926*/, FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V1(0),                        FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0, 2293760, 125),                FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(1, 0, 0x7d)/*-0.250*/, FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V6(0),              FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(1, 8384512, 128),      FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(1, 0, 0x7d)/*-0.250*/, FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V3(1),              FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(1, 8384512, 128),      FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(1, 0x534000, 0x86)/*-211.25*/, FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V3(1),                      FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(1, 1775616, 119),              FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(1, 0x534000, 0x86)/*-211.25*/, FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V3(1),                      FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(1, 1775616, 119),              FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
   /*
    * Denormals.
    */
    /*15*/{ { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_RAND_V7(1),    FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0),        FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_XCPT_MASK,
              /*128:out  */ X86_MXCSR_XCPT_MASK,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_RAND_V7(1),    FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0),        FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_RAND_V7(1),    FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0),        FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_RAND_V7(1),    FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0),        FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V6(0),    FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_INF(1),        FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V6(0),    FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_INF(1),        FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V6(0),    FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_INF(1),        FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V5(0),    FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_INF(0),        FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_RAND_V4(1),    FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_INF(0),        FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V3(0),    FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(1),        FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V3(0),    FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(1),        FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V3(0),    FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(1),        FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V0(0), FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V3(1),   FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_INF(0),       FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V0(1), FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V2(1),   FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(1),       FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V7(1), FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V1(0),   FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(1),       FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V7(1), FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V1(0),   FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(1),       FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V7(1), FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V0(0),   FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(1),       FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V5(0), FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_RAND_V0(0),   FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(0),       FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V5(0), FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_RAND_V0(0),   FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(0),       FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*34*/{ { /*src1     */ { FP32_SNAN(0),      FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_RAND_V0(0),   FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN(0),      FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V1(0),   FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN(0),      FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V2(0),   FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN(0),      FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_RAND_V3(0),   FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN(0),      FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V4(0),   FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN(0),      FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V5(0),   FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN_V0(0), FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V6(0), FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_QNAN_V0(0), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN(1),      FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V7(0),   FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_QNAN_V(1, 1), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN_V1(0), FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V0(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_QNAN_V1(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN_V2(1), FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V1(1), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_QNAN_V2(1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN_V3(1), FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V2(1), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_QNAN_V3(1), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN_V4(0), FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_RAND_V3(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_QNAN_V4(0), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN_V5(1), FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V4(1), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_QNAN_V5(1), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_QNAN_V1(0), FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V5(1), FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_QNAN_V1(0), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_QNAN_V2(1), FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_RAND_V6(1), FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_QNAN_V2(1), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_QNAN_V3(1), FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V7(1), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_QNAN_V3(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_QNAN_V4(1), FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V7(1), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_QNAN_V4(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
    };

    /* Sanity-check subset for 'same register' instruction variants */
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValuesSR[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0),   FP32_RAND_x7_V7 } },
            { /*unused   */ { FP32_ROW_UNUSED              } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),   FP32_RAND_x7_V0 } },
            { /*unused   */ { FP32_ROW_UNUSED              } },
            { /* =>      */ { FP32_INF(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 2*/{ { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V1 } },
            { /*unused   */ { FP32_ROW_UNUSED              } },
            { /* =>      */ { FP32_0(0),   FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1), FP32_RAND_x7_V3 } },
            { /*unused   */ { FP32_ROW_UNUSED              } },
            { /* =>      */ { FP32_0(1),   FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /* 4*/{ { /*src1     */ { FP32_1(0),                                    FP32_RAND_x7_V3 } },
            { /*unused   */ { FP32_ROW_UNUSED                                               } },
            { /* =>      */ { FP32_V(0, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_1(1),                                    FP32_RAND_x7_V2 } },
            { /*unused   */ { FP32_ROW_UNUSED                                               } },
            { /* =>      */ { FP32_V(1, 0x7ff000, RTFLOAT32U_EXP_BIAS - 1), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0xc01, RTFLOAT32U_EXP_BIAS - 1),                   FP32_RAND_x7_V4 } },
            { /*unused   */ { FP32_ROW_UNUSED                                                              } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_DENORM_MAX - 4095, RTFLOAT32U_EXP_BIAS), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0xc01, RTFLOAT32U_EXP_BIAS - 1),                   FP32_RAND_x7_V4 } },
            { /*unused   */ { FP32_ROW_UNUSED                                                              } },
            { /* =>      */ { FP32_V(0, FP32_FRAC_DENORM_MAX - 4095, RTFLOAT32U_EXP_BIAS), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x7fe800, RTFLOAT32U_EXP_MAX  - 3), FP32_RAND_x7_V5 } },
            { /*unused   */ { FP32_ROW_UNUSED                                               } },
            { /* =>      */ { FP32_V(0, 4096, 1),                           FP32_RAND_x7_V5 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x7fe800, RTFLOAT32U_EXP_MAX  - 3), FP32_RAND_x7_V6 } },
            { /*unused   */ { FP32_ROW_UNUSED                                               } },
            { /* =>      */ { FP32_V(0, 4096, 1),                           FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_RAND_x7_V1 } },
            { /*unused   */ { FP32_ROW_UNUSED                                       } },
            { /* =>      */ { FP32_V(0, 1343488, 106),              FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x5ca5b8, 0x93)/*1807543*/, FP32_RAND_x7_V5 } },
            { /*unused   */ { FP32_ROW_UNUSED                                       } },
            { /* =>      */ { FP32_V(0, 1343488, 106),              FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x620b2d, 0x92)/*925874.8*/, FP32_RAND_x7_V4 } },
            { /*unused   */ { FP32_ROW_UNUSED                                        } },
            { /* =>      */ { FP32_V(0, 1112064, 107),               FP32_RAND_x7_V4 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x620b2d, 0x92)/*925874.8*/, FP32_RAND_x7_V4 } },
            { /*unused   */ { FP32_ROW_UNUSED                                        } },
            { /* =>      */ { FP32_V(0, 1112064, 107),               FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x490fda, 0x80)/*3.1415926*/, FP32_RAND_x7_V0 } },
            { /*unused   */ { FP32_ROW_UNUSED                                         } },
            { /* =>      */ { FP32_V(0, 2293760, 125),                FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x490fda, 0x80)/*3.1415926*/, FP32_RAND_x7_V0 } },
            { /*unused   */ { FP32_ROW_UNUSED                                         } },
            { /* =>      */ { FP32_V(0, 2293760, 125),                FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0, 0x490fda, 0x80)/*3.1415926*/, FP32_RAND_x7_V0 } },
            { /*unused   */ { FP32_ROW_UNUSED                                         } },
            { /* =>      */ { FP32_V(0, 2293760, 125),                FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(1, 0x534000, 0x86)/*-211.25*/, FP32_RAND_x7_V7 } },
            { /*unused   */ { FP32_ROW_UNUSED                                       } },
            { /* =>      */ { FP32_V(1, 1775616, 119),              FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(1, 0x534000, 0x86)/*-211.25*/, FP32_RAND_x7_V1 } },
            { /*unused   */ { FP32_ROW_UNUSED                                       } },
            { /* =>      */ { FP32_V(1, 1775616, 119),              FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(1, 0x534000, 0x86)/*-211.25*/, FP32_RAND_x7_V2 } },
            { /*unused   */ { FP32_ROW_UNUSED                                       } },
            { /* =>      */ { FP32_V(1, 1775616, 119),              FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(1, 0x534000, 0x86)/*-211.25*/, FP32_RAND_x7_V2 } },
            { /*unused   */ { FP32_ROW_UNUSED                                       } },
            { /* =>      */ { FP32_V(1, 1775616, 119),              FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
   /*
    * Denormals.
    */
    /*21*/{ { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V7 } },
            { /*unused   */ { FP32_ROW_UNUSED                     } },
            { /* =>      */ { FP32_INF(0),        FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V4 } },
            { /*unused   */ { FP32_ROW_UNUSED                     } },
            { /* =>      */ { FP32_INF(0),        FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V7 } },
            { /*unused   */ { FP32_ROW_UNUSED                     } },
            { /* =>      */ { FP32_INF(1),        FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MAX(1), FP32_RAND_x7_V7 } },
            { /*unused   */ { FP32_ROW_UNUSED                     } },
            { /* =>      */ { FP32_INF(1),        FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V6 } },
            { /*unused   */ { FP32_ROW_UNUSED                     } },
            { /* =>      */ { FP32_INF(0),        FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MIN(0), FP32_RAND_x7_V6 } },
            { /*unused   */ { FP32_ROW_UNUSED                     } },
            { /* =>      */ { FP32_INF(0),        FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V5 } },
            { /*unused   */ { FP32_ROW_UNUSED                     } },
            { /* =>      */ { FP32_INF(1),        FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V5 } },
            { /*unused   */ { FP32_ROW_UNUSED                     } },
            { /* =>      */ { FP32_INF(1),        FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V0(0), FP32_RAND_x7_V4 } },
            { /*unused   */ { FP32_ROW_UNUSED                    } },
            { /* =>      */ { FP32_INF(0),       FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V0(1), FP32_RAND_x7_V3 } },
            { /*unused   */ { FP32_ROW_UNUSED                    } },
            { /* =>      */ { FP32_INF(1),       FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V7(1), FP32_RAND_x7_V1 } },
            { /*unused   */ { FP32_ROW_UNUSED                    } },
            { /* =>      */ { FP32_INF(1),       FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V7(1), FP32_RAND_x7_V2 } },
            { /*unused   */ { FP32_ROW_UNUSED                    } },
            { /* =>      */ { FP32_INF(1),       FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V7(1), FP32_RAND_x7_V0 } },
            { /*unused   */ { FP32_ROW_UNUSED                    } },
            { /* =>      */ { FP32_INF(1),       FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*34*/{ { /*src1     */ { FP32_SNAN(0),      FP32_RAND_x7_V7 } },
            { /*unused   */ { FP32_ROW_UNUSED                    } },
            { /* =>      */ { FP32_QNAN_V(0, 1), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN(1),      FP32_RAND_x7_V2 } },
            { /*unused   */ { FP32_ROW_UNUSED                    } },
            { /* =>      */ { FP32_QNAN_V(1, 1), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN_V0(0), FP32_RAND_x7_V1 } },
            { /*unused   */ { FP32_ROW_UNUSED                  } },
            { /* =>      */ { FP32_QNAN_V0(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_SNAN_V5(1), FP32_RAND_x7_V5 } },
            { /*unused   */ { FP32_ROW_UNUSED                  } },
            { /* =>      */ { FP32_QNAN_V5(1), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_QNAN_V2(1), FP32_RAND_x7_V7 } },
            { /*unused   */ { FP32_ROW_UNUSED                  } },
            { /* =>      */ { FP32_QNAN_V2(1), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_QNAN_V3(0), FP32_RAND_x7_V0 } },
            { /*unused   */ { FP32_ROW_UNUSED                  } },
            { /* =>      */ { FP32_QNAN_V3(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(rcpss_XMM1_XMM2),          255,         RM_REG, T_SSE,     XMM1,  XMM1,  XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(rcpss_XMM1_FSxBX),         255,         RM_MEM, T_SSE,     XMM1,  XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(rcpss_XMM8_XMM9),          255,         RM_REG, T_SSE,     XMM8,  XMM8,  XMM9,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(rcpss_XMM8_FSxBX),         255,         RM_MEM, T_SSE,     XMM8,  XMM8,  FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vrcpss_XMM1_XMM2_XMM3),    X86_XCPT_AC, RM_REG, T_AVX_128, XMM1,  XMM2,  XMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vrcpss_XMM1_XMM2_FSxBX),   X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1,  XMM2,  FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(vrcpss_XMM13_XMM14_XMM15), X86_XCPT_AC, RM_REG, T_AVX_128, XMM13, XMM14, XMM15, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vrcpss_XMM13_XMM14_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM13, XMM14, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(rcpss_XMM1_XMM1),          255,         RM_REG, T_SSE,     XMM1,  XMM1,  XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vrcpss_XMM1_XMM1_XMM1),    X86_XCPT_AC, RM_REG, T_AVX_128, XMM1,  XMM1,  XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vrcpss_XMM1_XMM1_XMM2),    X86_XCPT_AC, RM_REG, T_AVX_128, XMM1,  XMM1,  XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vrcpss_XMM1_XMM2_XMM2),    X86_XCPT_AC, RM_REG, T_AVX_128, XMM1,  XMM2,  XMM2,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vrcpss_XMM1_XMM1_FSxBX),   X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1,  XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vrcpss_XMM15_XMM15_XMM15), X86_XCPT_AC, RM_REG, T_AVX_128, XMM15, XMM15, XMM15, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vrcpss_XMM15_XMM15_XMM13), X86_XCPT_AC, RM_REG, T_AVX_128, XMM15, XMM15, XMM13, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vrcpss_XMM13_XMM14_XMM14), X86_XCPT_AC, RM_REG, T_AVX_128, XMM13, XMM14, XMM14, PASS_TEST_ARRAY(s_aValuesSR) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig5));
}


/*
 * [V]SQRTPS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_sqrtps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 4*/{ { /*src1     */ { FP32_INF(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1),  FP32_0(0), FP32_0(0), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN(1), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
    /*
     * Precision (Overflow, Underflow not possible).
     */
    /* 5*/{ { /*src1     */ { FP32_0(0), FP32_1(0), FP32_1(0), FP32_0(1), FP32_1(0), FP32_0(0), FP32_1(0), FP32_2(0)                            } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_1(0), FP32_1(0), FP32_0(1), FP32_1(0), FP32_0(0), FP32_1(0), FP32_V(0, 0x3504f3, 0x7f)/*sqrt(2)*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src1     */ { FP32_0(0), FP32_1(0), FP32_1(0), FP32_0(1), FP32_1(0), FP32_0(0), FP32_1(0), FP32_2(0)                            } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_1(0), FP32_1(0), FP32_0(1), FP32_1(0), FP32_0(0), FP32_1(0), FP32_V(0, 0x3504f3, 0x7f)/*sqrt(2)*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE },
          { { /*src1     */ { FP32_0(0), FP32_1(0), FP32_1(0), FP32_0(1), FP32_1(0), FP32_0(0), FP32_1(0), FP32_2(0)                             } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_1(0), FP32_1(0), FP32_0(1), FP32_1(0), FP32_0(0), FP32_1(0), FP32_V(0, 0x3504f4, 0x7f)/*sqrt^(2)*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE },
          { { /*src1     */ { FP32_0(0), FP32_1(0), FP32_1(0), FP32_0(1), FP32_1(0), FP32_0(0), FP32_1(0), FP32_2(0)                            } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_1(0), FP32_1(0), FP32_0(1), FP32_1(0), FP32_0(0), FP32_1(0), FP32_V(0, 0x3504f3, 0x7f)/*sqrt(2)*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
          { { /*src1     */ { FP32_0(0), FP32_1(0), FP32_1(0), FP32_0(1), FP32_1(0), FP32_0(0), FP32_1(0), FP32_2(0)                            } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_1(0), FP32_1(0), FP32_0(1), FP32_1(0), FP32_0(0), FP32_1(0), FP32_V(0, 0x3504f3, 0x7f)/*sqrt(2)*/ } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_PE },
    /*
     * Normals.
     */
    /*10*/{ { /*src1     */ { FP32_NORM_V0(0), FP32_NORM_V1(0), FP32_NORM_V2(0), FP32_NORM_V3(0), FP32_NORM_V4(0), FP32_NORM_V5(0), FP32_NORM_V6(0), FP32_NORM_V7(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0,0x1ccf5c,0x40)/*sqrt(FP32_NORM_V0)*/,
                              FP32_V(0,0x293fdb,0x97)/*sqrt(FP32_NORM_V1)*/,
                              FP32_V(0,0x3455c7,0x7e)/*sqrt(FP32_NORM_V2)*/,
                              FP32_V(0,0x27905f,0xbe)/*sqrt(FP32_NORM_V3)*/,
                              FP32_V(0,0x49278b,0x9d)/*sqrt(FP32_NORM_V4)*/,
                              FP32_V(0,0x009150,0xa8)/*sqrt(FP32_NORM_V5)*/,
                              FP32_V(0,0x561776,0x5d)/*sqrt(FP32_NORM_V6)*/,
                              FP32_V(0,0x3504f3,0x68)/*sqrt(FP32_NORM_V7)*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src1     */ { FP32_V(0,0x44000,0x88)/*529.0*/,
                              FP32_V(0,0x0,0x87)/*256.0*/,
                              FP32_V(0,0x440000,0x7c)/*(7/16)^2*/,
                              FP32_V(0,0x6f4840,0x8c)/*123.75^2*/,
                              FP32_V(0,0x40000,0x88)/*528.0*/,
                              FP32_V(0,0x8000,0x87)/*257.0*/,
                              FP32_V(0,0x43ffff,0x7c)/*(7/16)^2-epsilon*/,
                              FP32_V(0,0x6f4841,0x8c)/*123.75^2+epsilon*/ } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0,0x380000,0x83)/*23.0*/,
                              FP32_V(0,0x0,0x83)/*16.0*/,
                              FP32_V(0,0x600000,0x7d)/*7/16*/,
                              FP32_V(0,0x778000,0x85)/*123.75*/,
                              FP32_V(0,0x37d375,0x83)/*sqrt(528)*/,
                              FP32_V(0,0x3ff0,0x83)/*sqrt(257)*/,
                              FP32_V(0,0x5fffff,0x7d)/*7/16-*/,
                              FP32_V(0,0x778001,0x85)/*123.75+*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src1     */ { FP32_V(0,0x44000,0x88)/*529.0*/,
                              FP32_V(0,0x0,0x87)/*256.0*/,
                              FP32_V(0,0x440000,0x7c)/*(7/16)^2*/,
                              FP32_V(0,0x6f4840,0x8c)/*123.75^2*/,
                              FP32_V(0,0x40000,0x88)/*528.0*/,
                              FP32_V(0,0x8000,0x87)/*257.0*/,
                              FP32_V(0,0x43ffff,0x7c)/*(7/16)^2-epsilon*/,
                              FP32_V(0,0x6f4841,0x8c)/*123.75^2+epsilon*/ } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0,0x380000,0x83)/*23.0*/,
                              FP32_V(0,0x0,0x83)/*16.0*/,
                              FP32_V(0,0x600000,0x7d)/*7/16*/,
                              FP32_V(0,0x778000,0x85)/*123.75*/,
                              FP32_V(0,0x37d375,0x83)/*sqrt(528)*/,
                              FP32_V(0,0x3ff0,0x83)/*sqrt(257)*/,
                              FP32_V(0,0x5fffff,0x7d)/*7/16-*/,
                              FP32_V(0,0x778000,0x85)/*123.75[DOWN]*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_V(0,0x44000,0x88)/*529.0*/,
                              FP32_V(0,0x0,0x87)/*256.0*/,
                              FP32_V(0,0x440000,0x7c)/*(7/16)^2*/,
                              FP32_V(0,0x6f4840,0x8c)/*123.75^2*/,
                              FP32_V(0,0x40000,0x88)/*528.0*/,
                              FP32_V(0,0x8000,0x87)/*257.0*/,
                              FP32_V(0,0x43ffff,0x7c)/*(7/16)^2-epsilon*/,
                              FP32_V(0,0x6f4841,0x8c)/*123.75^2+epsilon*/ } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0,0x380000,0x83)/*23.0*/,
                              FP32_V(0,0x0,0x83)/*16.0*/,
                              FP32_V(0,0x600000,0x7d)/*7/16*/,
                              FP32_V(0,0x778000,0x85)/*123.75*/,
                              FP32_V(0,0x37d376,0x83)/*sqrt(528)[UP]*/,
                              FP32_V(0,0x3ff1,0x83)/*sqrt(257)[UP]*/,
                              FP32_V(0,0x600000,0x7d)/*7/16[UP]*/,
                              FP32_V(0,0x778001,0x85)/*123.75+*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_V(0,0x44000,0x88)/*529.0*/,
                              FP32_V(0,0x0,0x87)/*256.0*/,
                              FP32_V(0,0x440000,0x7c)/*(7/16)^2*/,
                              FP32_V(0,0x6f4840,0x8c)/*123.75^2*/,
                              FP32_V(0,0x40000,0x88)/*528.0*/,
                              FP32_V(0,0x8000,0x87)/*257.0*/,
                              FP32_V(0,0x43ffff,0x7c)/*(7/16)^2-epsilon*/,
                              FP32_V(0,0x6f4841,0x8c)/*123.75^2+epsilon*/ } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0,0x380000,0x83)/*23.0*/,
                              FP32_V(0,0x0,0x83)/*16.0*/,
                              FP32_V(0,0x600000,0x7d)/*7/16*/,
                              FP32_V(0,0x778000,0x85)/*123.75*/,
                              FP32_V(0,0x37d375,0x83)/*sqrt(528)*/,
                              FP32_V(0,0x3ff0,0x83)/*sqrt(257)*/,
                              FP32_V(0,0x5fffff,0x7d)/*7/16-*/,
                              FP32_V(0,0x778000,0x85)/*123.75[ZERO=DOWN]*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_NORM_MAX(0),
                              FP32_NORM_MIN(0),
                              FP32_NORM_SAFE_INT_MAX(0),
                              FP32_NORM_MIN(0),
                              FP32_NORM_MAX(1),
                              FP32_NORM_MIN(1),
                              FP32_NORM_SAFE_INT_MAX(1),
                              FP32_NORM_MIN(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0,0x7fffff,0xbe)/*sqrt(FP32_NORM_MAX)*/,
                              FP32_V(0,0x0,0x40)/*sqrt(FP32_NORM_MIN)*/,
                              FP32_V(0,0x7fffff,0x8a)/*sqrt(FP32_NORM_SAFE_INT_MAX)*/,
                              FP32_V(0,0x0,0x40)/*sqrt(FP32_NORM_MIN)*/,
                              FP32_QNAN(1),
                              FP32_QNAN(1),
                              FP32_QNAN(1),
                              FP32_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_PE | X86_MXCSR_IE | BS3_MXCSR_PE_FUZZY /* IEM */ },
    /** @todo More Normals. */
   /*
    * Denormals.
    */
    /*16*/{ { /*src1     */ { FP32_DENORM_MAX(0),      FP32_DENORM_MAX(0),      FP32_0(0), FP32_0(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0,0x7fffff,0x3f), FP32_V(0,0x7fffff,0x3f), FP32_0(0), FP32_0(1), FP32_QNAN(1),       FP32_QNAN(1),       FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_IE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src1     */ { FP32_DENORM_MIN(0),      FP32_DENORM_MIN(0),      FP32_0(0), FP32_0(1), FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0,0x3504f3,0x34), FP32_V(0,0x3504f3,0x34), FP32_0(0), FP32_0(1), FP32_QNAN(1),       FP32_QNAN(1),       FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_IE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src1     */ { FP32_DENORM_MIN(0),      FP32_DENORM_MAX(0),      FP32_0(0), FP32_0(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0,0x3504f3+1,0x34), FP32_V(0,0x7fffff,0x3f), FP32_0(0), FP32_0(1), FP32_QNAN(1),     FP32_QNAN(1),       FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_IE | X86_MXCSR_PE | X86_MXCSR_RC_UP | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src1     */ { FP32_DENORM_MIN(0),      FP32_DENORM_MAX(0),      FP32_0(0), FP32_0(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0,0x3504f3,0x34), FP32_V(0,0x7fffff-1,0x3f), FP32_0(0), FP32_0(1), FP32_QNAN(1),     FP32_QNAN(1),       FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_IE | X86_MXCSR_PE | X86_MXCSR_RC_DOWN | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src1     */ { FP32_DENORM_MIN(0),      FP32_DENORM_MAX(0),      FP32_0(0), FP32_0(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0,0x3504f3,0x34), FP32_V(0,0x7fffff-1,0x3f), FP32_0(0), FP32_0(1), FP32_QNAN(1),     FP32_QNAN(1),       FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_IE | X86_MXCSR_PE | X86_MXCSR_RC_ZERO | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src1     */ { FP32_DENORM_MIN(0),      FP32_DENORM_MAX(0),      FP32_0(0), FP32_0(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_V(0,0x3504f3,0x34), FP32_V(0,0x7fffff,0x3f), FP32_0(0), FP32_0(1), FP32_QNAN(1),       FP32_QNAN(1),       FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_IE | X86_MXCSR_PE | X86_MXCSR_FZ | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src1     */ { FP32_DENORM_MIN(0),      FP32_DENORM_MAX(0),      FP32_0(0), FP32_0(1), FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),               FP32_0(0),               FP32_0(0), FP32_0(1), FP32_0(1),          FP32_0(1),          FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
    /** @todo More Denormals. */
    /*
     * Invalids.
     */
    /** @todo Invalids. */
    /*23*/ /* FP32_TABLE_D10_PS_INVALIDS */
    /** @todo Underflow; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(sqrtps_XMM1_XMM2),   255, RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(sqrtps_XMM1_FSxBX),  255, RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vsqrtps_XMM1_XMM2),  255, RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsqrtps_XMM1_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vsqrtps_YMM1_YMM2),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsqrtps_YMM1_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(sqrtps_XMM8_XMM9),   255, RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(sqrtps_XMM8_FSxBX),  255, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vsqrtps_XMM8_XMM9),  255, RM_REG, T_AVX_128, XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsqrtps_XMM8_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsqrtps_YMM8_YMM9),  255, RM_REG, T_AVX_256, YMM8, YMM8, YMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsqrtps_YMM8_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(sqrtps_XMM1_XMM1),   255, RM_REG, T_SSE,     XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(sqrtps_XMM8_XMM8),   255, RM_REG, T_SSE,     XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsqrtps_XMM1_XMM1),  255, RM_REG, T_AVX_128, XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsqrtps_YMM1_YMM1),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsqrtps_YMM8_YMM8),  255, RM_REG, T_AVX_256, YMM8, YMM8, YMM8,  PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]SQRTPD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_sqrtpd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0), FP64_0(0), FP64_0(1), FP64_0(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_0(0), FP64_0(1), FP64_0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(0), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0(1), FP64_0(1), FP64_0(0), FP64_0(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1), FP64_0(1), FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1), FP64_0(0), FP64_0(0), FP64_0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 4*/{ { /*src1     */ { FP64_INF(0), FP64_0(0), FP64_INF(1),  FP64_0(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_INF(0), FP64_0(0), FP64_QNAN(1), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
    /*
     * Precision (Overflow, Underflow not possible).
     */
    /* 5*/{ { /*src1     */ { FP64_0(0), FP64_1(0), FP64_0(1), FP64_2(0)                                  } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_1(0), FP64_0(1), FP64_V(0,0x6a09e667f3bcd,0x3ff)/*sqrt(2)*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src1     */ { FP64_0(0), FP64_1(0), FP64_0(1), FP64_2(0)                                   } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_1(0), FP64_0(1), FP64_V(0,0x6a09e667f3bcc,0x3ff)/*sqrt(2)v*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE },
          { { /*src1     */ { FP64_0(0), FP64_1(0), FP64_0(1), FP64_2(0)                                  } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_1(0), FP64_0(1), FP64_V(0,0x6a09e667f3bcd,0x3ff)/*sqrt(2)*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE },
          { { /*src1     */ { FP64_0(0), FP64_1(0), FP64_0(1), FP64_2(0)                                   } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_1(0), FP64_0(1), FP64_V(0,0x6a09e667f3bcc,0x3ff)/*sqrt(2)v*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
          { { /*src1     */ { FP64_0(0), FP64_1(0), FP64_0(1), FP64_2(0)                                  } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_1(0), FP64_0(1), FP64_V(0,0x6a09e667f3bcd,0x3ff)/*sqrt(2)*/ } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_PE },
    /*
     * Normals.
     */
    /*10*/{ { /*src1     */ { FP64_NORM_V0(0), FP64_NORM_V1(0), FP64_NORM_V2(0), FP64_NORM_V3(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_V(0,0x4b4cf5d7baa8f,0x200)/*sqrt(FP64_NORM_V0)*/,
                              FP64_V(0,0x64b5ec5f93a20,0x516)/*sqrt(FP64_NORM_V1)*/,
                              FP64_V(0,0x568cddb7b5f47,0x5fe)/*sqrt(FP64_NORM_V2)*/,
                              FP64_V(0,0x4ebe86dd38102,0x440)/*sqrt(FP64_NORM_V3)*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src1     */ { FP64_V(0,0xf46c4c48b9b90,0x42f)/*23456789^2*/,
                              FP64_V(0,0x153e1f1867880,0x408)/*(12345678/524288)^2*/,
                              FP64_V(0,0xf46c4c48b9ba0,0x42f)/*23456789^2+1*/,
                              FP64_V(0,0x153e1f186787f,0x408)/*(12345678/524288)^2-epsilon*/ } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_V(0,0x65ec150000000,0x417)/*23456789*/,
                              FP64_V(0,0x78c29c0000000,0x403)/*12345678/524288*/,
                              FP64_V(0,0x65ec150000006,0x417)/*23456789+*/,
                              FP64_V(0,0x78c29bfffffff,0x403)/*12345678/524288-*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /*src1     */ { FP64_V(0,0xf46c4c48b9b90,0x42f)/*23456789^2*/,
                              FP64_V(0,0x153e1f1867880,0x408)/*(12345678/524288)^2*/,
                              FP64_V(0,0xf46c4c48b9ba0,0x42f)/*23456789^2+1*/,
                              FP64_V(0,0x153e1f186787f,0x408)/*(12345678/524288)^2-epsilon*/ } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_V(0,0x65ec150000000,0x417)/*23456789*/,
                              FP64_V(0,0x78c29c0000000,0x403)/*12345678/524288*/,
                              FP64_V(0,0x65ec150000005,0x417)/*23456789+[DOWN]*/,
                              FP64_V(0,0x78c29bfffffff,0x403)/*12345678/524288-*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_V(0,0xf46c4c48b9b90,0x42f)/*23456789^2*/,
                              FP64_V(0,0x153e1f1867880,0x408)/*(12345678/524288)^2*/,
                              FP64_V(0,0xf46c4c48b9ba0,0x42f)/*23456789^2+1*/,
                              FP64_V(0,0x153e1f186787f,0x408)/*(12345678/524288)^2-epsilon*/ } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_V(0,0x65ec150000000,0x417)/*23456789*/,
                              FP64_V(0,0x78c29c0000000,0x403)/*12345678/524288*/,
                              FP64_V(0,0x65ec150000006,0x417)/*23456789+*/,
                              FP64_V(0,0x78c29c0000000,0x403)/*12345678/524288[UP]*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_V(0,0xf46c4c48b9b90,0x42f)/*23456789^2*/,
                              FP64_V(0,0x153e1f1867880,0x408)/*(12345678/524288)^2*/,
                              FP64_V(0,0xf46c4c48b9ba0,0x42f)/*23456789^2+1*/,
                              FP64_V(0,0x153e1f186787f,0x408)/*(12345678/524288)^2-epsilon*/ } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_V(0,0x65ec150000000,0x417)/*23456789*/,
                              FP64_V(0,0x78c29c0000000,0x403)/*12345678/524288*/,
                              FP64_V(0,0x65ec150000005,0x417)/*23456789+[ZERO]*/,
                              FP64_V(0,0x78c29bfffffff,0x403)/*12345678/524288-*/ } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_NORM_MAX(0),
                              FP64_NORM_MIN(0),
                              FP64_NORM_MAX(1),
                              FP64_NORM_MIN(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_V(0,0xfffffffffffff,0x5fe)/*sqrt(FP64_NORM_MAX)*/,
                              FP64_V(0,0x0,0x200)/*sqrt(FP64_NORM_MIN)*/,
                              FP64_QNAN(1),
                              FP64_QNAN(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_PE | X86_MXCSR_IE | BS3_MXCSR_PE_FUZZY /* IEM */ },
    /** @todo More Normals. */
   /*
    * Denormals.
    */
    /*16*/{ { /*src1     */ { FP64_DENORM_MAX(0),              FP64_0(0), FP64_0(1), FP64_DENORM_MAX(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_V(0,0xfffffffffffff,0x1ff), FP64_0(0), FP64_0(1), FP64_QNAN(1)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_IE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src1     */ { FP64_DENORM_MIN(0),  FP64_0(0), FP64_0(1), FP64_DENORM_MIN(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_V(0,0x0,0x1e6), FP64_0(0), FP64_0(1), FP64_QNAN(1)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_IE },
          { { /*src1     */ { FP64_DENORM_MIN(0),  FP64_DENORM_MAX(0),              FP64_DENORM_MIN(1), FP64_DENORM_MAX(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_V(0,0x0,0x1e6), FP64_V(0,0xfffffffffffff,0x1ff), FP64_QNAN(1),       FP64_QNAN(1)       } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_IE | X86_MXCSR_PE | X86_MXCSR_RC_UP | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src1     */ { FP64_DENORM_MIN(0),  FP64_DENORM_MAX(0),              FP64_DENORM_MIN(1), FP64_DENORM_MAX(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_V(0,0x0,0x1e6), FP64_V(0,0xffffffffffffe,0x1ff), FP64_QNAN(1),       FP64_QNAN(1)       } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_IE | X86_MXCSR_PE | X86_MXCSR_RC_DOWN | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src1     */ { FP64_DENORM_MIN(0),  FP64_DENORM_MAX(0),              FP64_DENORM_MIN(1), FP64_DENORM_MAX(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_V(0,0x0,0x1e6), FP64_V(0,0xffffffffffffe,0x1ff), FP64_QNAN(1),       FP64_QNAN(1)       } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_IE | X86_MXCSR_PE | X86_MXCSR_RC_ZERO | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src1     */ { FP64_DENORM_MIN(0),  FP64_DENORM_MAX(0),              FP64_DENORM_MIN(1), FP64_DENORM_MAX(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_V(0,0x0,0x1e6), FP64_V(0,0xfffffffffffff,0x1ff), FP64_QNAN(1),       FP64_QNAN(1)       } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_IE | X86_MXCSR_PE | X86_MXCSR_FZ | BS3_MXCSR_PE_FUZZY /* IEM */ },
          { { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(0), FP64_DENORM_MIN(1), FP64_DENORM_MAX(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),          FP64_0(0),          FP64_0(1),          FP64_0(1)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
    /** @todo More Denormals. */
    /*
     * Invalids.
     */
    /** @todo Invalids. */
    /*23*/ /* FP64_TABLE_D10_PD_INVALIDS */
    /** @todo Underflow; Rounding; FZ etc. */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(sqrtpd_XMM1_XMM2),   255, RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(sqrtpd_XMM1_FSxBX),  255, RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vsqrtpd_XMM1_XMM2),  255, RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsqrtpd_XMM1_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vsqrtpd_YMM1_YMM2),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsqrtpd_YMM1_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(sqrtpd_XMM8_XMM9),   255, RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(sqrtpd_XMM8_FSxBX),  255, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vsqrtpd_XMM8_XMM9),  255, RM_REG, T_AVX_128, XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsqrtpd_XMM8_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsqrtpd_YMM8_YMM9),  255, RM_REG, T_AVX_256, YMM8, YMM8, YMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsqrtpd_YMM8_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(sqrtpd_XMM1_XMM1),   255, RM_REG, T_SSE,     XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(sqrtpd_XMM8_XMM8),   255, RM_REG, T_SSE,     XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsqrtpd_XMM1_XMM1),  255, RM_REG, T_AVX_128, XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vsqrtpd_YMM1_YMM1),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vsqrtpd_YMM8_YMM8),  255, RM_REG, T_AVX_256, YMM8, YMM8, YMM8,  PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]SQRTSS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_sqrtss(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0),       FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_0(0),       FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),       FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V3(1), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_0(1),       FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),       FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V5(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_0(1),       FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),       FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_SNAN(0),    FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(1),       FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),       FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_QNAN(1),    FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(1),       FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(0),       FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V0(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),       FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 6*/{ { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_INF(0),     FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_2(1),       FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0),     FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(0),     FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_SNAN(0),    FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_INF(0),     FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_QNAN(1),    FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_QNAN(1),    FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_IE | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_QNAN(0),    FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_QNAN(1),    FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_IE | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V4(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_QNAN(1),    FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_IE | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /*
     * Normals & Precision (Overflow, Underflow not possible).
     */
    /*14*/{ { /*src1     */ { FP32_NORM_V0(0),                               FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_NORM_V4(0),                               FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0,0x1ccf5c,0x40)/*sqrt(FP32_NORM_V0)*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_V2(0),                               FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_1(1),                                     FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0,0x3455c7,0x7e)/*sqrt(FP32_NORM_V2)*/, FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_V3(0),                               FP32_0_x7(0)    } },
            { /*src2     */ { FP32_NORM_MIN(0),                              FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0,0x27905f,0xbe)/*sqrt(FP32_NORM_V3)*/, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_MAX(0),                               FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_NORM_MAX(1),                               FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_V(0,0x7fffff,0xbe)/*sqrt(FP32_NORM_MAX)*/, FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_MIN(0),                          FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_INF(1),                               FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(0,0x0,0x40)/*sqrt(FP32_NORM_MIN)*/, FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0),                               FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V1(1),                                         FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_V(0,0x7fffff,0x8a)/*sqrt(FP32_NORM_SAFE_INT_MAX)*/, FP32_RAND_x7_V5 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_MIN(0),                          FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V0(0),                           FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_V(0,0x0,0x40)/*sqrt(FP32_NORM_MIN)*/, FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x0,0x87)/*256.0*/, FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_2(0),                   FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_V(0,0x0,0x83)/*16.0*/,  FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x0,0x87)/*256.0*/, FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_DENORM_V3(0),           FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_V(0,0x0,0x83)/*16.0*/,  FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x40000,0x88)/*528.0*/,      FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_NORM_SAFE_INT_MAX(1),            FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_V(0,0x37d375,0x83)/*sqrt(528)*/, FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x40000,0x88)/*528.0*/,          FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_NORM_V7(0),                          FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_V(0,0x37d376,0x83)/*sqrt(528)[UP]*/, FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x43ffff,0x7c)/*(7/16)^2-epsilon*/, FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_0(0),                                   FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_V(0,0x5fffff,0x7d)/*7/16-*/,            FP32_RAND_x7_V6 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x43ffff,0x7c)/*(7/16)^2-epsilon*/, FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_SNAN_V0(1),                             FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_V(0,0x600000,0x7d)/*7/16[UP]*/,         FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x440000,0x7c)/*(7/16)^2*/, FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_DENORM_MIN(1),                  FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0,0x600000,0x7d)/*7/16*/,     FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x44000,0x88)/*529.0*/, FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V7(0),                 FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0,0x380000,0x83)/*23.0*/, FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x6f4840,0x8c)/*123.75^2*/, FP32_0_x7(1)    } },
            { /*src2     */ { FP32_SNAN_V4(1),                     FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0,0x778000,0x85)/*123.75*/,   FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x6f4841,0x8c)/*123.75^2+epsilon*/,  FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_QNAN_V2(0),                              FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0,0x778000,0x85)/*123.75[ZERO=DOWN]*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x6f4841,0x8c)/*123.75^2+epsilon*/, FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_QNAN_V6(1),                             FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0,0x778001,0x85)/*123.75+*/,          FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x8000,0x87)/*257.0*/,     FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_DENORM_V5(1),                  FP32_0_x7(0)    } },
            { /* =>      */ { FP32_V(0,0x3ff0,0x83)/*sqrt(257)*/, FP32_0_x7(0)    } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_DAZ | X86_MXCSR_RC_NEAREST,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x8000,0x87)/*257.0*/,         FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_NORM_V0(0),                        FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_V(0,0x3ff1,0x83)/*sqrt(257)[UP]*/, FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(1,0x8000,0x87)/*-257.0*/, FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_NORM_V3(0),                 FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_QNAN(1),                    FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*35*/{ { /*src1     */ { FP32_DENORM_MAX(0),      FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_NORM_V5(0),         FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_V(0,0x7fffff,0x3f), FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MAX(0),      FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_DENORM_MIN(1),      FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0,0x7ffffe,0x3f), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MIN(0),      FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V1(0),         FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_V(0,0x3504f3,0x34), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MIN(0),      FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_NORM_V6(1),         FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_V(0,0x3504f4,0x34), FP32_RAND_x7_V5 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V1(0),       FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_NORM_V1(0),         FP32_0_x7(1)    } },
            { /* =>      */ { FP32_V(0,0x6f887c,0x3f), FP32_0_x7(1)    } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V4(0),       FP32_0_x7(0)    } },
            { /*src2     */ { FP32_RAND_V4(1),         FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_V(0,0x393731,0x3e), FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V5(0),       FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_SNAN_V7(1),         FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_V(0,0x34ff4b,0x3a), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V2(0),       FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_NORM_V3(0),         FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_0(0),               FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V3(1),       FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_QNAN_V4(0),         FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(1),               FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /** @todo Invalids. */
    /*44*/ /* FP64_TABLE_D10_SS_INVALIDS */
    };

    /* Sanity-check subset for 'same register' instruction variants */
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValuesSR[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0), FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_0(0), FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_0(0), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1), FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_0(1), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_0(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 2*/{ { /*src1     */ { FP32_INF(0), FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_INF(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),  FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_INF(1),  FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision (Overflow, Underflow not possible).
     */
    /* 4*/{ { /*src1     */ { FP32_NORM_V0(0),                               FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_NORM_V0(0),                               FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0,0x1ccf5c,0x40)/*sqrt(FP32_NORM_V0)*/, FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_MIN(0),                          FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_NORM_MIN(0),                          FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_V(0,0x0,0x40)/*sqrt(FP32_NORM_MIN)*/, FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x43ffff,0x7c)/*(7/16)^2-epsilon*/, FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_V(0,0x43ffff,0x7c)/*(7/16)^2-epsilon*/, FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_V(0,0x5fffff,0x7d)/*7/16-*/,            FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_V(0,0x43ffff,0x7c)/*(7/16)^2-epsilon*/, FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_V(0,0x43ffff,0x7c)/*(7/16)^2-epsilon*/, FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_V(0,0x600000,0x7d)/*7/16[UP]*/,         FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /* 8*/{ { /*src1     */ { FP32_DENORM_MAX(0),      FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_DENORM_MAX(0),      FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_V(0,0x7fffff,0x3f), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_MIN(0),      FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_DENORM_MIN(1),      FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_V(0,0x3504f3,0x34), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_DENORM_V3(1),       FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_DENORM_V3(1),       FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_0(1),               FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /** @todo Invalids. */
    /*11*/ /* FP64_TABLE_D10_SS_INVALIDS // or excerpt? */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(sqrtss_XMM1_XMM2),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(sqrtss_XMM1_FSxBX),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(sqrtss_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(sqrtss_XMM8_FSxBX),       255,         RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vsqrtss_XMM1_XMM2_XMM3),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vsqrtss_XMM1_XMM2_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(vsqrtss_XMM8_XMM9_XMM10), X86_XCPT_AC, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vsqrtss_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(sqrtss_XMM1_XMM1),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(sqrtss_XMM8_XMM8),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vsqrtss_XMM1_XMM1_XMM1),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vsqrtss_XMM1_XMM1_XMM2),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vsqrtss_XMM1_XMM2_XMM2),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM1, XMM2, XMM2,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vsqrtss_XMM8_XMM8_XMM8),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vsqrtss_XMM1_XMM1_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues)   },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]SQRTSD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_sqrtsd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0),       FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_RAND_V2(0), FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_0(0),       FP64_RAND_x3_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_0(1),       FP64_RAND_x3_V0 } },
            { /*src2     */ { FP64_RAND_V3(1), FP64_RAND_x3_V1 } },
            { /* =>      */ { FP64_0(1),       FP64_RAND_x3_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_0(1),       FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_RAND_V1(0), FP64_RAND_x3_V1 } },
            { /* =>      */ { FP64_0(1),       FP64_RAND_x3_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_0(1),       FP64_RAND_x3_V0 } },
            { /*src2     */ { FP64_SNAN(0),    FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_0(1),       FP64_RAND_x3_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_0(0),       FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_QNAN(1),    FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_0(0),       FP64_RAND_x3_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_0(0),       FP64_RAND_x3_V1 } },
            { /*src2     */ { FP64_RAND_V0(1), FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_0(0),       FP64_RAND_x3_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 6*/{ { /*src1     */ { FP64_INF(0),     FP64_RAND_x3_V1 } },
            { /*src2     */ { FP64_RAND_V2(0), FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_INF(0),     FP64_RAND_x3_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_INF(0),     FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_2(1),       FP64_RAND_x3_V1 } },
            { /* =>      */ { FP64_INF(0),     FP64_RAND_x3_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_INF(0),     FP64_RAND_x3_V1 } },
            { /*src2     */ { FP64_RAND_V2(0), FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_INF(0),     FP64_RAND_x3_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_INF(0),     FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_SNAN(0),    FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_INF(0),     FP64_RAND_x3_V0 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_INF(1),     FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_RAND_V2(0), FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_QNAN(1),    FP64_RAND_x3_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_INF(1),     FP64_RAND_x3_V1 } },
            { /*src2     */ { FP64_RAND_V2(0), FP64_RAND_x3_V1 } },
            { /* =>      */ { FP64_QNAN(1),    FP64_RAND_x3_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_IE | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_INF(1),     FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_QNAN(0),    FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_QNAN(1),    FP64_RAND_x3_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_IE | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_INF(1),     FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_RAND_V0(0), FP64_RAND_x3_V1 } },
            { /* =>      */ { FP64_QNAN(1),    FP64_RAND_x3_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_IE | X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /*
     * Normals & Precision (Overflow, Underflow not possible).
     */
    /*14*/{ { /*src1     */ { FP64_NORM_V0(0),                                       FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_NORM_V0(0),                                       FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_V(0,0x4b4cf5d7baa8f,0x200)/*sqrt(FP64_NORM_V0)*/, FP64_RAND_x3_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_V2(0),                                       FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_1(1),                                             FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_V(0,0x568cddb7b5f47,0x5fe)/*sqrt(FP64_NORM_V2)*/, FP64_RAND_x3_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_V3(0),                                       FP64_0_x3(0)    } },
            { /*src2     */ { FP64_NORM_MIN(0),                                      FP64_RAND_x3_V1 } },
            { /* =>      */ { FP64_V(0,0x4ebe86dd38102,0x440)/*sqrt(FP64_NORM_V3)*/, FP64_RAND_x3_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MAX(0),                                       FP64_RAND_x3_V0 } },
            { /*src2     */ { FP64_NORM_MAX(1),                                       FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_V(0,0xfffffffffffff,0x5fe)/*sqrt(FP64_NORM_MAX)*/, FP64_RAND_x3_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MIN(0),                           FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_INF(1),                                FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_V(0,0x0,0x200)/*sqrt(FP64_NORM_MIN)*/, FP64_RAND_x3_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_SAFE_INT_MAX(0),                                       FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_RAND_V1(1),                                                 FP64_RAND_x3_V1 } },
            { /* =>      */ { FP64_V(0,0x6a09e667f3bcc,0x419)/*sqrt(FP64_NORM_SAFE_INT_MAX)*/, FP64_RAND_x3_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MIN(0),                           FP64_RAND_x3_V1 } },
            { /*src2     */ { FP64_RAND_V0(0),                            FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_V(0,0x0,0x200)/*sqrt(FP64_NORM_MIN)*/, FP64_RAND_x3_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0x0,0x403)/*256.0*/, FP64_RAND_x3_V0 } },
            { /*src2     */ { FP64_2(0),                    FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_V(0,0x0,0x401)/*16.0*/,  FP64_RAND_x3_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0x0,0x403)/*256.0*/, FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_DENORM_V3(0),            FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_V(0,0x0,0x401)/*16.0*/,  FP64_RAND_x3_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0x800000000000,0x408)/*528.0*/,      FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_NORM_SAFE_INT_MAX(1),                    FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_V(0,0x6fa6ea162d0f0,0x403)/*sqrt(528)*/, FP64_RAND_x3_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0x800000000000,0x408)/*528.0*/,          FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_NORM_V3(0),                                  FP64_RAND_x3_V1 } },
            { /* =>      */ { FP64_V(0,0x6fa6ea162d0f1,0x403)/*sqrt(528)[UP]*/, FP64_RAND_x3_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0x87fffffffffff,0x3fc)/*(7/16)^2-epsilon*/, FP64_RAND_x3_V0 } },
            { /*src2     */ { FP64_0(0),                                           FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_V(0,0xbffffffffffff,0x3fd)/*7/16-*/,            FP64_RAND_x3_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0x87fffffffffff,0x3fc)/*(7/16)^2-epsilon*/, FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_SNAN_V0(1),                                     FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_V(0,0xc000000000000,0x3fd)/*7/16[UP]*/,         FP64_RAND_x3_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0x8800000000000,0x3fc)/*(7/16)^2*/, FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_DENORM_MIN(1),                          FP64_RAND_x3_V1 } },
            { /* =>      */ { FP64_V(0,0xc000000000000,0x3fd)/*7/16*/,     FP64_RAND_x3_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0x880000000000,0x408)/*529.0*/, FP64_RAND_x3_V1 } },
            { /*src2     */ { FP64_RAND_V3(0),                         FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_V(0,0x7000000000000,0x403)/*23.0*/, FP64_RAND_x3_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0xde90800000000,0x40c)/*123.75^2*/, FP64_0_x3(1)    } },
            { /*src2     */ { FP64_SNAN_V0(1),                             FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_V(0,0xef00000000000,0x405)/*123.75*/,   FP64_RAND_x3_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0xde90800000001,0x40c)/*123.75^2+epsilon*/,  FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_QNAN_V2(0),                                      FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_V(0,0xef00000000000,0x405)/*123.75[ZERO=DOWN]*/, FP64_RAND_x3_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0xde90800000001,0x40c)/*123.75^2+epsilon*/, FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_QNAN_V2(1),                                     FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_V(0,0xef00000000001,0x405)/*123.75+*/,          FP64_RAND_x3_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0x100000000000,0x407)/*257.0*/,    FP64_RAND_x3_V1 } },
            { /*src2     */ { FP64_DENORM_V1(1),                          FP64_0_x3(0)    } },
            { /* =>      */ { FP64_V(0,0x7fe00ff6070,0x403)/*sqrt(257)*/, FP64_0_x3(0)    } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_DAZ | X86_MXCSR_RC_NEAREST,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0x100000000000,0x407)/*257.0*/,          FP64_RAND_x3_V0 } },
            { /*src2     */ { FP64_NORM_V0(0),                                  FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_V(0,0x7fe00ff606f,0x403)/*sqrt(257)[DOWN]*/, FP64_RAND_x3_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(1,0x100000000000,0x407)/*-257.0*/, FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_NORM_V3(0),                          FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_QNAN(1),                             FP64_RAND_x3_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*35*/{ { /*src1     */ { FP64_DENORM_MAX(0),              FP64_RAND_x3_V1 } },
            { /*src2     */ { FP64_NORM_V1(0),                 FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_V(0,0xfffffffffffff,0x1ff), FP64_RAND_x3_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MAX(0),              FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_DENORM_MIN(1),              FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_V(0,0xffffffffffffe,0x1ff), FP64_RAND_x3_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MIN(0),  FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_RAND_V1(0),     FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_V(0,0x0,0x1e6), FP64_RAND_x3_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_V1(0),               FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_NORM_V1(0),                 FP64_0_x3(1)    } },
            { /* =>      */ { FP64_V(0,0xf268ffb4eca58,0x1fe), FP64_0_x3(1)    } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_V0(0),              FP64_0_x3(0)    } },
            { /*src2     */ { FP64_RAND_V0(1),                FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_V(0,0x560f6572dd65,0x1fe), FP64_RAND_x3_V0 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_V3(0),               FP64_0_x3(0)    } },
            { /*src2     */ { FP64_RAND_V0(1),                 FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_V(0,0xc12a581683cac,0x1f0), FP64_RAND_x3_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_V3(0),               FP64_0_x3(0)    } },
            { /*src2     */ { FP64_RAND_V0(1),                 FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_V(0,0xc12a581683cad,0x1f0), FP64_RAND_x3_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_V2(0),       FP64_RAND_x3_V1 } },
            { /*src2     */ { FP64_NORM_V3(0),         FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_0(0),               FP64_RAND_x3_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_V3(1),       FP64_RAND_x3_V0 } },
            { /*src2     */ { FP64_QNAN_V0(0),         FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_0(1),               FP64_RAND_x3_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /** @todo Invalids. */
    /*44*/ /* FP64_TABLE_D10_SD_INVALIDS */
    };

    /* Sanity-check subset for 'same register' instruction variants */
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValuesSR[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0), FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_0(0), FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_0(0), FP64_RAND_x3_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_0(1), FP64_RAND_x3_V0 } },
            { /*src2     */ { FP64_0(1), FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_0(1), FP64_RAND_x3_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 2*/{ { /*src1     */ { FP64_INF(0), FP64_RAND_x3_V1 } },
            { /*src2     */ { FP64_INF(0), FP64_RAND_x3_V1 } },
            { /* =>      */ { FP64_INF(0), FP64_RAND_x3_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_INF(1),  FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_INF(1),  FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_QNAN(1), FP64_RAND_x3_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision (Overflow, Underflow not possible).
     */
    /* 4*/{ { /*src1     */ { FP64_NORM_V0(0),                                       FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_NORM_V0(0),                                       FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_V(0,0x4b4cf5d7baa8f,0x200)/*sqrt(FP64_NORM_V0)*/, FP64_RAND_x3_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MIN(0),                           FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_NORM_MIN(0),                           FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_V(0,0x0,0x200)/*sqrt(FP64_NORM_MIN)*/, FP64_RAND_x3_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0x87fffffffffff,0x3fc)/*(7/16)^2-epsilon*/, FP64_RAND_x3_V0 } },
            { /*src2     */ { FP64_V(0,0x87fffffffffff,0x3fc)/*(7/16)^2-epsilon*/, FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_V(0,0xbffffffffffff,0x3fd)/*7/16-*/,            FP64_RAND_x3_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_V(0,0x8800000000000,0x3fc)/*(7/16)^2*/, FP64_RAND_x3_V2 } },
            { /*src2     */ { FP64_V(0,0x8800000000000,0x3fc)/*(7/16)^2*/, FP64_RAND_x3_V2 } },
            { /* =>      */ { FP64_V(0,0xc000000000000,0x3fd)/*7/16*/,     FP64_RAND_x3_V2 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /* 8*/{ { /*src1     */ { FP64_DENORM_MAX(0),              FP64_RAND_x3_V1 } },
            { /*src2     */ { FP64_DENORM_MAX(0),              FP64_RAND_x3_V1 } },
            { /* =>      */ { FP64_V(0,0xfffffffffffff,0x1ff), FP64_RAND_x3_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MIN(0),  FP64_RAND_x3_V3 } },
            { /*src2     */ { FP64_DENORM_MIN(1),  FP64_RAND_x3_V3 } },
            { /* =>      */ { FP64_V(0,0x0,0x1e6), FP64_RAND_x3_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_V3(1),       FP64_RAND_x3_V0 } },
            { /*src2     */ { FP64_DENORM_V3(1),       FP64_RAND_x3_V0 } },
            { /* =>      */ { FP64_0(1),               FP64_RAND_x3_V0 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /** @todo Invalids. */
    /*11*/ /* FP64_TABLE_D10_SD_INVALIDS // or excerpt? */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(sqrtsd_XMM1_XMM2),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(sqrtsd_XMM1_FSxBX),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(sqrtsd_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(sqrtsd_XMM8_FSxBX),       255,         RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vsqrtsd_XMM1_XMM2_XMM3),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vsqrtsd_XMM1_XMM2_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(vsqrtsd_XMM8_XMM9_XMM10), X86_XCPT_AC, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vsqrtsd_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(sqrtsd_XMM1_XMM1),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(sqrtsd_XMM8_XMM8),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vsqrtsd_XMM1_XMM1_XMM1),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vsqrtsd_XMM1_XMM1_XMM2),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vsqrtsd_XMM1_XMM2_XMM2),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM1, XMM2, XMM2,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vsqrtsd_XMM8_XMM8_XMM8),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vsqrtsd_XMM1_XMM1_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues)   },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * [V]RSQRTPS.
 */
/** @todo this fails entirely under IEM: the instructions rcpps, rcpss, rsqrtps, rsqrtss are all implemented with too much precision & attention to exceptions! */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_rsqrtps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
/** @todo move these up with the rest of the value defines */
#define FP32_RSQRT_1_0        FP32_V(0, 0x7ff000, 0x7e) /* 1/sqrt(1) != 1, yay Intel */
#define FP32_RSQRT_2_0        FP32_V(0, 0x34f800, 0x7e) /* 1/sqrt(2) */
#define FP32_RSQRT_NORM_V0    FP32_V(0, 0x510000, 0xbd) /* 1/sqrt(NORM_V0) */
#define FP32_RSQRT_NORM_V1    FP32_V(0, 0x419800, 0x66) /* 1/sqrt(NORM_V1) */
#define FP32_RSQRT_NORM_V2    FP32_V(0, 0x35b800, 0x7f) /* 1/sqrt(NORM_V2) */
#define FP32_RSQRT_NORM_V3    FP32_V(0, 0x439000, 0x3f) /* 1/sqrt(NORM_V3) */
#define FP32_RSQRT_NORM_V4    FP32_V(0, 0x22e800, 0x60) /* 1/sqrt(NORM_V4) */
#define FP32_RSQRT_NORM_V5    FP32_V(0, 0x7ed000, 0x55) /* 1/sqrt(NORM_V5) */
#define FP32_RSQRT_NORM_V6    FP32_V(0, 0x191000, 0xa0) /* 1/sqrt(NORM_V6) */
#define FP32_RSQRT_NORM_V7    FP32_V(0, 0x350800, 0x95) /* 1/sqrt(NORM_V7) */
#define FP32_VAL_529_0        FP32_V(0, 0x044000, 0x88) /* 529.0 */
#define FP32_VAL_256_0        FP32_V(0, 0x000000, 0x87) /* 256.0 */
#define FP32_VAL_7q16sq       FP32_V(0, 0x440000, 0x7c) /* (7/16)^2 */
#define FP32_VAL_123_75sq     FP32_V(0, 0x6f4840, 0x8c) /* 123.75^2 */
#define FP32_VAL_528_0        FP32_V(0, 0x040000, 0x88) /* 528.0 */
#define FP32_VAL_257_0        FP32_V(0, 0x008000, 0x87) /* 257.0 */
#define FP32_VAL_7q16sq_d     FP32_V(0, 0x43ffff, 0x7c) /* (7/16)^2 - epsilon */
#define FP32_VAL_123_75sq_e   FP32_V(0, 0x6f4841, 0x8c) /* 123.75^2 + epsilon */
#define FP32_RSQRT_529_0      FP32_V(0, 0x320800, 0x7a) /* 1/23.0 */
#define FP32_RSQRT_256_0      FP32_V(0, 0x7ff000, 0x7a) /* 1/16.0 */
#define FP32_RSQRT_7q16sq     FP32_V(0, 0x124000, 0x80) /* 1/(7/16) */
#define FP32_RSQRT_123_75sq   FP32_V(0, 0x046000, 0x78) /* 1/123.75 */
#define FP32_RSQRT_528_0      FP32_V(0, 0x323800, 0x7a) /* 1/sqrt(528.0) */
#define FP32_RSQRT_257_0      FP32_V(0, 0x7f7000, 0x7a) /* 1/sqrt(257.0) */
#define FP32_RSQRT_7q16sq_d   FP32_V(0, 0x125000, 0x80) /* 1/(7/16[DOWN]) */
#define FP32_RSQRT_123_75sq_e FP32_V(0, 0x046000, 0x78) /* 1/(123.75[!UP]) */
#define FP32_RSQRT_NORM_MAX   FP32_V(0, 0x000800, 0x3f) /* 1/sqrt(NORM_MAX) */
#define FP32_RSQRT_NORM_MIN   FP32_V(0, 0x7ff000, 0xbd) /* 1/sqrt(NORM_MIN) */
#define FP32_RSQRT_NS_INT_MAX FP32_V(0, 0x000800, 0x73) /* 1/sqrt(NORM_SAFE_INT_MAX) */
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_0(1)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_0(1)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_0(1)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_0(1)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ | X86_MXCSR_RC_DOWN },
    /*
     * Infinity.
     */
    /* 4*/{ { /*src1     */ { FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_INF(1),  FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_QNAN(1), FP32_INF(0), FP32_INF(0), FP32_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Precision, Overflow, Underflow not possible.
     */
    /* 5*/{ { /*src1     */ { FP32_0(0),   FP32_1(0),      FP32_1(0),      FP32_0(1),   FP32_1(0),      FP32_0(0),   FP32_1(0),      FP32_2(0)      } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_RSQRT_1_0, FP32_RSQRT_1_0, FP32_INF(1), FP32_RSQRT_1_0, FP32_INF(0), FP32_RSQRT_1_0, FP32_RSQRT_2_0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_0(0),   FP32_1(0),      FP32_1(0),      FP32_0(1),   FP32_1(0),      FP32_0(0),   FP32_1(0),      FP32_2(0)      } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_RSQRT_1_0, FP32_RSQRT_1_0, FP32_INF(1), FP32_RSQRT_1_0, FP32_INF(0), FP32_RSQRT_1_0, FP32_RSQRT_2_0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_0(0),   FP32_1(0),      FP32_1(0),      FP32_0(1),   FP32_1(0),      FP32_0(0),   FP32_1(0),      FP32_2(0)      } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_RSQRT_1_0, FP32_RSQRT_1_0, FP32_INF(1), FP32_RSQRT_1_0, FP32_INF(0), FP32_RSQRT_1_0, FP32_RSQRT_2_0 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_0(0),   FP32_1(0),      FP32_1(0),      FP32_0(1),   FP32_1(0),      FP32_0(0),   FP32_1(0),      FP32_2(0)      } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_RSQRT_1_0, FP32_RSQRT_1_0, FP32_INF(1), FP32_RSQRT_1_0, FP32_INF(0), FP32_RSQRT_1_0, FP32_RSQRT_2_0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_0(0),   FP32_1(0),      FP32_1(0),      FP32_0(1),   FP32_1(0),      FP32_0(0),   FP32_1(0),      FP32_2(0)      } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_RSQRT_1_0, FP32_RSQRT_1_0, FP32_INF(1), FP32_RSQRT_1_0, FP32_INF(0), FP32_RSQRT_1_0, FP32_RSQRT_2_0 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ },
    /*
     * Normals.
     */
    /*10*/{ { /*src1     */ { FP32_NORM_V0(0),    FP32_NORM_V1(0),    FP32_NORM_V2(0),    FP32_NORM_V3(0),    FP32_NORM_V4(0),    FP32_NORM_V5(0),    FP32_NORM_V6(0),    FP32_NORM_V7(0)    } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_RSQRT_NORM_V0, FP32_RSQRT_NORM_V1, FP32_RSQRT_NORM_V2, FP32_RSQRT_NORM_V3, FP32_RSQRT_NORM_V4, FP32_RSQRT_NORM_V5, FP32_RSQRT_NORM_V6, FP32_RSQRT_NORM_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_VAL_529_0,   FP32_VAL_256_0,   FP32_VAL_7q16sq,   FP32_VAL_123_75sq,   FP32_VAL_528_0,   FP32_VAL_257_0,   FP32_VAL_7q16sq_d,    FP32_VAL_123_75sq_e   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_RSQRT_529_0, FP32_RSQRT_256_0, FP32_RSQRT_7q16sq, FP32_RSQRT_123_75sq, FP32_RSQRT_528_0, FP32_RSQRT_257_0, FP32_RSQRT_7q16sq_d,  FP32_RSQRT_123_75sq_e } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_VAL_529_0,   FP32_VAL_256_0,   FP32_VAL_7q16sq,   FP32_VAL_123_75sq,   FP32_VAL_528_0,   FP32_VAL_257_0,   FP32_VAL_7q16sq_d,    FP32_VAL_123_75sq_e   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_RSQRT_529_0, FP32_RSQRT_256_0, FP32_RSQRT_7q16sq, FP32_RSQRT_123_75sq, FP32_RSQRT_528_0, FP32_RSQRT_257_0, FP32_RSQRT_7q16sq_d,  FP32_RSQRT_123_75sq_e } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_VAL_529_0,   FP32_VAL_256_0,   FP32_VAL_7q16sq,   FP32_VAL_123_75sq,   FP32_VAL_528_0,   FP32_VAL_257_0,   FP32_VAL_7q16sq_d,    FP32_VAL_123_75sq_e   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_RSQRT_529_0, FP32_RSQRT_256_0, FP32_RSQRT_7q16sq, FP32_RSQRT_123_75sq, FP32_RSQRT_528_0, FP32_RSQRT_257_0, FP32_RSQRT_7q16sq_d,  FP32_RSQRT_123_75sq_e } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_VAL_529_0,   FP32_VAL_256_0,   FP32_VAL_7q16sq,   FP32_VAL_123_75sq,   FP32_VAL_528_0,   FP32_VAL_257_0,   FP32_VAL_7q16sq_d,    FP32_VAL_123_75sq_e   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_RSQRT_529_0, FP32_RSQRT_256_0, FP32_RSQRT_7q16sq, FP32_RSQRT_123_75sq, FP32_RSQRT_528_0, FP32_RSQRT_257_0, FP32_RSQRT_7q16sq_d,  FP32_RSQRT_123_75sq_e } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_NORM_MAX(0),    FP32_NORM_MIN(0),    FP32_NORM_SAFE_INT_MAX(0), FP32_NORM_MIN(0),    FP32_NORM_MAX(1), FP32_NORM_MIN(1), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_MIN(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_RSQRT_NORM_MAX, FP32_RSQRT_NORM_MIN, FP32_RSQRT_NS_INT_MAX,     FP32_RSQRT_NORM_MIN, FP32_QNAN(1),     FP32_QNAN(1),     FP32_QNAN(1),              FP32_QNAN(1)     } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ },
   /*
    * Denormals.
    */
    /*16*/{ { /*src1     */ { FP32_DENORM_MAX(0),  FP32_DENORM_MAX(0), FP32_0(0),   FP32_0(1),   FP32_DENORM_MAX(1), FP32_DENORM_MAX(1), FP32_0(1),   FP32_0(0)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0),         FP32_INF(0),        FP32_INF(0), FP32_INF(1), FP32_INF(1),        FP32_INF(1),        FP32_INF(1), FP32_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_DENORM_MIN(0),  FP32_DENORM_MIN(0), FP32_0(0),   FP32_0(1),   FP32_DENORM_MIN(1), FP32_DENORM_MIN(1), FP32_0(1),   FP32_0(0)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0),         FP32_INF(0),        FP32_INF(0), FP32_INF(1), FP32_INF(1),        FP32_INF(1),        FP32_INF(1), FP32_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_DENORM_MIN(0),  FP32_DENORM_MAX(0), FP32_0(0),   FP32_0(1),   FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_0(1),   FP32_0(0)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0),         FP32_INF(0),        FP32_INF(0), FP32_INF(1), FP32_INF(1),        FP32_INF(1),        FP32_INF(1), FP32_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_DENORM_MIN(0),  FP32_DENORM_MAX(0), FP32_0(0),   FP32_0(1),   FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_0(1),   FP32_0(0)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0),         FP32_INF(0),        FP32_INF(0), FP32_INF(1), FP32_INF(1),        FP32_INF(1),        FP32_INF(1), FP32_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_DENORM_MIN(0),  FP32_DENORM_MAX(0), FP32_0(0),   FP32_0(1),   FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_0(1),   FP32_0(0)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0),         FP32_INF(0),        FP32_INF(0), FP32_INF(1), FP32_INF(1),        FP32_INF(1),        FP32_INF(1), FP32_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_DENORM_MIN(0),  FP32_DENORM_MAX(0), FP32_0(0),   FP32_0(1),   FP32_DENORM_MIN(1), FP32_DENORM_MAX(1), FP32_0(1),   FP32_0(0)   } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0),         FP32_INF(0),        FP32_INF(0), FP32_INF(1), FP32_INF(1),        FP32_INF(1),        FP32_INF(1), FP32_INF(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ },
    /*
     * Invalids.
     */
    /** @todo Invalids. */
    /*22*/ /* FP32_TABLE_D10_PS_INVALIDS */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(rsqrtps_XMM1_XMM2),   255, RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(rsqrtps_XMM1_FSxBX),  255, RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vrsqrtps_XMM1_XMM2),  255, RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vrsqrtps_XMM1_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vrsqrtps_YMM1_YMM2),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vrsqrtps_YMM1_FSxBX), 255, RM_MEM, T_AVX_256, YMM1, YMM1, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(rsqrtps_XMM8_XMM9),   255, RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(rsqrtps_XMM8_FSxBX),  255, RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vrsqrtps_XMM8_XMM9),  255, RM_REG, T_AVX_128, XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vrsqrtps_XMM8_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vrsqrtps_YMM8_YMM9),  255, RM_REG, T_AVX_256, YMM8, YMM8, YMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vrsqrtps_YMM8_FSxBX), 255, RM_MEM, T_AVX_256, YMM8, YMM8, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(rsqrtps_XMM1_XMM1),   255, RM_REG, T_SSE,     XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(rsqrtps_XMM8_XMM8),   255, RM_REG, T_SSE,     XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vrsqrtps_XMM1_XMM1),  255, RM_REG, T_AVX_128, XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vrsqrtps_YMM1_YMM1),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vrsqrtps_YMM8_YMM8),  255, RM_REG, T_AVX_256, YMM8, YMM8, YMM8,  PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig4));
}


/*
 * [V]RSQRTSS.
 */
/** @todo this fails entirely under IEM: the instructions rcpps, rcpss, rsqrtps, rsqrtss are all implemented with too much precision & attention to exceptions! */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_rsqrtss(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0),       FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_INF(0),     FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),       FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V3(1), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(1),     FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),       FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V5(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_INF(1),     FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),       FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_SNAN(0),    FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(1),     FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(1),       FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_QNAN(1),    FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(1),     FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_0(0),       FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_RAND_V0(1), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_INF(0),     FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_FZ,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 6*/{ { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V1 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_0(0),       FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_2(1),       FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_0(0),       FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_0(0),       FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(0),     FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_SNAN(0),    FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_0(0),       FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_QNAN(1),    FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V2(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_QNAN(1),    FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_QNAN(0),    FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_QNAN(1),    FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),     FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_RAND_V4(0), FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_QNAN(1),    FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_DAZ | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /*
     * Normals & Precision (Overflow, Underflow not possible).
     */
    /*14*/{ { /*src1     */ { FP32_NORM_V0(0),    FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_NORM_V4(0),    FP32_RAND_x7_V0 } },
            { /* =>      */ { FP32_RSQRT_NORM_V0, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },

          { { /*src1     */ { FP32_NORM_V2(0),    FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_1(1),          FP32_RAND_x7_V3 } },
            { /* =>      */ { FP32_RSQRT_NORM_V2, FP32_RAND_x7_V3 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_V3(0),    FP32_0_x7(0)    } },
            { /*src2     */ { FP32_NORM_MIN(0),   FP32_RAND_x7_V1 } },
            { /* =>      */ { FP32_RSQRT_NORM_V3, FP32_RAND_x7_V1 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_MAX(0),    FP32_RAND_x7_V4 } },
            { /*src2     */ { FP32_NORM_MAX(1),    FP32_RAND_x7_V2 } },
            { /* =>      */ { FP32_RSQRT_NORM_MAX, FP32_RAND_x7_V2 } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_MIN(0),    FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_INF(1),         FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_RSQRT_NORM_MIN, FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V2 } },
            { /*src2     */ { FP32_RAND_V1(1),           FP32_RAND_x7_V5 } },
            { /* =>      */ { FP32_RSQRT_NS_INT_MAX,     FP32_RAND_x7_V5 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_MIN(0),    FP32_RAND_x7_V5 } },
            { /*src2     */ { FP32_RAND_V0(0),     FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_RSQRT_NORM_MIN, FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_VAL_256_0,   FP32_RAND_x7_V0 } },
            { /*src2     */ { FP32_2(0),        FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_RSQRT_256_0, FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_VAL_256_0,    FP32_RAND_x7_V3 } },
            { /*src2     */ { FP32_DENORM_V3(0), FP32_RAND_x7_V4 } },
            { /* =>      */ { FP32_RSQRT_256_0,  FP32_RAND_x7_V4 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_VAL_528_0,            FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_NORM_SAFE_INT_MAX(1), FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_RSQRT_528_0,          FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_VAL_528_0,            FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_NORM_SAFE_INT_MAX(1), FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_RSQRT_528_0,          FP32_RAND_x7_V7 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /** @todo Invalids. */
    /*25*/ /* FP32_TABLE_D10_SS_INVALIDS */
    };

    /* Sanity-check subset for 'same register' instruction variants */
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValuesSR[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0),   FP32_RAND_x7_V7 } },
            { /*src2     */ { FP32_0(0),   FP32_RAND_x7_V7 } },
            { /* =>      */ { FP32_INF(0), FP32_RAND_x7_V7 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_INF(1),  FP32_RAND_x7_V6 } },
            { /*src2     */ { FP32_INF(1),  FP32_RAND_x7_V6 } },
            { /* =>      */ { FP32_QNAN(1), FP32_RAND_x7_V6 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP32_NORM_V3(0),    FP32_0_x7(0) } },
            { /*src2     */ { FP32_NORM_V3(0),    FP32_0_x7(0) } },
            { /* =>      */ { FP32_RSQRT_NORM_V3, FP32_0_x7(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    };
    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(rsqrtss_XMM1_XMM2),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(rsqrtss_XMM1_FSxBX),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(rsqrtss_XMM8_XMM9),        255,         RM_REG, T_SSE,     XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(rsqrtss_XMM8_FSxBX),       255,         RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vrsqrtss_XMM1_XMM2_XMM3),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vrsqrtss_XMM1_XMM2_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(vrsqrtss_XMM8_XMM9_XMM10), X86_XCPT_AC, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vrsqrtss_XMM8_XMM9_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(rsqrtss_XMM1_XMM1),        255,         RM_REG, T_SSE,     XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vrsqrtss_XMM1_XMM1_XMM1),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM1, XMM1, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vrsqrtss_XMM1_XMM1_XMM2),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vrsqrtss_XMM1_XMM2_XMM2),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM1, XMM2, XMM2,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vrsqrtss_XMM1_XMM1_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vrsqrtss_XMM8_XMM8_XMM8),  X86_XCPT_AC, RM_REG, T_AVX_128, XMM8, XMM8, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig5));
}


/*
 * [V]DPPS.
 */
/** @todo this fails entirely under IEM, getting #GP faults and many differences in exceptions */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_dpps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues00[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1),   FP32_0(1),   FP32_0(1),       FP32_0(1)       } },
            { /*src2     */ { FP32_1(0), FP32_1(1), FP32_2(0), FP32_2(1), FP32_INF(0), FP32_INF(1), FP32_RAND_V0(0), FP32_RAND_V0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),   FP32_0(0),   FP32_0(0),       FP32_0(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 2*/{ { /*src1     */ { FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(0),     FP32_INF(1),  FP32_INF(1), FP32_INF(0), FP32_INF(0) } },
            { /*src2     */ { FP32_INF(0), FP32_INF(1), FP32_2(0),   FP32_RAND_V0(1), FP32_2(1),    FP32_2(0),   FP32_1(0),   FP32_1(1)   } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),       FP32_0(0),    FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 3*/{ { /*src1     */ { FP32_NORM_V0(0), FP32_NORM_V1(1), FP32_NORM_V2(0), FP32_NORM_V3(1), FP32_RAND_V4(0), FP32_RAND_V5(1), FP32_RAND_V6(1), FP32_RAND_V7(0) } },
            { /*src2     */ { FP32_NORM_V4(0), FP32_NORM_V5(0), FP32_NORM_V6(1), FP32_NORM_V7(1), FP32_RAND_V3(1), FP32_RAND_V2(0), FP32_RAND_V1(0), FP32_RAND_V0(0) } },
            { /* =>      */ { FP32_0(0),       FP32_0(0),       FP32_0(0),       FP32_0(0),       FP32_0(0),       FP32_0(0),       FP32_0(0),       FP32_0(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
   /*
    * Denormals.
    */
    /* 4*/{ { /*src1     */ { FP32_DENORM_V0(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_V3(1), FP32_DENORM_V4(0),  FP32_DENORM_V5(1),  FP32_DENORM_V6(1), FP32_DENORM_V7(0) } },
            { /*src2     */ { FP32_DENORM_V4(0), FP32_DENORM_V5(0),  FP32_DENORM_V6(1),  FP32_DENORM_V7(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_V1(0), FP32_DENORM_V0(0) } },
            { /* =>      */ { FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0)         } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
   /*
    * Invalids.
    */
    /* 5*/{ { /*src1     */ { FP32_QNAN_V5(0), FP32_QNAN_V2(1), FP32_QNAN_V0(1),  FP32_QNAN_V0(0), FP32_QNAN_V3(1), FP32_QNAN_V7(0), FP32_QNAN(0),    FP32_QNAN_V4(1)  } },
            { /*src2     */ { FP32_QNAN(1),    FP32_QNAN_V1(0), FP32_QNAN_MAX(0), FP32_QNAN_V6(0), FP32_QNAN_V5(1), FP32_QNAN_V7(1), FP32_QNAN_V6(1), FP32_QNAN_MAX(1) } },
            { /* =>      */ { FP32_0(0),       FP32_0(0),       FP32_0(0),        FP32_0(0),       FP32_0(0),       FP32_0(0),       FP32_0(0),       FP32_0(0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_SNAN_V5(0), FP32_SNAN_V2(1), FP32_SNAN_V0(1),  FP32_SNAN_V0(0), FP32_SNAN_V3(1), FP32_SNAN_V7(0), FP32_SNAN(0),    FP32_SNAN_V4(1)  } },
            { /*src2     */ { FP32_SNAN(1),    FP32_SNAN_V1(0), FP32_SNAN_MAX(0), FP32_SNAN_V6(0), FP32_SNAN_V5(1), FP32_SNAN_V7(1), FP32_SNAN_V6(1), FP32_SNAN_MAX(1) } },
            { /* =>      */ { FP32_0(0),       FP32_0(0),       FP32_0(0),        FP32_0(0),       FP32_0(0),       FP32_0(0),       FP32_0(0),       FP32_0(0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Precision, Overflow, Underflow not possible in 'imm 0' case.
     */
    };
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValuesE1[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1),       FP32_0(1),       FP32_0(1),       FP32_0(1)       } },
            { /*src2     */ { FP32_1(0), FP32_1(1), FP32_2(0), FP32_2(1), FP32_NORM_V0(0), FP32_NORM_V0(1), FP32_RAND_V0(0), FP32_RAND_V0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),       FP32_0(0),       FP32_0(0),       FP32_0(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 2*/{ { /*src1     */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0) } },
            { /*src2     */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0) } },
            { /* =>      */ { FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1),  FP32_INF(0), FP32_INF(1), FP32_INF(0) } },
            { /*src2     */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1),  FP32_INF(0), FP32_INF(1), FP32_INF(1) } },
            { /* =>      */ { FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_QNAN(1), FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
              /*mxcsr:in */ 0,                                /* oo + -oo = IE */
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src1     */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /*src2     */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_0(0),   FP32_0(0), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,                                /* no IE: the oo * 0 dot-product is skipped */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_INF(0),      FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_INF(1),      FP32_0(0),        FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ 0,                                /* big * big = oo (OE); big * -big = -oo (OE) */
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE },
          { { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0)                                                            /* unused */ } },
              /*mxcsr:in */ 0,                                /* big * big = oo (OE); big * -big = -oo (OE) */
              /*128:out  */ 0,                                /* OE hits in multiply step, before IE in addition step */
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1) } },
            { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_INF(1),      FP32_0(0),        FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_OM | X86_MXCSR_PM,      /* big * big = oo (OE) is skipped; big * -big = -oo (OE); -oo + -oo = -oo (!IE) */
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_PM,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_PM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED | BS3_MXCSR_PM_FIXED },
    /*
     * Normals, Precision, Overflow.
     */
    /* 8*/{ { /*src1     */ { FP32_1(0),               FP32_1(1), FP32_2(0), FP32_2(1), FP32_1(0), FP32_1(1), FP32_2(0), FP32_2(1) } },
            { /*src2     */ { FP32_1(0),               FP32_1(1), FP32_2(0), FP32_2(1), FP32_1(1), FP32_1(0), FP32_2(0), FP32_2(0) } },
            { /* =>      */ { FP32_V(0,0x100000,0x82), FP32_0(0), FP32_0(0), FP32_0(0), FP32_1(1), FP32_0(0), FP32_0(0), FP32_0(0) } },
                              /*9.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /*src2     */ { FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(0)        } },
            { /* =>      */ { FP32_ROW_UNUSED } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1) } },
            { /*src2     */ { FP32_2(0),        FP32_2(1),        FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(1),        FP32_2(0)        } },
            { /* =>      */ { FP32_INF(0),      FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_INF(1),      FP32_0(0),        FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
   /** @todo more normals; rounding controls affecting different steps of the calculation */
   /*
    * Denormals, Underflow.
    */
    /*11*/{ { /*src1     */ { FP32_DENORM_V0(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_V3(1), FP32_DENORM_V4(0),  FP32_DENORM_V5(1),  FP32_DENORM_V6(1), FP32_DENORM_V7(0) } },
            { /*src2     */ { FP32_DENORM_V4(0), FP32_DENORM_V5(0),  FP32_DENORM_V6(1),  FP32_DENORM_V7(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_V1(0), FP32_DENORM_V0(0) } },
            { /* =>      */ { FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0)         } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE },
          { { /*src1     */ { FP32_DENORM_V0(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_V3(1), FP32_DENORM_V4(0),  FP32_DENORM_V5(1),  FP32_DENORM_V6(1), FP32_DENORM_V7(0) } },
            { /*src2     */ { FP32_DENORM_V4(0), FP32_DENORM_V5(0),  FP32_DENORM_V6(1),  FP32_DENORM_V7(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_V1(0), FP32_DENORM_V0(0) } },
            { /* =>      */ { FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0)         } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE },
          { { /*src1     */ { FP32_DENORM_V0(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_V3(1), FP32_DENORM_V4(0),  FP32_DENORM_V5(1),  FP32_DENORM_V6(1), FP32_DENORM_V7(0) } },
            { /*src2     */ { FP32_DENORM_V4(0), FP32_DENORM_V5(0),  FP32_DENORM_V6(1),  FP32_DENORM_V7(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_V1(0), FP32_DENORM_V0(0) } },
            { /* =>      */ { FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0)         } },
              /*mxcsr:in */ X86_MXCSR_DM,
              /*128:out  */ X86_MXCSR_DM | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE },
          { { /*src1     */ { FP32_DENORM_V0(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_V3(1), FP32_DENORM_V4(0),  FP32_DENORM_V5(1),  FP32_DENORM_V6(1), FP32_DENORM_V7(0) } },
            { /*src2     */ { FP32_NORM_MAX(1),  FP32_NORM_MAX(0),   FP32_DENORM_V6(1),  FP32_DENORM_V7(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_V1(0), FP32_DENORM_V0(0) } },
            { /* =>      */ { FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0)         } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
#define TINY_MAXx6 FP32_V(0,0x3ffffe,3) /* 6 * FP32_DENORM_MAX(0) */
#define TINY_MINx6 FP32_V(0,6,0)        /* 6 * FP32_DENORM_MIN(0) */
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0) } },
            { /*src2     */ { FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0)          } },
            { /* =>      */ { TINY_MAXx6,         FP32_0(0),          FP32_0(0),          FP32_0(0)                                                                             /* unused */ } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED },
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0) } },
            { /*src2     */ { FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0)          } },
            { /* =>      */ { TINY_MAXx6,         FP32_0(0),          FP32_0(0),          FP32_0(0)                                                                             /* unused */ } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DE | BS3_MXCSR_DM_FIXED },
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0) } },
            { /*src2     */ { FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0)          } },
            { /* =>      */ { TINY_MAXx6,         FP32_0(0),          FP32_0(0),          FP32_0(0),          TINY_MINx6,         FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DM | X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_DM | X86_MXCSR_UM | X86_MXCSR_DE | X86_MXCSR_PE | BS3_MXCSR_DM_FIXED | BS3_MXCSR_UM_FIXED },
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0) } },
            { /*src2     */ { FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0)          } },
            { /* =>      */ { TINY_MAXx6,         FP32_0(0),          FP32_0(0),          FP32_0(0),          TINY_MINx6,         FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED },
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0) } },
            { /*src2     */ { FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0)          } },
            { /* =>      */ { TINY_MAXx6,         FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_UM | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_DE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED },
#undef  TINY_MAXx6
#undef  TINY_MINx6
   /*
    * Invalids.
    */
    /*20*/{ { /*src1     */ { FP32_QNAN_V5(0), FP32_QNAN_V2(1), FP32_QNAN_V0(1),  FP32_QNAN_V0(0),  FP32_QNAN_V3(1), FP32_QNAN_V7(0), FP32_QNAN(0),     FP32_QNAN_V4(1)  } },
            { /*src2     */ { FP32_QNAN(1),    FP32_QNAN_V1(0), FP32_QNAN_MAX(0), FP32_QNAN_V6(0),  FP32_QNAN_V5(1), FP32_QNAN_V7(1), FP32_QNAN_V6(1),  FP32_QNAN_MAX(1) } },
            { /* =>      */ { FP32_QNAN_V1(0), FP32_0(0),       FP32_0(0),        FP32_0(0),        FP32_QNAN_V7(1), FP32_0(0),       FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ 0,                                /* output swaps src2 input pairs?!? -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_SNAN_V5(0), FP32_SNAN_V2(1),  FP32_SNAN_V0(1),  FP32_SNAN_V0(0),  FP32_SNAN_V3(1), FP32_SNAN_V7(0), FP32_SNAN(0),     FP32_SNAN_V4(1)  } },
            { /*src2     */ { FP32_SNAN(1),    FP32_SNAN_V1(0),  FP32_SNAN_MAX(0), FP32_SNAN_V6(0),  FP32_SNAN_V5(1), FP32_SNAN_V7(1), FP32_SNAN_V6(1),  FP32_SNAN_MAX(1) } },
            { /* =>      */ { FP32_QNAN_V1(0), FP32_0(0),        FP32_0(0),        FP32_0(0),        FP32_QNAN_V7(1), FP32_0(0),       FP32_0(0),        FP32_0(0)        } },
              /*mxcsr:in */ 0,                                /* output has swapped src2 input pairs?!? -- result from i7-10700 */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src1     */ { FP32_1(0),               FP32_1(0), FP32_1(0), FP32_1(0), FP32_1(0),        FP32_1(0), FP32_1(0), FP32_1(0)        } },
            { /*src2     */ { FP32_1(0),               FP32_1(0), FP32_1(0), FP32_1(0), FP32_1(0),        FP32_1(0), FP32_1(0), FP32_QNAN_MAX(1) } },
            { /* =>      */ { FP32_V(0,0x400000,0x80), FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0)        } },
                              /*3.0*/
              /*mxcsr:in */ 0,                                /* output grabs the one NaN -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_1(0),               FP32_1(0), FP32_1(0), FP32_1(0), FP32_1(0),               FP32_1(0), FP32_1(0), FP32_1(0) } },
            { /*src2     */ { FP32_1(0),               FP32_1(0), FP32_1(0), FP32_1(0), FP32_QNAN_MAX(1),        FP32_1(0), FP32_1(0), FP32_1(0) } },
            { /* =>      */ { FP32_V(0,0x400000,0x80), FP32_0(0), FP32_0(0), FP32_0(0), FP32_V(0,0x400000,0x80), FP32_0(0), FP32_0(0), FP32_0(0) } },
                              /*3.0*/                                                   /*3.0*/
              /*mxcsr:in */ 0,                                /* the NaN isn't in the specified set of calculations */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_1(0),               FP32_1(0), FP32_1(0), FP32_1(0), FP32_1(0),        FP32_1(0), FP32_QNAN_MAX(1), FP32_1(0) } },
            { /*src2     */ { FP32_1(0),               FP32_1(0), FP32_1(0), FP32_1(0), FP32_1(0),        FP32_1(0), FP32_1(0),        FP32_1(0) } },
            { /* =>      */ { FP32_V(0,0x400000,0x80), FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN_MAX(1), FP32_0(0), FP32_0(0),        FP32_0(0) } },
                              /*3.0*/
              /*mxcsr:in */ 0,                                /* output grabs the one NaN -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_1(0),               FP32_1(0), FP32_1(0), FP32_1(0), FP32_1(0),        FP32_1(0), FP32_1(0), FP32_1(0)        } },
            { /*src2     */ { FP32_1(0),               FP32_1(0), FP32_1(0), FP32_1(0), FP32_1(0),        FP32_1(0), FP32_1(0), FP32_SNAN_MAX(1) } },
            { /* =>      */ { FP32_V(0,0x400000,0x80), FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN_MAX(1), FP32_0(0), FP32_0(0), FP32_0(0)        } },
                              /*3.0*/
              /*mxcsr:in */ 0,                                /* output grabs the one NaN -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
    };
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValuesFF[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1),       FP32_0(1),       FP32_0(1),       FP32_0(1)       } },
            { /*src2     */ { FP32_1(0), FP32_1(1), FP32_2(0), FP32_2(1), FP32_NORM_V0(0), FP32_NORM_V0(1), FP32_RAND_V0(0), FP32_RAND_V0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0),       FP32_0(0),       FP32_0(0),       FP32_0(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 2*/{ { /*src1     */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0) } },
            { /*src2     */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0) } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1),  FP32_INF(0),  FP32_INF(1),  FP32_INF(0)  } },
            { /*src2     */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1),  FP32_INF(0),  FP32_INF(1),  FP32_INF(1)  } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ 0,                                /* oo + -oo = IE */
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src1     */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0),  FP32_0(0),    FP32_0(1),    FP32_0(0)    } },
            { /*src2     */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_0(0),    FP32_0(0),    FP32_0(1),    FP32_0(1)    } },
            { /* =>      */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(1) } },
              /*mxcsr:in */ 0,                                /* oo * 0 = IE */
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /*src2     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_INF(0),      FP32_INF(0),      FP32_INF(0),      FP32_INF(0),      FP32_INF(1),      FP32_INF(1),      FP32_INF(1),      FP32_INF(1)      } },
              /*mxcsr:in */ 0,                                /* big * big = oo (OE); big * -big = -oo (OE) */
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE },
          /** @todo the following three entries (including ifdef'd out one) are one test, with some corners unexplored due to tester issues.
           *  The tester 'knows' that DE/IE/ZE are 'early' exceptions while OE/PE/UE are 'late'.  This instruction can hit them in different
           *  orders due to its internal sequence of operations.  Possible fix: for all instructions, first run it unmasked; then, whatever
           *  exception(s) hit, run it with those masked; repeat, adding more masks until the expected exceptions have all been delivered (or not).
           *  Note this is a tester issue, the CPU is behaving correctly, we just aren't able to test it properly at the moment.
           */
          { { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0)                                                            /* unused */ } },
              /*mxcsr:in */ 0,                                /* big * big = oo (OE); big * -big = -oo (OE) */
              /*128:out  */ 0,                                /* OE hits in multiply step, before IE in addition step */
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
          { { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_QNAN(1),     FP32_QNAN(1),     FP32_QNAN(1),     FP32_QNAN(1)     } },
              /*mxcsr:in */ X86_MXCSR_IM | X86_MXCSR_OM | X86_MXCSR_PM,                     /* big * big = oo (OE); big * -big = -oo (OE); oo + -oo = IE */
              /*128:out  */ X86_MXCSR_IM | X86_MXCSR_OM | X86_MXCSR_PM,
              /*256:out  */ X86_MXCSR_IM | X86_MXCSR_OM | X86_MXCSR_PM | X86_MXCSR_IE | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_IM_FIXED | BS3_MXCSR_OM_FIXED | BS3_MXCSR_PM_FIXED },
#ifdef TODO_MXCSR_ORDER /** @todo wrong order of exceptions, see above */
 /*--| 8*/{ { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /*src2     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0)                                                            /* unused */ } },
              /*mxcsr:in */ X86_MXCSR_OM,                     /* big * big = oo (OE); big * -big = -oo (OE); oo + -oo = IE */
              /*128:out  */ X86_MXCSR_OM,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_IE | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
#endif /* TODO_MXCSR_ORDER */
    /*
     * Normals, Precision, Overflow.
     */
 /* 8| 9*/{ { /*src1     */ { FP32_1(0),               FP32_1(1),               FP32_2(0),               FP32_2(1),               FP32_1(0), FP32_1(1), FP32_2(0), FP32_2(1) } },
            { /*src2     */ { FP32_1(0),               FP32_1(1),               FP32_2(0),               FP32_2(1),               FP32_1(1), FP32_1(0), FP32_2(0), FP32_2(0) } },
            { /* =>      */ { FP32_V(0,0x200000,0x82), FP32_V(0,0x200000,0x82), FP32_V(0,0x200000,0x82), FP32_V(0,0x200000,0x82), FP32_2(1), FP32_2(1), FP32_2(1), FP32_2(1) } },
                              /*10.0*/                 /*10.0*/                 /*10.0*/                 /*10.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(1) } },
            { /*src2     */ { FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(0)        } },
            { /* =>      */ { FP32_ROW_UNUSED } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED },
          { { /*src1     */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_NORM_MAX(1), FP32_NORM_MAX(0), FP32_NORM_MAX(1) } },
            { /*src2     */ { FP32_2(0),        FP32_2(1),        FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(0),        FP32_2(1),        FP32_2(0)        } },
            { /* =>      */ { FP32_INF(0),      FP32_INF(0),      FP32_INF(0),      FP32_INF(0),      FP32_INF(1),      FP32_INF(1),      FP32_INF(1),      FP32_INF(1)      } },
              /*mxcsr:in */ X86_MXCSR_OM,
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED },
   /** @todo more normals; rounding controls affecting different steps of the calculation */
   /*
    * Denormals, Underflow.
    */
 /*11|12*/{ { /*src1     */ { FP32_DENORM_V0(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_V3(1), FP32_DENORM_V4(0),  FP32_DENORM_V5(1),  FP32_DENORM_V6(1), FP32_DENORM_V7(0) } },
            { /*src2     */ { FP32_DENORM_V4(0), FP32_DENORM_V5(0),  FP32_DENORM_V6(1),  FP32_DENORM_V7(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_V1(0), FP32_DENORM_V0(0) } },
            { /* =>      */ { FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0)         } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE },
          { { /*src1     */ { FP32_DENORM_V0(0), FP32_DENORM_MIN(1), FP32_DENORM_MIN(0), FP32_DENORM_V3(1), FP32_DENORM_V4(0),  FP32_DENORM_V5(1),  FP32_DENORM_V6(1), FP32_DENORM_V7(0) } },
            { /*src2     */ { FP32_NORM_MAX(1),  FP32_NORM_MAX(0),   FP32_DENORM_V6(1),  FP32_DENORM_V7(1), FP32_DENORM_MAX(1), FP32_DENORM_MAX(0), FP32_DENORM_V1(0), FP32_DENORM_V0(0) } },
            { /* =>      */ { FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0),          FP32_0(0),          FP32_0(0),         FP32_0(0)         } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
#define TINY_MAXx8 FP32_V(0,0x7ffffe,3) /* 8 * FP32_DENORM_MAX(0) */
#define TINY_MINx8 FP32_V(0,8,0)        /* 8 * FP32_DENORM_MIN(0) */
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0) } },
            { /*src2     */ { FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0)          } },
            { /* =>      */ { TINY_MAXx8,         TINY_MAXx8,         TINY_MAXx8,         TINY_MAXx8,                                                                           /* unused */ } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED },
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0) } },
            { /*src2     */ { FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0)          } },
            { /* =>      */ { TINY_MAXx8,         TINY_MAXx8,         TINY_MAXx8,         TINY_MAXx8,         TINY_MINx8,         TINY_MINx8,         TINY_MINx8,         TINY_MINx8         } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED },
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0) } },
            { /*src2     */ { FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0)          } },
            { /* =>      */ { TINY_MAXx8,         TINY_MAXx8,         TINY_MAXx8,         TINY_MAXx8,                                                                           /* unused */ } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED },
          { { /*src1     */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MAX(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0), FP32_DENORM_MIN(0) } },
            { /*src2     */ { FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0),          FP32_2(0)          } },
            { /* =>      */ { TINY_MAXx8,         TINY_MAXx8,         TINY_MAXx8,         TINY_MAXx8,         FP32_0(0),          FP32_0(0),          FP32_0(0),          FP32_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_UM | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED },
#undef  TINY_MAXx8
#undef  TINY_MINx8
   /*
    * Invalids.
    */
 /*17|18*/{ { /*src1     */ { FP32_QNAN_V5(0), FP32_QNAN_V2(1), FP32_QNAN_V0(1),  FP32_QNAN_V0(0),  FP32_QNAN_V3(1), FP32_QNAN_V7(0), FP32_QNAN(0),     FP32_QNAN_V4(1)  } },
            { /*src2     */ { FP32_QNAN(1),    FP32_QNAN_V1(0), FP32_QNAN_MAX(0), FP32_QNAN_V6(0),  FP32_QNAN_V5(1), FP32_QNAN_V7(1), FP32_QNAN_V6(1),  FP32_QNAN_MAX(1) } },
            { /* =>      */ { FP32_QNAN_V1(0), FP32_QNAN(1),    FP32_QNAN_V6(0),  FP32_QNAN_MAX(0), FP32_QNAN_V7(1), FP32_QNAN_V5(1), FP32_QNAN_MAX(1), FP32_QNAN_V6(1)  } },
              /*mxcsr:in */ 0,                                /* output swaps src2 input pairs?!? -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_SNAN_V5(0), FP32_SNAN_V2(1),  FP32_SNAN_V0(1),  FP32_SNAN_V0(0),  FP32_SNAN_V3(1), FP32_SNAN_V7(0), FP32_SNAN(0),     FP32_SNAN_V4(1)  } },
            { /*src2     */ { FP32_SNAN(1),    FP32_SNAN_V1(0),  FP32_SNAN_MAX(0), FP32_SNAN_V6(0),  FP32_SNAN_V5(1), FP32_SNAN_V7(1), FP32_SNAN_V6(1),  FP32_SNAN_MAX(1) } },
            { /* =>      */ { FP32_QNAN_V1(0), FP32_QNAN_V(1,1), FP32_QNAN_V6(0),  FP32_QNAN_MAX(0), FP32_QNAN_V7(1), FP32_QNAN_V5(1), FP32_QNAN_MAX(1), FP32_QNAN_V6(1)  } },
              /*mxcsr:in */ 0,                                /* output has swapped src2 input pairs?!? -- result from i7-10700 */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /*src1     */ { FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0)        } },
            { /*src2     */ { FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_QNAN_MAX(1) } },
            { /* =>      */ { FP32_V(0,0,0x81), FP32_V(0,0,0x81), FP32_V(0,0,0x81), FP32_V(0,0,0x81), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1) } },
                              /*4.0*/           /*4.0*/           /*4.0*/           /*4.0*/
              /*mxcsr:in */ 0,                                /* output duplicates the NaN 4x?!? -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0)        } },
            { /*src2     */ { FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_QNAN_MAX(1), FP32_1(0),        FP32_1(0),        FP32_1(0)        } },
            { /* =>      */ { FP32_V(0,0,0x81), FP32_V(0,0,0x81), FP32_V(0,0,0x81), FP32_V(0,0,0x81), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1) } },
                              /*4.0*/           /*4.0*/           /*4.0*/           /*4.0*/
              /*mxcsr:in */ 0,                                /* output duplicates the NaN 4x?!? -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_QNAN_MAX(1), FP32_1(0)        } },
            { /*src2     */ { FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0)        } },
            { /* =>      */ { FP32_V(0,0,0x81), FP32_V(0,0,0x81), FP32_V(0,0,0x81), FP32_V(0,0,0x81), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1) } },
                              /*4.0*/           /*4.0*/           /*4.0*/           /*4.0*/
              /*mxcsr:in */ 0,                                /* output duplicates the NaN 4x?!? -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0)        } },
            { /*src2     */ { FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_1(0),        FP32_SNAN_MAX(1) } },
            { /* =>      */ { FP32_V(0,0,0x81), FP32_V(0,0,0x81), FP32_V(0,0,0x81), FP32_V(0,0,0x81), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1), FP32_QNAN_MAX(1) } },
                              /*4.0*/           /*4.0*/           /*4.0*/           /*4.0*/
              /*mxcsr:in */ 0,                                /* output duplicates the NaN 4x?!? -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
    };
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValuesSR[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*unused   */ { FP32_ROW_UNUSED } },
            { /*src1     */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(1), FP32_0(1) } },
            { /* =>      */ { FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 1*/{ { /*src1     */ { FP32_ROW_UNUSED } },
            { /*unused   */ { FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(1), FP32_INF(1) } },
            { /* =>      */ { FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_INF(0), FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(dpps_XMM1_XMM2_000h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues00) },
        { BS3_INSTR4_ALL(dpps_XMM1_XMM2_0E1h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_ALL(dpps_XMM1_XMM2_0FFh),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesFF) },
        { BS3_INSTR4_ALL(dpps_XMM1_FSxBX_000h),       255, RM_MEM, T_SSE4_1,  XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues00) },
        { BS3_INSTR4_ALL(dpps_XMM1_FSxBX_0E1h),       255, RM_MEM, T_SSE4_1,  XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_ALL(dpps_XMM1_FSxBX_0FFh),       255, RM_MEM, T_SSE4_1,  XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesFF) },
        { BS3_INSTR4_C64(dpps_XMM8_XMM9_0E1h),        255, RM_REG, T_SSE4_1,  XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_C64(dpps_XMM8_FSxBX_0E1h),       255, RM_MEM, T_SSE4_1,  XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValuesE1) },

        { BS3_INSTR4_ALL(vdpps_XMM1_XMM2_XMM3_000h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues00) },
        { BS3_INSTR4_ALL(vdpps_XMM1_XMM2_XMM3_0E1h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_ALL(vdpps_XMM1_XMM2_XMM3_0FFh),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesFF) },
        { BS3_INSTR4_ALL(vdpps_XMM1_XMM2_FSxBX_000h), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues00) },
        { BS3_INSTR4_ALL(vdpps_XMM1_XMM2_FSxBX_0E1h), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_ALL(vdpps_XMM1_XMM2_FSxBX_0FFh), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValuesFF) },
        { BS3_INSTR4_C64(vdpps_XMM8_XMM9_XMM10_0E1h), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_C64(vdpps_XMM8_XMM9_FSxBX_0E1h), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValuesE1) },

        { BS3_INSTR4_ALL(vdpps_YMM1_YMM2_YMM3_000h),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValues00) },
        { BS3_INSTR4_ALL(vdpps_YMM1_YMM2_YMM3_0E1h),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_ALL(vdpps_YMM1_YMM2_YMM3_0FFh),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM3,  PASS_TEST_ARRAY(s_aValuesFF) },
        { BS3_INSTR4_ALL(vdpps_YMM1_YMM2_FSxBX_000h), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValues00) },
        { BS3_INSTR4_ALL(vdpps_YMM1_YMM2_FSxBX_0E1h), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_ALL(vdpps_YMM1_YMM2_FSxBX_0FFh), 255, RM_MEM, T_AVX_256, YMM1, YMM2, FSxBX, PASS_TEST_ARRAY(s_aValuesFF) },
        { BS3_INSTR4_C64(vdpps_YMM8_YMM9_YMM10_0E1h), 255, RM_REG, T_AVX_256, YMM8, YMM9, YMM10, PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_C64(vdpps_YMM8_YMM9_FSxBX_0E1h), 255, RM_MEM, T_AVX_256, YMM8, YMM9, FSxBX, PASS_TEST_ARRAY(s_aValuesE1) },

        { BS3_INSTR4_ALL(dpps_XMM1_XMM1_0E1h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(dpps_XMM8_XMM8_0E1h),        255, RM_REG, T_SSE4_1,  XMM8, XMM8, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },

        { BS3_INSTR4_ALL(vdpps_XMM1_XMM1_XMM1_0E1h),  255, RM_REG, T_AVX_128, XMM1, XMM1, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vdpps_XMM1_XMM1_XMM2_0E1h),  255, RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_ALL(vdpps_XMM1_XMM2_XMM1_0E1h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM1,  PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_ALL(vdpps_XMM1_XMM2_XMM2_0E1h),  255, RM_REG, T_AVX_128, XMM1, XMM2, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vdpps_XMM1_XMM1_FSxBX_0E1h), 255, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_C64(vdpps_XMM8_XMM8_XMM8_0E1h),  255, RM_REG, T_AVX_128, XMM8, XMM8, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vdpps_XMM8_XMM8_FSxBX_0E1h), 255, RM_MEM, T_AVX_128, XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValuesE1) },

        { BS3_INSTR4_ALL(vdpps_YMM1_YMM1_YMM1_0E1h),  255, RM_REG, T_AVX_256, YMM1, YMM1, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vdpps_YMM1_YMM1_YMM2_0E1h),  255, RM_REG, T_AVX_256, YMM1, YMM1, YMM2,  PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_ALL(vdpps_YMM1_YMM2_YMM1_0E1h),  255, RM_REG, T_AVX_256, YMM1, YMM2, YMM1,  PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_ALL(vdpps_YMM1_YMM2_YMM2_0E1h),  255, RM_REG, T_AVX_256, YMM1, YMM2, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vdpps_YMM1_YMM1_FSxBX_0E1h), 255, RM_MEM, T_AVX_256, YMM1, YMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesE1) },
        { BS3_INSTR4_C64(vdpps_YMM8_YMM8_YMM8_0E1h),  255, RM_REG, T_AVX_256, YMM8, YMM8, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vdpps_YMM8_YMM8_FSxBX_0E1h), 255, RM_MEM, T_AVX_256, YMM8, YMM8, FSxBX, PASS_TEST_ARRAY(s_aValuesE1) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig4));
}


/*
 * [V]DPPD.
 */
/** @todo this fails entirely under IEM, getting #GP faults and many differences in exceptions */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_dppd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues00[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0), FP64_0(1) } },
            { /*src2     */ { FP64_0(0), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_0(0), FP64_0(0) } },
            { /*src2     */ { FP64_1(0), FP64_1(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 2*/{ { /*src1     */ { FP64_INF(0), FP64_INF(1) } },
            { /*src2     */ { FP64_INF(0), FP64_INF(1) } },
            { /* =>      */ { FP64_0(0),   FP64_0(0)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 3*/{ { /*src1     */ { FP64_NORM_V0(0), FP64_NORM_V1(1) } },
            { /*src2     */ { FP64_NORM_V2(0), FP64_NORM_V3(0) } },
            { /* =>      */ { FP64_0(0),       FP64_0(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
   /*
    * Denormals.
    */
    /* 4*/{ { /*src1     */ { FP64_DENORM_MIN(1), FP64_DENORM_MAX(0) } },
            { /*src2     */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
   /*
    * Invalids.
    */
    /* 5*/{ { /*src1     */ { FP64_QNAN_V1(0),  FP64_QNAN_V2(1) } },
            { /*src2     */ { FP64_QNAN_MAX(0), FP64_QNAN_V0(0) } },
            { /* =>      */ { FP64_0(0),        FP64_0(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_SNAN_V1(0),  FP64_SNAN_V2(1) } },
            { /*src2     */ { FP64_SNAN_MAX(0), FP64_SNAN_V0(0) } },
            { /* =>      */ { FP64_0(0),        FP64_0(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Precision, Overflow, Underflow not possible in 'imm 0' case.
     */
    };
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues22[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0), FP64_0(1) } },
            { /*src2     */ { FP64_0(0), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_0(0), FP64_0(1) } },
            { /*src2     */ { FP64_1(0), FP64_1(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 2*/{ { /*src1     */ { FP64_INF(0), FP64_INF(1) } },
            { /*src2     */ { FP64_INF(0), FP64_INF(1) } },
            { /* =>      */ { FP64_0(0),   FP64_INF(0) } },
              /*mxcsr:in */ 0,                                /* -oo * -oo = oo */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_INF(0),  FP64_INF(0) } },
            { /*src2     */ { FP64_INF(0),  FP64_INF(1) } },
            { /* =>      */ { FP64_0(0),    FP64_INF(1) } },
              /*mxcsr:in */ 0,                                /* oo * -oo = -oo */
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_INF(0), FP64_0(0) } },
            { /*src2     */ { FP64_0(0),   FP64_0(0) } },
            { /* =>      */ { FP64_0(0),   FP64_0(0) } },
              /*mxcsr:in */ 0,                                /* 0 * 0 = 0 */
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),        FP64_INF(0)      } },
              /*mxcsr:in */ 0,                                /* big * big = oo (OE) */
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(0) } },
            { /*src2     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_0(0),        FP64_INF(1)      } },
              /*mxcsr:in */ 0,                                /* big * -big = -oo (OE) */
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE,
              /*256:out  */ -1 },
    /*
     * Normals, Precision, Overflow.
     */
    /* 7*/{ { /*src1     */ { FP64_1(0), FP64_2(0)                } },
            { /*src2     */ { FP64_1(0), FP64_2(0)                } },
            { /* =>      */ { FP64_0(0), FP64_V(0,0,0x401)/*4.0*/ } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /*src2     */ { FP64_2(0),        FP64_2(0),       } },
            { /* =>      */ { FP64_ROW_UNUSED } },
              /*mxcsr:in */ 0,                               /* big * 2 = inf (unmasked OE hits before PE) */
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /*src2     */ { FP64_2(0),        FP64_2(0),       } },
            { /* =>      */ { FP64_0(0),        FP64_INF(1)      } },
              /*mxcsr:in */ X86_MXCSR_OM,                    /* big * 2 = inf (OE | PE) */
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
   /** @todo more normals; rounding controls affecting different steps of the calculation */
   /*
    * Denormals, Underflow.
    */
    /*10*/{ { /*src1     */ { FP64_DENORM_V0(0), FP64_DENORM_MIN(1) } },
            { /*src2     */ { FP64_DENORM_V1(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),         FP64_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_V0(0), FP64_DENORM_MIN(1) } },
            { /*src2     */ { FP64_DENORM_V1(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),         FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
#define TINY_MAXx2 FP64_V(0,0xffffffffffffe,0x1) /* 2 * FP64_DENORM_MAX(0) */
#define TINY_MINx2 FP64_V(0,2,0)                 /* 2 * FP64_DENORM_MIN(0) */
          { { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src2     */ { FP64_2(0),          FP64_2(0)          } },
            { /* =>      */ { FP64_0(0),          TINY_MAXx2         } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0) } },
            { /*src2     */ { FP64_2(0),          FP64_2(0)          } },
            { /* =>      */ { FP64_ROW_UNUSED } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0) } },
            { /*src2     */ { FP64_2(0),          FP64_2(0)          } },
            { /* =>      */ { FP64_0(0),          TINY_MINx2         } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /*src2     */ { FP64_2(0),          FP64_2(0)          } },
            { /* =>      */ { FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0) } },
            { /*src2     */ { FP64_2(0),          FP64_2(0)          } },
            { /* =>      */ { FP64_ROW_UNUSED } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0) } },
            { /*src2     */ { FP64_2(0),          FP64_2(0)          } },
            { /* =>      */ { FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_UM | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
#undef  TINY_MAXx2
#undef  TINY_MINx2
   /*
    * Invalids.
    */
    /*18*/{ { /*src1     */ { FP64_QNAN_V0(0), FP64_QNAN_V2(1) } },
            { /*src2     */ { FP64_QNAN(1),    FP64_QNAN_V1(0) } },
            { /* =>      */ { FP64_0(0),       FP64_QNAN_V1(0) } },
              /*mxcsr:in */ 0,                                /* output equals src2 input, same slot -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_QNAN_V0(0), FP64_QNAN_V2(1) } },
            { /*src2     */ { FP64_2(1),       FP64_2(0)       } },
            { /* =>      */ { FP64_0(0),       FP64_QNAN_V2(1) } },
              /*mxcsr:in */ 0,                                /* output equals src1 input, same slot -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_1(0), FP64_QNAN_V3(0) } },
            { /*src2     */ { FP64_1(0), FP64_1(0)       } },
            { /* =>      */ { FP64_0(0), FP64_QNAN_V3(0) } },
              /*mxcsr:in */ 0,                                /* output equals src1 input, same slot -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_QNAN(0), FP64_1(0) } },
            { /*src2     */ { FP64_1(0),    FP64_1(0) } },
            { /* =>      */ { FP64_0(0),    FP64_1(0) } },
              /*mxcsr:in */ 0,                                /* NaN not accessed */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_1(0), FP64_1(0)       } },
            { /*src2     */ { FP64_1(0), FP64_QNAN_V1(0) } },
            { /* =>      */ { FP64_0(0), FP64_QNAN_V1(0) } },
              /*mxcsr:in */ 0,                                /* output equals src2 input, same slot -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_1(0),    FP64_1(0) } },
            { /*src2     */ { FP64_QNAN(1), FP64_1(0) } },
            { /* =>      */ { FP64_0(0),    FP64_1(0) } },
              /*mxcsr:in */ 0,                                /* NaN not accessed */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_SNAN_V0(0), FP64_SNAN_V2(1) } },
            { /*src2     */ { FP64_SNAN(1),    FP64_SNAN_V1(0) } },
            { /* =>      */ { FP64_0(0),       FP64_QNAN_V1(0) } },
              /*mxcsr:in */ 0,                                /* output equals src2 input, same slot, quieted -- result from i7-10700 */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_SNAN_V0(0), FP64_SNAN_V2(1) } },
            { /*src2     */ { FP64_2(1),       FP64_2(0)       } },
            { /* =>      */ { FP64_0(0),       FP64_QNAN_V2(1) } },
              /*mxcsr:in */ 0,                                /* output equals src1 input, same slot, quieted -- result from i7-10700 */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_1(0), FP64_SNAN_V3(0) } },
            { /*src2     */ { FP64_1(0), FP64_1(0)       } },
            { /* =>      */ { FP64_0(0), FP64_QNAN_V3(0) } },
              /*mxcsr:in */ 0,                                /* output equals src1 input, same slot, quieted -- result from i7-10700 */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_SNAN(0), FP64_1(0) } },
            { /*src2     */ { FP64_1(0),    FP64_1(0) } },
            { /* =>      */ { FP64_0(0),    FP64_1(0) } },
              /*mxcsr:in */ 0,                                /* NaN not accessed */
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_1(0), FP64_1(0)       } },
            { /*src2     */ { FP64_1(0), FP64_SNAN_V1(0) } },
            { /* =>      */ { FP64_0(0), FP64_QNAN_V1(0) } },
              /*mxcsr:in */ 0,                                /* output equals src2 NaN duplicated, quieted -- result from i7-10700 */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_1(0),    FP64_1(0) } },
            { /*src2     */ { FP64_SNAN(1), FP64_1(0) } },
            { /* =>      */ { FP64_0(0),    FP64_1(0) } },
              /*mxcsr:in */ 0,                                /* NaN not accessed */
              /*128:out  */ 0,
              /*256:out  */ -1 },
    };
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesFF[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0), FP64_0(1) } },
            { /*src2     */ { FP64_0(0), FP64_0(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_0(0), FP64_0(1) } },
            { /*src2     */ { FP64_1(0), FP64_1(1) } },
            { /* =>      */ { FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 2*/{ { /*src1     */ { FP64_INF(0), FP64_INF(1) } },
            { /*src2     */ { FP64_INF(0), FP64_INF(1) } },
            { /* =>      */ { FP64_INF(0), FP64_INF(0) } },
              /*mxcsr:in */ 0,                                /* oo + oo = oo */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_INF(0),  FP64_INF(0)  } },
            { /*src2     */ { FP64_INF(0),  FP64_INF(1)  } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1) } },
              /*mxcsr:in */ 0,                                /* oo + -oo = IE */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_INF(0),  FP64_0(0)    } },
            { /*src2     */ { FP64_0(0),    FP64_0(0)    } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1) } },
              /*mxcsr:in */ 0,                                /* oo * 0 = IE */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /* =>      */ { FP64_INF(0),      FP64_INF(0)      } },
              /*mxcsr:in */ 0,                                /* big * big = oo (OE) */
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /*src2     */ { FP64_NORM_MAX(1), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_INF(1),      FP64_INF(1)      } },
              /*mxcsr:in */ 0,                                /* big * -big = -oo (OE) */
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE,
              /*256:out  */ -1 },
          /** @todo the following three entries (including ifdef'd out one) are one test, with some corners unexplored due to tester issues.
           *  The tester 'knows' that DE/IE/ZE are 'early' exceptions while OE/PE/UE are 'late'.  This instruction can hit them in different
           *  orders due to its internal sequence of operations.  Possible fix: for all instructions, first run it unmasked; then, whatever
           *  exception(s) hit, run it with those masked; repeat, adding more masks until the expected exceptions have all been delivered (or not).
           *  Note this is a tester issue, the CPU is behaving correctly, we just aren't able to test it properly at the moment.
           */
          { { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_ROW_UNUSED } },
              /*mxcsr:in */ 0,                                /* big * big = oo (OE | PE); big * -big = -oo (OE | PE) */
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },                             /* OE hits in multiply step, before IE in addition step */
          { { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_QNAN(1),     FP64_QNAN(1)     } },
              /*mxcsr:in */ X86_MXCSR_IM | X86_MXCSR_OM | X86_MXCSR_PM,      /* big * big = oo (OE | PE); big * -big = -oo (OE | PE) */
              /*128:out  */ X86_MXCSR_IM | X86_MXCSR_OM | X86_MXCSR_PM | X86_MXCSR_IE | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_IM_FIXED | BS3_MXCSR_OM_FIXED | BS3_MXCSR_PM_FIXED,
              /*256:out  */ -1 },                             /* big * big = oo (OE | PE); big * -big = -oo (OE | PE); oo + -oo = IE */
#ifdef TODO_MXCSR_ORDER /** @todo wrong order of exceptions, see above */
 /*--| 9*/{ { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /*src2     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /* =>      */ { FP64_QNAN(1),     FP64_QNAN(1)     } },
              /*mxcsr:in */ X86_MXCSR_OM,                     /* big * big = oo (OE | PE); big * -big = -oo (OE | PE); oo + -oo = IE */
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_IE | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
#endif /* TODO_MXCSR_ORDER */
    /*
     * Normals, Precision, Overflow.
     */
 /* 9|10*/{ { /*src1     */ { FP64_1(0),                       FP64_2(0)                       } },
            { /*src2     */ { FP64_1(0),                       FP64_2(0)                       } },
            { /* =>      */ { FP64_V(0,0x4000000000000,0x401), FP64_V(0,0x4000000000000,0x401) } },
                              /*5.0*/                          /*5.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /*src2     */ { FP64_2(0),        FP64_2(0),       } },
            { /* =>      */ { FP64_ROW_UNUSED } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /*src2     */ { FP64_1(0),        FP64_1(0),       } },
            { /* =>      */ { FP64_ROW_UNUSED } },
              /*mxcsr:in */ 0,                               /* big * 1 = big; big * 1 = big; big + big = oo (unmasked OE hits before PE) */
              /*128:out  */ X86_MXCSR_OE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_NORM_MAX(0), FP64_NORM_MAX(0) } },
            { /*src2     */ { FP64_2(0),        FP64_2(0),       } },
            { /* =>      */ { FP64_INF(0),      FP64_INF(0)      } },
              /*mxcsr:in */ X86_MXCSR_OM,                     /* big * 2 = oo (OE | PE); big * 2 = oo (OE | PE) */
              /*128:out  */ X86_MXCSR_OM | X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_OM_FIXED,
              /*256:out  */ -1 },
   /** @todo more normals; rounding controls affecting different steps of the calculation */
   /*
    * Denormals, Underflow.
    */
 /*13|14*/{ { /*src1     */ { FP64_DENORM_V0(0), FP64_DENORM_MIN(1) } },
            { /*src2     */ { FP64_DENORM_V1(0), FP64_DENORM_MAX(0) } },
            { /* =>      */ { FP64_0(0),         FP64_0(0)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE,
              /*256:out  */ -1 },
#define TINY_MAXx4 FP64_V(0,0xffffffffffffe,0x2) /* 4 * FP64_DENORM_MAX(0) */
#define TINY_MINx4 FP64_V(0,4,0)                 /* 4 * FP64_DENORM_MIN(0) */
          { { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MAX(0) } },
            { /*src2     */ { FP64_2(0),          FP64_2(0)          } },
            { /* =>      */ { TINY_MAXx4,         TINY_MAXx4         } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0) } },
            { /*src2     */ { FP64_2(0),          FP64_2(0)          } },
            { /* =>      */ { FP64_ROW_UNUSED } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0) } },
            { /*src2     */ { FP64_2(0),          FP64_2(0)          } },
            { /* =>      */ { TINY_MINx4,         TINY_MINx4         } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(0) } },
            { /*src2     */ { FP64_2(0),          FP64_2(0)          } },
            { /* =>      */ { FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0) } },
            { /*src2     */ { FP64_2(0),          FP64_2(0)          } },
            { /* =>      */ { FP64_ROW_UNUSED } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_DENORM_MIN(0), FP64_DENORM_MIN(0) } },
            { /*src2     */ { FP64_2(0),          FP64_2(0)          } },
            { /* =>      */ { FP64_0(0),          FP64_0(0)          } },
              /*mxcsr:in */ X86_MXCSR_UM | X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_FZ | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
#undef  TINY_MAXx4
#undef  TINY_MINx4
   /*
    * Invalids.
    */
 /*20|21*/{ { /*src1     */ { FP64_QNAN_V0(0), FP64_QNAN_V2(1) } },
            { /*src2     */ { FP64_QNAN(1),    FP64_QNAN_V1(0) } },
            { /* =>      */ { FP64_QNAN(1),    FP64_QNAN_V1(0) } },
              /*mxcsr:in */ 0,                                /* output equals src2 input -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_QNAN_V0(0), FP64_QNAN_V2(1) } },
            { /*src2     */ { FP64_2(1),       FP64_2(0)       } },
            { /* =>      */ { FP64_QNAN_V0(0), FP64_QNAN_V2(1) } },
              /*mxcsr:in */ 0,                                /* output equals src1 input -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_1(0),       FP64_QNAN_V3(0) } },
            { /*src2     */ { FP64_1(0),       FP64_1(0)       } },
            { /* =>      */ { FP64_QNAN_V3(0), FP64_QNAN_V3(0) } },
              /*mxcsr:in */ 0,                                /* output equals src1 NaN duplicated -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_QNAN(0), FP64_1(0)    } },
            { /*src2     */ { FP64_1(0),    FP64_1(0)    } },
            { /* =>      */ { FP64_QNAN(0), FP64_QNAN(0) } },
              /*mxcsr:in */ 0,                                /* output equals src1 NaN duplicated -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_1(0),       FP64_1(0)       } },
            { /*src2     */ { FP64_1(0),       FP64_QNAN_V1(0) } },
            { /* =>      */ { FP64_QNAN_V1(0), FP64_QNAN_V1(0) } },
              /*mxcsr:in */ 0,                                /* output equals src2 NaN duplicated -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_1(0),    FP64_1(0)    } },
            { /*src2     */ { FP64_QNAN(1), FP64_1(0)    } },
            { /* =>      */ { FP64_QNAN(1), FP64_QNAN(1) } },
              /*mxcsr:in */ 0,                                /* output equals src2 NaN duplicated -- result from i7-10700 */
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /*src1     */ { FP64_SNAN_V0(0),  FP64_SNAN_V2(1) } },
            { /*src2     */ { FP64_SNAN(1),     FP64_SNAN_V1(0) } },
            { /* =>      */ { FP64_QNAN_V(1,1), FP64_QNAN_V1(0) } },
              /*mxcsr:in */ 0,                                /* output equals src2 input, quieted -- result from i7-10700 */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_SNAN_V0(0), FP64_SNAN_V2(1) } },
            { /*src2     */ { FP64_2(1),       FP64_2(0)       } },
            { /* =>      */ { FP64_QNAN_V0(0), FP64_QNAN_V2(1) } },
              /*mxcsr:in */ 0,                                /* output equals src1 input, quieted -- result from i7-10700 */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_1(0),       FP64_SNAN_V3(0) } },
            { /*src2     */ { FP64_1(0),       FP64_1(0)       } },
            { /* =>      */ { FP64_QNAN_V3(0), FP64_QNAN_V3(0) } },
              /*mxcsr:in */ 0,                                /* output equals src1 NaN duplicated, quieted -- result from i7-10700 */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_SNAN(0),     FP64_1(0)        } },
            { /*src2     */ { FP64_1(0),        FP64_1(0)        } },
            { /* =>      */ { FP64_QNAN_V(0,1), FP64_QNAN_V(0,1) } },
              /*mxcsr:in */ 0,                                /* output equals src1 NaN duplicated, quieted -- result from i7-10700 */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_1(0),       FP64_1(0)       } },
            { /*src2     */ { FP64_1(0),       FP64_SNAN_V1(0) } },
            { /* =>      */ { FP64_QNAN_V1(0), FP64_QNAN_V1(0) } },
              /*mxcsr:in */ 0,                                /* output equals src2 NaN duplicated, quieted -- result from i7-10700 */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /*src1     */ { FP64_1(0),        FP64_1(0)        } },
            { /*src2     */ { FP64_SNAN(1),     FP64_1(0)        } },
            { /* =>      */ { FP64_QNAN_V(1,1), FP64_QNAN_V(1,1) } },
              /*mxcsr:in */ 0,                                /* output equals src2 NaN duplicated, quieted -- result from i7-10700 */
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesSR[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*unused   */ { FP64_ROW_UNUSED } },
            { /*src1     */ { FP64_0(0), FP64_0(0) } },
            { /* =>      */ { FP64_0(0), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 1*/{ { /*src1     */ { FP64_ROW_UNUSED } },
            { /*unused   */ { FP64_INF(0), FP64_INF(1) } },
            { /* =>      */ { FP64_0(0),   FP64_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(dppd_XMM1_XMM2_000h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues00) },
        { BS3_INSTR4_ALL(dppd_XMM1_XMM2_022h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues22) },
        { BS3_INSTR4_ALL(dppd_XMM1_XMM2_0FFh),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesFF) },
        { BS3_INSTR4_ALL(dppd_XMM1_FSxBX_000h),       255, RM_MEM, T_SSE4_1,  XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues00) },
        { BS3_INSTR4_ALL(dppd_XMM1_FSxBX_022h),       255, RM_MEM, T_SSE4_1,  XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues22) },
        { BS3_INSTR4_ALL(dppd_XMM1_FSxBX_0FFh),       255, RM_MEM, T_SSE4_1,  XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesFF) },
        { BS3_INSTR4_C64(dppd_XMM8_XMM9_022h),        255, RM_REG, T_SSE4_1,  XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValues22) },
        { BS3_INSTR4_C64(dppd_XMM8_FSxBX_022h),       255, RM_MEM, T_SSE4_1,  XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues22) },

        { BS3_INSTR4_ALL(vdppd_XMM1_XMM2_XMM3_000h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues00) },
        { BS3_INSTR4_ALL(vdppd_XMM1_XMM2_XMM3_022h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValues22) },
        { BS3_INSTR4_ALL(vdppd_XMM1_XMM2_XMM3_0FFh),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesFF) },
        { BS3_INSTR4_ALL(vdppd_XMM1_XMM2_FSxBX_000h), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues00) },
        { BS3_INSTR4_ALL(vdppd_XMM1_XMM2_FSxBX_022h), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues22) },
        { BS3_INSTR4_ALL(vdppd_XMM1_XMM2_FSxBX_0FFh), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValuesFF) },
        { BS3_INSTR4_C64(vdppd_XMM8_XMM9_XMM10_022h), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValues22) },
        { BS3_INSTR4_C64(vdppd_XMM8_XMM9_FSxBX_022h), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues22) },

        { BS3_INSTR4_ALL(dppd_XMM1_XMM1_022h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(dppd_XMM8_XMM8_022h),        255, RM_REG, T_SSE4_1,  XMM8, XMM8, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },

        { BS3_INSTR4_ALL(vdppd_XMM1_XMM1_XMM1_022h),  255, RM_REG, T_AVX_128, XMM1, XMM1, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vdppd_XMM1_XMM1_XMM2_022h),  255, RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValues22) },
        { BS3_INSTR4_ALL(vdppd_XMM1_XMM2_XMM1_022h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM1,  PASS_TEST_ARRAY(s_aValues22) },
        { BS3_INSTR4_ALL(vdppd_XMM1_XMM2_XMM2_022h),  255, RM_REG, T_AVX_128, XMM1, XMM2, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vdppd_XMM1_XMM1_FSxBX_022h), 255, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues22) },
        { BS3_INSTR4_C64(vdppd_XMM8_XMM8_XMM8_022h),  255, RM_REG, T_AVX_128, XMM8, XMM8, NOREG, PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vdppd_XMM8_XMM8_FSxBX_022h), 255, RM_MEM, T_AVX_128, XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues22) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig4));
}


/* Constants for testing rounding: 0.1, 0.5, slightly below and above 0.5, 0.9;
 * a moderately large value well within the range where the FP format can still
 * represent every integer exactly + .1, .5, .9; and an integer which is beyond
 * the safe integer range.
 */

#define FP32_0_1(a_Sign)      FP32_V(a_Sign,0x4ccccd,0x7b)          /* 0.1 */
#define FP32_0_5_DN(a_Sign)   FP32_V(a_Sign,0x7fffff,0x7d)          /* 0.5[DN] */
#define FP32_0_5(a_Sign)      FP32_V(a_Sign,0,0x7e)                 /* 0.5 */
#define FP32_0_5_UP(a_Sign)   FP32_V(a_Sign,1,0x7e)                 /* 0.5[UP] */
#define FP32_0_9(a_Sign)      FP32_V(a_Sign,0x666666,0x7e)          /* 0.9 */
#define FP32_12_67_0(a_Sign)  FP32_V(a_Sign,0x16b438,0x93)          /* 1234567.0 */
#define FP32_12_67_1(a_Sign)  FP32_V(a_Sign,0x16b439,0x93)          /* 1234567.1 */
#define FP32_12_67_5(a_Sign)  FP32_V(a_Sign,0x16b43c,0x93)          /* 1234567.5 */
#define FP32_12_67_9(a_Sign)  FP32_V(a_Sign,0x16b43f,0x93)          /* 1234567.9 */
#define FP32_12_68_0(a_Sign)  FP32_V(a_Sign,0x16b440,0x93)          /* 1234568.0 */
#define FP32_BIG_INT(a_Sign)  FP32_V(a_Sign,2,0x97)                 /* 16777220.0*/

#define FP64_0_1(a_Sign)      FP64_V(a_Sign,0x999999999999a,0x3fb)  /* 0.1 */
#define FP64_0_5_DN(a_Sign)   FP64_V(a_Sign,0xfffffffffffff,0x3fd)  /* 0.5[DN] */
#define FP64_0_5(a_Sign)      FP64_V(a_Sign,0,0x3fe)                /* 0.5 */
#define FP64_0_5_UP(a_Sign)   FP64_V(a_Sign,1,0x3fe)                /* 0.5[UP] */
#define FP64_0_9(a_Sign)      FP64_V(a_Sign,0xccccccccccccd,0x3fe)  /* 0.9 */
#define FP64_12_89_0(a_Sign)  FP64_V(a_Sign,0xd6f3454000000,0x419)  /* 123456789.0 */
#define FP64_12_89_1(a_Sign)  FP64_V(a_Sign,0xd6f3454666666,0x419)  /* 123456789.1 */
#define FP64_12_89_5(a_Sign)  FP64_V(a_Sign,0xd6f3456000000,0x419)  /* 123456789.5 */
#define FP64_12_89_9(a_Sign)  FP64_V(a_Sign,0xd6f345799999a,0x419)  /* 123456789.9 */
#define FP64_12_90_0(a_Sign)  FP64_V(a_Sign,0xd6f3458000000,0x419)  /* 123456790.0 */
#define FP64_BIG_INT(a_Sign)  FP64_V(a_Sign,2,0x434)                /* 9007199254740996.0 */

/*
 * [V]ROUNDPS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_roundps(uint8_t bMode)
{
    /** quiet PE + round toward nearest (even) */
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValuesNE[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 1*/{ { /*src1     */ { FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0), FP32_INF(1), FP32_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 2*/{ { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_1(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_1(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_1(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_1(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_0_5_DN(0), FP32_0_5(0), FP32_0_5_UP(0), FP32_2(1), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_2(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),      FP32_0(0),   FP32_1(0),      FP32_2(1), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP32_0_5_DN(0), FP32_0_5(0), FP32_0_5_UP(0), FP32_2(1), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_2(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),      FP32_0(0),   FP32_1(0),      FP32_2(1), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_0_5_DN(0), FP32_0_5(0), FP32_0_5_UP(0), FP32_2(1), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_2(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),      FP32_0(0),   FP32_1(0),      FP32_2(1), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_0_5_DN(0), FP32_0_5(0), FP32_0_5_UP(0), FP32_2(1), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_2(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),      FP32_0(0),   FP32_1(0),      FP32_2(1), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_12_67_1(0), FP32_12_67_5(0), FP32_12_67_9(0), FP32_1(1), FP32_12_67_1(1), FP32_12_67_5(1), FP32_12_67_9(1), FP32_1(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_67_0(0), FP32_12_68_0(0), FP32_12_68_0(0), FP32_1(1), FP32_12_67_0(1), FP32_12_68_0(1), FP32_12_68_0(1), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP32_12_67_1(0), FP32_12_67_5(0), FP32_12_67_9(0), FP32_1(1), FP32_12_67_1(1), FP32_12_67_5(1), FP32_12_67_9(1), FP32_1(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_67_0(0), FP32_12_68_0(0), FP32_12_68_0(0), FP32_1(1), FP32_12_67_0(1), FP32_12_68_0(1), FP32_12_68_0(1), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_12_67_1(0), FP32_12_67_5(0), FP32_12_67_9(0), FP32_1(1), FP32_12_67_1(1), FP32_12_67_5(1), FP32_12_67_9(1), FP32_1(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_67_0(0), FP32_12_68_0(0), FP32_12_68_0(0), FP32_1(1), FP32_12_67_0(1), FP32_12_68_0(1), FP32_12_68_0(1), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_12_67_1(0), FP32_12_67_5(0), FP32_12_67_9(0), FP32_1(1), FP32_12_67_1(1), FP32_12_67_5(1), FP32_12_67_9(1), FP32_1(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_67_0(0), FP32_12_68_0(0), FP32_12_68_0(0), FP32_1(1), FP32_12_67_0(1), FP32_12_68_0(1), FP32_12_68_0(1), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    };
    /** quiet PE + round toward negative infinity */
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValuesNI[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 1*/{ { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_BIG_INT(0), FP32_1(1),   FP32_1(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_BIG_INT(0), FP32_1(1),   FP32_1(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_BIG_INT(0), FP32_1(1),   FP32_1(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_BIG_INT(0), FP32_1(1),   FP32_1(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_0_5_DN(0), FP32_0_5(0), FP32_0_5_UP(0), FP32_2(1), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_2(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),      FP32_0(0),   FP32_0(0),      FP32_2(1), FP32_1(1),   FP32_1(1),   FP32_1(1),   FP32_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP32_12_67_1(0), FP32_12_67_5(0), FP32_12_67_9(0), FP32_1(1), FP32_12_67_1(1), FP32_12_67_5(1), FP32_12_67_9(1), FP32_1(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_67_0(0), FP32_12_67_0(0), FP32_12_67_0(0), FP32_1(1), FP32_12_68_0(1), FP32_12_68_0(1), FP32_12_68_0(1), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    };
    /** quiet PE + round toward positive infinity */
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValuesPI[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 1*/{ { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_1(0),   FP32_1(0),   FP32_1(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_1(0),   FP32_1(0),   FP32_1(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_1(0),   FP32_1(0),   FP32_1(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_1(0),   FP32_1(0),   FP32_1(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_0_5_DN(0), FP32_0_5(0), FP32_0_5_UP(0), FP32_2(1), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_2(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_1(0),      FP32_1(0),   FP32_1(0),      FP32_2(1), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_12_67_1(0), FP32_12_67_5(0), FP32_12_67_9(0), FP32_1(1), FP32_12_67_1(1), FP32_12_67_5(1), FP32_12_67_9(1), FP32_1(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_68_0(0), FP32_12_68_0(0), FP32_12_68_0(0), FP32_1(1), FP32_12_67_0(1), FP32_12_67_0(1), FP32_12_67_0(1), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    };
    /** quiet PE + round toward zero */
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValuesZR[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 1*/{ { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_0_5_DN(0), FP32_0_5(0), FP32_0_5_UP(0), FP32_2(1), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_2(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),      FP32_0(0),   FP32_0(0),      FP32_2(1), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP32_12_67_1(0), FP32_12_67_5(0), FP32_12_67_9(0), FP32_1(1), FP32_12_67_1(1), FP32_12_67_5(1), FP32_12_67_9(1), FP32_1(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_67_0(0), FP32_12_67_0(0), FP32_12_67_0(0), FP32_1(1), FP32_12_67_0(1), FP32_12_67_0(1), FP32_12_67_0(1), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
    };
    /** quiet PE + rounding controlled by MXCSR */
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValuesMX[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 1*/{ { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_1(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_BIG_INT(0), FP32_1(1),   FP32_1(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_1(0),   FP32_1(0),   FP32_1(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_0_5_DN(0), FP32_0_5(0), FP32_0_5_UP(0), FP32_2(1), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_2(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),      FP32_0(0),   FP32_1(0),      FP32_2(1), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP32_0_5_DN(0), FP32_0_5(0), FP32_0_5_UP(0), FP32_2(1), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_2(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),      FP32_0(0),   FP32_0(0),      FP32_2(1), FP32_1(1),   FP32_1(1),   FP32_1(1),   FP32_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_0_5_DN(0), FP32_0_5(0), FP32_0_5_UP(0), FP32_2(1), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_2(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_1(0),      FP32_1(0),   FP32_1(0),      FP32_2(1), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_0_5_DN(0), FP32_0_5(0), FP32_0_5_UP(0), FP32_2(1), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_2(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),      FP32_0(0),   FP32_0(0),      FP32_2(1), FP32_0(1),   FP32_0(1),   FP32_0(1),   FP32_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_12_67_1(0), FP32_12_67_5(0), FP32_12_67_9(0), FP32_1(1), FP32_12_67_1(1), FP32_12_67_5(1), FP32_12_67_9(1), FP32_1(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_67_0(0), FP32_12_68_0(0), FP32_12_68_0(0), FP32_1(1), FP32_12_67_0(1), FP32_12_68_0(1), FP32_12_68_0(1), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP32_12_67_1(0), FP32_12_67_5(0), FP32_12_67_9(0), FP32_1(1), FP32_12_67_1(1), FP32_12_67_5(1), FP32_12_67_9(1), FP32_1(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_67_0(0), FP32_12_67_0(0), FP32_12_67_0(0), FP32_1(1), FP32_12_68_0(1), FP32_12_68_0(1), FP32_12_68_0(1), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_12_67_1(0), FP32_12_67_5(0), FP32_12_67_9(0), FP32_1(1), FP32_12_67_1(1), FP32_12_67_5(1), FP32_12_67_9(1), FP32_1(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_68_0(0), FP32_12_68_0(0), FP32_12_68_0(0), FP32_1(1), FP32_12_67_0(1), FP32_12_67_0(1), FP32_12_67_0(1), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_12_67_1(0), FP32_12_67_5(0), FP32_12_67_9(0), FP32_1(1), FP32_12_67_1(1), FP32_12_67_5(1), FP32_12_67_9(1), FP32_1(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_67_0(0), FP32_12_67_0(0), FP32_12_67_0(0), FP32_1(1), FP32_12_67_0(1), FP32_12_67_0(1), FP32_12_67_0(1), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    };
    /** raise PE + round toward nearest (even) */
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValuesPE[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals & Precision.
     */
    /* 1*/{ { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_1(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP32_0_5_DN(0), FP32_0_5(0), FP32_0_5_UP(0), FP32_2(1), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_2(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),      FP32_0(0),   FP32_1(0),      FP32_2(1), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP },
          { { /*src1     */ { FP32_12_67_1(0), FP32_12_67_5(0), FP32_12_67_9(0), FP32_1(1), FP32_12_67_1(1), FP32_12_67_5(1), FP32_12_67_9(1), FP32_1(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_67_0(0), FP32_12_68_0(0), FP32_12_68_0(0), FP32_1(1), FP32_12_67_0(1), FP32_12_68_0(1), FP32_12_68_0(1), FP32_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP32_12_67_0(0), FP32_12_68_0(0), FP32_2(0), FP32_BIG_INT(1), FP32_12_67_0(1), FP32_12_68_0(1), FP32_2(1), FP32_BIG_INT(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_12_67_0(0), FP32_12_68_0(0), FP32_2(0), FP32_BIG_INT(1), FP32_12_67_0(1), FP32_12_68_0(1), FP32_2(1), FP32_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
    };
    /** quiet PE + rounding controlled by MXCSR (reserved encoding) */
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValuesNV[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 1*/{ { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_1(0),   FP32_BIG_INT(0), FP32_0(1),   FP32_0(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP32_0_1(0), FP32_0_5(0), FP32_0_9(0), FP32_BIG_INT(0), FP32_0_1(1), FP32_0_5(1), FP32_0_9(1), FP32_BIG_INT(1) } },
            { /*unused   */ { FP32_ROW_UNUSED } },
            { /* =>      */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_BIG_INT(0), FP32_1(1),   FP32_1(1),   FP32_1(1),   FP32_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(roundps_XMM1_XMM1_008h),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(roundps_XMM1_XMM2_000h),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesPE) },
        { BS3_INSTR4_ALL(roundps_XMM1_XMM2_008h),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(roundps_XMM1_XMM2_009h),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesNI) },
        { BS3_INSTR4_ALL(roundps_XMM1_XMM2_00ah),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesPI) },
        { BS3_INSTR4_ALL(roundps_XMM1_XMM2_00bh),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesZR) },
        { BS3_INSTR4_ALL(roundps_XMM1_XMM2_00ch),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundps_XMM1_XMM2_00dh),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundps_XMM1_XMM2_00eh),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundps_XMM1_XMM2_00fh),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundps_XMM1_XMM2_0ffh),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesNV) },
        { BS3_INSTR4_ALL(roundps_XMM1_FSxBX_008h),  255, RM_MEM, T_SSE4_1,  XMM1, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(roundps_XMM8_XMM8_008h),   255, RM_REG, T_SSE4_1,  XMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(roundps_XMM8_XMM9_008h),   255, RM_REG, T_SSE4_1,  XMM8, NOREG, XMM9,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(roundps_XMM8_FSxBX_008h),  255, RM_MEM, T_SSE4_1,  XMM8, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },

        { BS3_INSTR4_ALL(vroundps_XMM1_XMM1_008h),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundps_XMM1_XMM2_000h),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesPE) },
        { BS3_INSTR4_ALL(vroundps_XMM1_XMM2_008h),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundps_XMM1_XMM2_009h),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesNI) },
        { BS3_INSTR4_ALL(vroundps_XMM1_XMM2_00ah),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesPI) },
        { BS3_INSTR4_ALL(vroundps_XMM1_XMM2_00bh),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesZR) },
        { BS3_INSTR4_ALL(vroundps_XMM1_XMM2_00ch),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundps_XMM1_XMM2_00dh),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundps_XMM1_XMM2_00eh),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundps_XMM1_XMM2_00fh),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundps_XMM1_XMM2_0ffh),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesNV) },
        { BS3_INSTR4_ALL(vroundps_XMM1_FSxBX_008h), 255, RM_MEM, T_AVX_128, XMM1, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundps_XMM8_XMM8_008h),  255, RM_REG, T_AVX_128, XMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundps_XMM8_XMM9_008h),  255, RM_REG, T_AVX_128, XMM8, NOREG, XMM9,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundps_XMM8_FSxBX_008h), 255, RM_MEM, T_AVX_128, XMM8, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },

        { BS3_INSTR4_ALL(vroundps_YMM1_YMM1_008h),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM1,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundps_YMM1_YMM2_000h),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesPE) },
        { BS3_INSTR4_ALL(vroundps_YMM1_YMM2_008h),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundps_YMM1_YMM2_009h),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesNI) },
        { BS3_INSTR4_ALL(vroundps_YMM1_YMM2_00ah),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesPI) },
        { BS3_INSTR4_ALL(vroundps_YMM1_YMM2_00bh),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesZR) },
        { BS3_INSTR4_ALL(vroundps_YMM1_YMM2_00ch),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundps_YMM1_YMM2_00dh),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundps_YMM1_YMM2_00eh),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundps_YMM1_YMM2_00fh),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundps_YMM1_YMM2_0ffh),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesNV) },
        { BS3_INSTR4_ALL(vroundps_YMM1_FSxBX_008h), 255, RM_MEM, T_AVX_256, YMM1, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundps_YMM8_YMM8_008h),  255, RM_REG, T_AVX_256, YMM8, NOREG, YMM8,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundps_YMM8_YMM9_008h),  255, RM_REG, T_AVX_256, YMM8, NOREG, YMM9,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundps_YMM8_FSxBX_008h), 255, RM_MEM, T_AVX_256, YMM8, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * [V]ROUNDPD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_roundpd(uint8_t bMode)
{
    /** quiet PE + round toward nearest (even) */
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesNE[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 1*/{ { /*src1     */ { FP64_INF(0), FP64_INF(1), FP64_INF(1), FP64_INF(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_INF(0), FP64_INF(1), FP64_INF(1), FP64_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 2*/{ { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_1(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_1(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_1(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_1(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0_5_DN(0), FP64_0_5(0), FP64_0_5_UP(0), FP64_2(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),      FP64_0(0),   FP64_1(0),      FP64_2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_2(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_5_DN(0), FP64_0_5(0), FP64_0_5_UP(0), FP64_2(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),      FP64_0(0),   FP64_1(0),      FP64_2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_2(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_5_DN(0), FP64_0_5(0), FP64_0_5_UP(0), FP64_2(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),      FP64_0(0),   FP64_1(0),      FP64_2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_2(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_5_DN(0), FP64_0_5(0), FP64_0_5_UP(0), FP64_2(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),      FP64_0(0),   FP64_1(0),      FP64_2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_2(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_12_89_1(0), FP64_12_89_5(0), FP64_12_89_9(0), FP64_1(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(0), FP64_12_90_0(0), FP64_12_90_0(0), FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_12_89_1(1), FP64_12_89_5(1), FP64_12_89_9(1), FP64_1(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(1), FP64_12_90_0(1), FP64_12_90_0(1), FP64_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_12_89_1(0), FP64_12_89_5(0), FP64_12_89_9(0), FP64_1(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(0), FP64_12_90_0(0), FP64_12_90_0(0), FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_12_89_1(1), FP64_12_89_5(1), FP64_12_89_9(1), FP64_1(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(1), FP64_12_90_0(1), FP64_12_90_0(1), FP64_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_12_89_1(0), FP64_12_89_5(0), FP64_12_89_9(0), FP64_1(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(0), FP64_12_90_0(0), FP64_12_90_0(0), FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_12_89_1(1), FP64_12_89_5(1), FP64_12_89_9(1), FP64_1(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(1), FP64_12_90_0(1), FP64_12_90_0(1), FP64_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_12_89_1(0), FP64_12_89_5(0), FP64_12_89_9(0), FP64_1(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(0), FP64_12_90_0(0), FP64_12_90_0(0), FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_12_89_1(1), FP64_12_89_5(1), FP64_12_89_9(1), FP64_1(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(1), FP64_12_90_0(1), FP64_12_90_0(1), FP64_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    };
    /** quiet PE + round toward negative infinity */
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesNI[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 1*/{ { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(1),   FP64_1(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(1),   FP64_1(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(1),   FP64_1(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(1),   FP64_1(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0_5_DN(0), FP64_0_5(0), FP64_0_5_UP(0), FP64_2(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),      FP64_0(0),   FP64_0(0),      FP64_2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_2(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(1),   FP64_1(1),   FP64_1(1),   FP64_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_12_89_1(0), FP64_12_89_5(0), FP64_12_89_9(0), FP64_1(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(0), FP64_12_89_0(0), FP64_12_89_0(0), FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_12_89_1(1), FP64_12_89_5(1), FP64_12_89_9(1), FP64_1(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_90_0(1), FP64_12_90_0(1), FP64_12_90_0(1), FP64_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    };
    /** quiet PE + round toward positive infinity */
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesPI[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 1*/{ { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(0),   FP64_1(0),   FP64_1(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(0),   FP64_1(0),   FP64_1(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(0),   FP64_1(0),   FP64_1(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(0),   FP64_1(0),   FP64_1(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0_5_DN(0), FP64_0_5(0), FP64_0_5_UP(0), FP64_2(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(0),      FP64_1(0),   FP64_1(0),      FP64_2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_2(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_12_89_1(0), FP64_12_89_5(0), FP64_12_89_9(0), FP64_1(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_90_0(0), FP64_12_90_0(0), FP64_12_90_0(0), FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_12_89_1(1), FP64_12_89_5(1), FP64_12_89_9(1), FP64_1(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(1), FP64_12_89_0(1), FP64_12_89_0(1), FP64_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    };
    /** quiet PE + round toward zero */
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesZR[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 1*/{ { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0_5_DN(0), FP64_0_5(0), FP64_0_5_UP(0), FP64_2(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),      FP64_0(0),   FP64_0(0),      FP64_2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_2(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_12_89_1(0), FP64_12_89_5(0), FP64_12_89_9(0), FP64_1(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(0), FP64_12_89_0(0), FP64_12_89_0(0), FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_12_89_1(1), FP64_12_89_5(1), FP64_12_89_9(1), FP64_1(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(1), FP64_12_89_0(1), FP64_12_89_0(1), FP64_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
    };
    /** quiet PE + rounding controlled by MXCSR */
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesMX[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 1*/{ { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_1(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(1),   FP64_1(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(0),   FP64_1(0),   FP64_1(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0_5_DN(0), FP64_0_5(0), FP64_0_5_UP(0), FP64_2(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),      FP64_0(0),   FP64_1(0),      FP64_2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_2(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_5_DN(0), FP64_0_5(0), FP64_0_5_UP(0), FP64_2(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),      FP64_0(0),   FP64_0(0),      FP64_2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_2(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(1),   FP64_1(1),   FP64_1(1),   FP64_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_5_DN(0), FP64_0_5(0), FP64_0_5_UP(0), FP64_2(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(0),      FP64_1(0),   FP64_1(0),      FP64_2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_2(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_5_DN(0), FP64_0_5(0), FP64_0_5_UP(0), FP64_2(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),      FP64_0(0),   FP64_0(0),      FP64_2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_2(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_0(1),   FP64_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_12_89_1(0), FP64_12_89_5(0), FP64_12_89_9(0), FP64_1(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(0), FP64_12_90_0(0), FP64_12_90_0(0), FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_12_89_1(1), FP64_12_89_5(1), FP64_12_89_9(1), FP64_1(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(1), FP64_12_90_0(1), FP64_12_90_0(1), FP64_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_12_89_1(0), FP64_12_89_5(0), FP64_12_89_9(0), FP64_1(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(0), FP64_12_89_0(0), FP64_12_89_0(0), FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_12_89_1(1), FP64_12_89_5(1), FP64_12_89_9(1), FP64_1(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_90_0(1), FP64_12_90_0(1), FP64_12_90_0(1), FP64_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_12_89_1(0), FP64_12_89_5(0), FP64_12_89_9(0), FP64_1(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_90_0(0), FP64_12_90_0(0), FP64_12_90_0(0), FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_12_89_1(1), FP64_12_89_5(1), FP64_12_89_9(1), FP64_1(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(1), FP64_12_89_0(1), FP64_12_89_0(1), FP64_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_12_89_1(0), FP64_12_89_5(0), FP64_12_89_9(0), FP64_1(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(0), FP64_12_89_0(0), FP64_12_89_0(0), FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_12_89_1(1), FP64_12_89_5(1), FP64_12_89_9(1), FP64_1(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(1), FP64_12_89_0(1), FP64_12_89_0(1), FP64_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    };
    /** raise PE + round toward nearest (even) */
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesPE[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals & Precision.
     */
    /* 1*/{ { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_1(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_5_DN(0), FP64_0_5(0), FP64_0_5_UP(0), FP64_2(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),      FP64_0(0),   FP64_1(0),      FP64_2(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_2(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_2(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,                /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP },
          { { /*src1     */ { FP64_12_89_1(0), FP64_12_89_5(0), FP64_12_89_9(0), FP64_1(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(0), FP64_12_90_0(0), FP64_12_90_0(0), FP64_1(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_12_89_1(1), FP64_12_89_5(1), FP64_12_89_9(1), FP64_1(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(1), FP64_12_90_0(1), FP64_12_90_0(1), FP64_1(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,              /* MXCSR overridden by instruction */
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO },
          { { /*src1     */ { FP64_12_89_0(0), FP64_12_90_0(0), FP64_2(0), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(0), FP64_12_90_0(0), FP64_2(0), FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_12_89_0(1), FP64_12_90_0(1), FP64_2(1), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_12_89_0(1), FP64_12_90_0(1), FP64_2(1), FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,           /* rounding mode affirmed by instruction */
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
    };
    /** quiet PE + rounding controlled by MXCSR (reserved encoding) */
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesNV[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*src1     */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 1*/{ { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_1(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(1),   FP64_0(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_NEAREST,
              /*128:out  */ X86_MXCSR_RC_NEAREST,
              /*256:out  */ X86_MXCSR_RC_NEAREST },
          { { /*src1     */ { FP64_0_1(0), FP64_0_5(0), FP64_0_9(0), FP64_BIG_INT(0) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_0(0),   FP64_0(0),   FP64_0(0),   FP64_BIG_INT(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /*src1     */ { FP64_0_1(1), FP64_0_5(1), FP64_0_9(1), FP64_BIG_INT(1) } },
            { /*unused   */ { FP64_ROW_UNUSED } },
            { /* =>      */ { FP64_1(1),   FP64_1(1),   FP64_1(1),   FP64_BIG_INT(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(roundpd_XMM1_XMM1_008h),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(roundpd_XMM1_XMM2_000h),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesPE) },
        { BS3_INSTR4_ALL(roundpd_XMM1_XMM2_008h),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(roundpd_XMM1_XMM2_009h),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesNI) },
        { BS3_INSTR4_ALL(roundpd_XMM1_XMM2_00ah),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesPI) },
        { BS3_INSTR4_ALL(roundpd_XMM1_XMM2_00bh),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesZR) },
        { BS3_INSTR4_ALL(roundpd_XMM1_XMM2_00ch),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundpd_XMM1_XMM2_00dh),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundpd_XMM1_XMM2_00eh),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundpd_XMM1_XMM2_00fh),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundpd_XMM1_XMM2_0ffh),   255, RM_REG, T_SSE4_1,  XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesNV) },
        { BS3_INSTR4_ALL(roundpd_XMM1_FSxBX_008h),  255, RM_MEM, T_SSE4_1,  XMM1, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(roundpd_XMM8_XMM8_008h),   255, RM_REG, T_SSE4_1,  XMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(roundpd_XMM8_XMM9_008h),   255, RM_REG, T_SSE4_1,  XMM8, NOREG, XMM9,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(roundpd_XMM8_FSxBX_008h),  255, RM_MEM, T_SSE4_1,  XMM8, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },

        { BS3_INSTR4_ALL(vroundpd_XMM1_XMM1_008h),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundpd_XMM1_XMM2_000h),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesPE) },
        { BS3_INSTR4_ALL(vroundpd_XMM1_XMM2_008h),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundpd_XMM1_XMM2_009h),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesNI) },
        { BS3_INSTR4_ALL(vroundpd_XMM1_XMM2_00ah),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesPI) },
        { BS3_INSTR4_ALL(vroundpd_XMM1_XMM2_00bh),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesZR) },
        { BS3_INSTR4_ALL(vroundpd_XMM1_XMM2_00ch),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundpd_XMM1_XMM2_00dh),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundpd_XMM1_XMM2_00eh),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundpd_XMM1_XMM2_00fh),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundpd_XMM1_XMM2_0ffh),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesNV) },
        { BS3_INSTR4_ALL(vroundpd_XMM1_FSxBX_008h), 255, RM_MEM, T_AVX_128, XMM1, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundpd_XMM8_XMM8_008h),  255, RM_REG, T_AVX_128, XMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundpd_XMM8_XMM9_008h),  255, RM_REG, T_AVX_128, XMM8, NOREG, XMM9,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundpd_XMM8_FSxBX_008h), 255, RM_MEM, T_AVX_128, XMM8, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },

        { BS3_INSTR4_ALL(vroundpd_YMM1_YMM1_008h),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM1,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundpd_YMM1_YMM2_000h),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesPE) },
        { BS3_INSTR4_ALL(vroundpd_YMM1_YMM2_008h),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundpd_YMM1_YMM2_009h),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesNI) },
        { BS3_INSTR4_ALL(vroundpd_YMM1_YMM2_00ah),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesPI) },
        { BS3_INSTR4_ALL(vroundpd_YMM1_YMM2_00bh),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesZR) },
        { BS3_INSTR4_ALL(vroundpd_YMM1_YMM2_00ch),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundpd_YMM1_YMM2_00dh),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundpd_YMM1_YMM2_00eh),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundpd_YMM1_YMM2_00fh),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundpd_YMM1_YMM2_0ffh),  255, RM_REG, T_AVX_256, YMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesNV) },
        { BS3_INSTR4_ALL(vroundpd_YMM1_FSxBX_008h), 255, RM_MEM, T_AVX_256, YMM1, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundpd_YMM8_YMM8_008h),  255, RM_REG, T_AVX_256, YMM8, NOREG, YMM8,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundpd_YMM8_YMM9_008h),  255, RM_REG, T_AVX_256, YMM8, NOREG, YMM9,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundpd_YMM8_FSxBX_008h), 255, RM_MEM, T_AVX_256, YMM8, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


typedef struct BS3CPUINSTR4_ROUNDSS_VALUES_T
{
    RTFLOAT32U          uSrc;
    RTFLOAT32U          uDst;
    uint16_t            uMxCsr;                 /**< MXCSR to set prior to executing the instruction. */
    uint16_t            u128ExpectedMxCsr;      /**< Expected MXCSR for a 128-bit instruction. */
} BS3CPUINSTR4_ROUNDSS_VALUES_T;

static DECLCALLBACK(PBS3CPUINSTR4_TEST1_VALUES_T) bs3CpuInstr4_WorkerTestType1_Provider_roundss(void *paValues, const unsigned cValues, const unsigned iVal)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T sValues;
    BS3CPUINSTR4_ROUNDSS_VALUES_T *psValuesIn = &((BS3CPUINSTR4_ROUNDSS_VALUES_T *)paValues)[iVal];
    unsigned iCnt;

    sValues.uSrc1.ar32[0] = psValuesIn->uSrc;
    sValues.uSrc2.ar32[0] = psValuesIn->uSrc;
    sValues.uDstOut.ar32[0] = psValuesIn->uDst;
    for (iCnt = 1; iCnt < RT_ELEMENTS(sValues.uSrc1.ymm.au32); iCnt++)
    {
        sValues.uSrc1.ymm.au32[iCnt] = bs3CpuInstrX_SimpleRand();
        sValues.uSrc2.ymm.au32[iCnt] = bs3CpuInstrX_SimpleRand();
        sValues.uDstOut.ymm.au32[iCnt] = sValues.uSrc1.ymm.au32[iCnt];
    }
    sValues.uMxCsr = psValuesIn->uMxCsr;
    sValues.u128ExpectedMxCsr = psValuesIn->u128ExpectedMxCsr;
    return (PBS3CPUINSTR4_TEST1_VALUES_T)&sValues;
}

/*
 * [V]ROUNDSS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_roundss(uint8_t bMode)
{
    /** quiet PE + round toward nearest (even) + main testing + plenty of testing instruction-overrides-MXCSR */
    static BS3CPUINSTR4_ROUNDSS_VALUES_T const s_aValuesNE[] =
    {
              /*src*/           /* => */         /*mxcsr:in*/          /*128:out*/
    /*
     * Zero.
     */
    /* 0*/{   FP32_0(0),        FP32_0(0),       0,                    0                    },
          {   FP32_0(1),        FP32_0(1),       0,                    0                    },
    /*
     * Infinity.
     */
    /* 2*/{   FP32_INF(0),      FP32_INF(0),     0,                    0                    },
          {   FP32_INF(1),      FP32_INF(1),     0,                    0                    },
    /*
     * Normals.
     */
    /* 4*/{    FP32_0_1(0),     FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_1(0),     FP32_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_0_1(1),     FP32_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_0_1(1),     FP32_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_0_9(0),     FP32_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_0_9(0),     FP32_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_9(1),     FP32_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_9(1),     FP32_1(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_1(0),       FP32_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_1(1),       FP32_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_12_67_1(0), FP32_12_67_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_12_67_1(0), FP32_12_67_0(0), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_12_67_1(1), FP32_12_67_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_1(1), FP32_12_67_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_12_67_5(0), FP32_12_68_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_12_67_5(0), FP32_12_68_0(0), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_5(1), FP32_12_68_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_12_67_5(1), FP32_12_68_0(1), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_9(0), FP32_12_68_0(0), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_9(0), FP32_12_68_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_12_67_9(1), FP32_12_68_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_9(1), FP32_12_68_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_2(0),       FP32_2(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_2(0),       FP32_2(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_2(1),       FP32_2(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_2(1),       FP32_2(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_BIG_INT(0), FP32_BIG_INT(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_BIG_INT(1), FP32_BIG_INT(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
    };
    /** quiet PE + round toward negative infinity */
    static BS3CPUINSTR4_ROUNDSS_VALUES_T const s_aValuesNI[] =
    {
    /*
     * Normals.
     */
    /* 0*/{    FP32_0_1(0),     FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_1(0),     FP32_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_0_1(1),     FP32_1(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_0_1(1),     FP32_1(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_0_5(1),     FP32_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_0_5(1),     FP32_1(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_UP(0),  FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_0_5_UP(0),  FP32_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_0_9(0),     FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_0_9(1),     FP32_1(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_1(0),       FP32_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_1(1),       FP32_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_12_67_1(0), FP32_12_67_0(0), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_12_67_1(1), FP32_12_68_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_12_67_5(0), FP32_12_67_0(0), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_5(1), FP32_12_68_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_12_67_9(0), FP32_12_67_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_12_67_9(1), FP32_12_68_0(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP,     }, /* MXCSR overridden by instruction */
          {    FP32_2(0),       FP32_2(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_2(1),       FP32_2(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_BIG_INT(0), FP32_BIG_INT(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_BIG_INT(1), FP32_BIG_INT(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
    };
    /** quiet PE + round toward positive infinity */
    static BS3CPUINSTR4_ROUNDSS_VALUES_T const s_aValuesPI[] =
    {
    /*
     * Normals.
     */
    /* 0*/{    FP32_0_1(0),     FP32_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_0_1(0),     FP32_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_0_1(1),     FP32_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_0_1(1),     FP32_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_0_5(0),     FP32_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_0_5(0),     FP32_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_DN(0),  FP32_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_DN(0),  FP32_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_0_9(0),     FP32_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_0_9(1),     FP32_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_1(0),       FP32_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_1(1),       FP32_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_12_67_1(0), FP32_12_68_0(0), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_12_67_1(1), FP32_12_67_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_12_67_5(0), FP32_12_68_0(0), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_5(1), FP32_12_67_0(1), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_9(0), FP32_12_68_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_12_67_9(1), FP32_12_67_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_2(0),       FP32_2(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_2(1),       FP32_2(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_BIG_INT(0), FP32_BIG_INT(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_BIG_INT(1), FP32_BIG_INT(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
    };
    /** quiet PE + round toward zero */
    static BS3CPUINSTR4_ROUNDSS_VALUES_T const s_aValuesZR[] =
    {
    /*
     * Normals.
     */
    /* 0*/{    FP32_0_1(0),     FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_0_1(0),     FP32_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_0_1(1),     FP32_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_0_1(1),     FP32_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_0_5_UP(0),  FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_0_5_UP(0),  FP32_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_0_9(0),     FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_0_9(1),     FP32_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_1(0),       FP32_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_1(1),       FP32_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_12_67_1(0), FP32_12_67_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_12_67_1(1), FP32_12_67_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_5(0), FP32_12_67_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_12_67_5(1), FP32_12_67_0(1), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_12_67_9(0), FP32_12_67_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_12_67_9(1), FP32_12_67_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP32_2(0),       FP32_2(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP32_2(1),       FP32_2(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_BIG_INT(0), FP32_BIG_INT(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP32_BIG_INT(1), FP32_BIG_INT(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
    };
    /** quiet PE + rounding controlled by MXCSR */
    static BS3CPUINSTR4_ROUNDSS_VALUES_T const s_aValuesMX[] =
    {
    /*
     * Normals.
     */
    /* 0*/{    FP32_0_1(0),     FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_1(0),     FP32_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_0_1(1),     FP32_1(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_0_1(1),     FP32_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_5(0),     FP32_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_0_5(1),     FP32_1(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_5_DN(0),  FP32_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_0_5_UP(0),  FP32_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_0_5_UP(0),  FP32_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_0_9(0),     FP32_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_0_9(0),     FP32_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_9(1),     FP32_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_9(1),     FP32_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_1(0),       FP32_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_1(1),       FP32_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_12_67_1(0), FP32_12_67_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_12_67_1(0), FP32_12_68_0(0), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_12_67_1(1), FP32_12_68_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_12_67_1(1), FP32_12_67_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_12_67_5(0), FP32_12_68_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_12_67_5(0), FP32_12_67_0(0), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_12_67_5(1), FP32_12_68_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_12_67_5(1), FP32_12_67_0(1), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_12_67_9(0), FP32_12_67_0(0), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_12_67_9(0), FP32_12_68_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_12_67_9(1), FP32_12_68_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_12_67_9(1), FP32_12_68_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_2(0),       FP32_2(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_2(0),       FP32_2(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_2(1),       FP32_2(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_2(1),       FP32_2(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_BIG_INT(0), FP32_BIG_INT(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_BIG_INT(1), FP32_BIG_INT(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
    };
    /** raise PE + round toward nearest (even) */
    static BS3CPUINSTR4_ROUNDSS_VALUES_T const s_aValuesPE[] =
    {
    /*
     * Normals.
     */
    /* 0*/{    FP32_0_1(0),     FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_0_1(0),     FP32_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP32_0_1(1),     FP32_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_0_1(1),     FP32_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP32_0_5_DN(0),  FP32_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_0_9(0),     FP32_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_0_9(0),     FP32_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_0_9(1),     FP32_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_0_9(1),     FP32_1(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP32_1(0),       FP32_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN                   }, /* MXCSR overridden by instruction */
          {    FP32_1(1),       FP32_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST                },
          {    FP32_12_67_1(0), FP32_12_67_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_12_67_1(0), FP32_12_67_0(0), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP32_12_67_1(1), FP32_12_67_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_1(1), FP32_12_67_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_12_67_5(0), FP32_12_68_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_12_67_5(0), FP32_12_68_0(0), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_5(1), FP32_12_68_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_12_67_5(1), FP32_12_68_0(1), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_9(0), FP32_12_68_0(0), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_9(0), FP32_12_68_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_12_67_9(1), FP32_12_68_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP32_12_67_9(1), FP32_12_68_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP32_2(0),       FP32_2(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST                },
          {    FP32_2(0),       FP32_2(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP                     }, /* MXCSR overridden by instruction */
          {    FP32_2(1),       FP32_2(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST                },
          {    FP32_2(1),       FP32_2(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO                   }, /* MXCSR overridden by instruction */
          {    FP32_BIG_INT(0), FP32_BIG_INT(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST                },
          {    FP32_BIG_INT(1), FP32_BIG_INT(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP                     }, /* MXCSR overridden by instruction */
    };
    /** quiet PE + rounding controlled by MXCSR (reserved encoding) */
    static BS3CPUINSTR4_ROUNDSS_VALUES_T const s_aValuesNV[] =
    {
    /*
     * Normals.
     */
    /* 0*/{    FP32_0_1(0),     FP32_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_5(0),     FP32_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_0_5(0),     FP32_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_0_5(1),     FP32_1(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP32_0_5(1),     FP32_0(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP32_0_5_DN(0),  FP32_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_0_5_UP(0),  FP32_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP32_12_67_5(0), FP32_12_67_0(0), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP32_2(0),       FP32_2(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(roundss_XMM1_XMM2_000h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesPE) },
        { BS3_INSTR4_ALL(roundss_XMM1_XMM2_008h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(roundss_XMM1_XMM2_009h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesNI) },
        { BS3_INSTR4_ALL(roundss_XMM1_XMM2_00ah),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesPI) },
        { BS3_INSTR4_ALL(roundss_XMM1_XMM2_00bh),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesZR) },
        { BS3_INSTR4_ALL(roundss_XMM1_XMM2_00ch),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundss_XMM1_XMM2_00dh),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundss_XMM1_XMM2_00eh),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundss_XMM1_XMM2_00fh),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundss_XMM1_XMM2_0ffh),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesNV) },
        { BS3_INSTR4_ALL(roundss_XMM1_FSxBX_008h),       255, RM_MEM, T_SSE4_1,  XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(roundss_XMM8_XMM9_008h),        255, RM_REG, T_SSE4_1,  XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(roundss_XMM8_FSxBX_008h),       255, RM_MEM, T_SSE4_1,  XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },

        { BS3_INSTR4_ALL(vroundss_XMM1_XMM1_XMM2_008h),  255, RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM1_FSxBX_008h), 255, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_XMM1_008h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM1,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_XMM3_000h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesPE) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_XMM3_008h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_XMM3_009h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesNI) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_XMM3_00ah),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesPI) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_XMM3_00bh),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesZR) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_XMM3_00ch),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_XMM3_00dh),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_XMM3_00eh),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_XMM3_00fh),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_XMM3_0ffh),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesNV) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_FSxBX_008h), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundss_XMM8_XMM8_FSxBX_008h), 255, RM_MEM, T_AVX_128, XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundss_XMM8_XMM9_XMM10_008h), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundss_XMM8_XMM9_FSxBX_008h), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },

        { BS3_INSTR4_ALL(roundss_XMM1_XMM1_008h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, NOREG, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(roundss_XMM8_XMM8_008h),        255, RM_REG, T_SSE4_1,  XMM8, XMM8, NOREG, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM1_XMM1_008h),  255, RM_REG, T_AVX_128, XMM1, XMM1, NOREG, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundss_XMM1_XMM2_XMM2_008h),  255, RM_REG, T_AVX_128, XMM1, XMM2, NOREG, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundss_XMM8_XMM8_XMM8_008h),  255, RM_REG, T_AVX_128, XMM8, XMM8, NOREG, PASS_TEST_ARRAY(s_aValuesNE) },
    };

    return bs3CpuInstr4_WorkerTestType1_P(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3), bs3CpuInstr4_WorkerTestType1_Provider_roundss);
}


typedef struct BS3CPUINSTR4_ROUNDSD_VALUES_T
{
    RTFLOAT64U          uSrc;
    RTFLOAT64U          uDst;
    uint16_t            uMxCsr;                 /**< MXCSR to set prior to executing the instruction. */
    uint16_t            u128ExpectedMxCsr;      /**< Expected MXCSR for a 128-bit instruction. */
} BS3CPUINSTR4_ROUNDSD_VALUES_T;

static DECLCALLBACK(PBS3CPUINSTR4_TEST1_VALUES_T) bs3CpuInstr4_WorkerTestType1_Provider_roundsd(void *paValues, const unsigned cValues, const unsigned iVal)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T sValues;
    BS3CPUINSTR4_ROUNDSD_VALUES_T *psValuesIn = &((BS3CPUINSTR4_ROUNDSD_VALUES_T *)paValues)[iVal];
    unsigned iCnt;

    sValues.uSrc1.ar64[0] = psValuesIn->uSrc;
    sValues.uSrc2.ar64[0] = psValuesIn->uSrc;
    sValues.uDstOut.ar64[0] = psValuesIn->uDst;
    for (iCnt = 2; iCnt < RT_ELEMENTS(sValues.uSrc1.ymm.au32); iCnt++)
    {
        sValues.uSrc1.ymm.au32[iCnt] = bs3CpuInstrX_SimpleRand();
        sValues.uSrc2.ymm.au32[iCnt] = bs3CpuInstrX_SimpleRand();
        sValues.uDstOut.ymm.au32[iCnt] = sValues.uSrc1.ymm.au32[iCnt];
    }
    sValues.uMxCsr = psValuesIn->uMxCsr;
    sValues.u128ExpectedMxCsr = psValuesIn->u128ExpectedMxCsr;
    return (PBS3CPUINSTR4_TEST1_VALUES_T)&sValues;
}

/*
 * [V]ROUNDSD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_roundsd(uint8_t bMode)
{
    /** quiet PE + round toward nearest (even) + main testing + plenty of testing instruction-overrides-MXCSR */
    static BS3CPUINSTR4_ROUNDSD_VALUES_T const s_aValuesNE[] =
    {
              /*src*/           /* => */         /*mxcsr:in*/          /*128:out*/
    /*
     * Zero.
     */
    /* 0*/{   FP64_0(0),        FP64_0(0),       0,                    0                    },
          {   FP64_0(1),        FP64_0(1),       0,                    0                    },
    /*
     * Infinity.
     */
    /* 2*/{   FP64_INF(0),      FP64_INF(0),     0,                    0                    },
          {   FP64_INF(1),      FP64_INF(1),     0,                    0                    },
    /*
     * Normals.
     */
    /* 4*/{    FP64_0_1(0),     FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_1(0),     FP64_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_0_1(1),     FP64_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_0_1(1),     FP64_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_0_9(0),     FP64_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_0_9(0),     FP64_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_9(1),     FP64_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_9(1),     FP64_1(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_1(0),       FP64_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_1(1),       FP64_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_12_89_1(0), FP64_12_89_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_12_89_1(0), FP64_12_89_0(0), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_12_89_1(1), FP64_12_89_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_1(1), FP64_12_89_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_12_89_5(0), FP64_12_90_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_12_89_5(0), FP64_12_90_0(0), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_5(1), FP64_12_90_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_12_89_5(1), FP64_12_90_0(1), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_9(0), FP64_12_90_0(0), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_9(0), FP64_12_90_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_12_89_9(1), FP64_12_90_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_9(1), FP64_12_90_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_2(0),       FP64_2(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_2(0),       FP64_2(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_2(1),       FP64_2(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_2(1),       FP64_2(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_BIG_INT(0), FP64_BIG_INT(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_BIG_INT(1), FP64_BIG_INT(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
    };
    /** quiet PE + round toward negative infinity */
    static BS3CPUINSTR4_ROUNDSD_VALUES_T const s_aValuesNI[] =
    {
    /*
     * Normals.
     */
    /* 0*/{    FP64_0_1(0),     FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_1(0),     FP64_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_0_1(1),     FP64_1(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_0_1(1),     FP64_1(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_0_5(1),     FP64_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_0_5(1),     FP64_1(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_UP(0),  FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_0_5_UP(0),  FP64_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_0_9(0),     FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_0_9(1),     FP64_1(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_1(0),       FP64_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_1(1),       FP64_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_12_89_1(0), FP64_12_89_0(0), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_12_89_1(1), FP64_12_90_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_12_89_5(0), FP64_12_89_0(0), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_5(1), FP64_12_90_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_12_89_9(0), FP64_12_89_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_12_89_9(1), FP64_12_90_0(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP,     }, /* MXCSR overridden by instruction */
          {    FP64_2(0),       FP64_2(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_2(1),       FP64_2(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_BIG_INT(0), FP64_BIG_INT(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_BIG_INT(1), FP64_BIG_INT(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
    };
    /** quiet PE + round toward positive infinity */
    static BS3CPUINSTR4_ROUNDSD_VALUES_T const s_aValuesPI[] =
    {
    /*
     * Normals.
     */
    /* 0*/{    FP64_0_1(0),     FP64_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_0_1(0),     FP64_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_0_1(1),     FP64_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_0_1(1),     FP64_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_0_5(0),     FP64_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_0_5(0),     FP64_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_DN(0),  FP64_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_DN(0),  FP64_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_0_9(0),     FP64_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_0_9(1),     FP64_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_1(0),       FP64_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_1(1),       FP64_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_12_89_1(0), FP64_12_90_0(0), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_12_89_1(1), FP64_12_89_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_12_89_5(0), FP64_12_90_0(0), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_5(1), FP64_12_89_0(1), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_9(0), FP64_12_90_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_12_89_9(1), FP64_12_89_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_2(0),       FP64_2(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_2(1),       FP64_2(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_BIG_INT(0), FP64_BIG_INT(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_BIG_INT(1), FP64_BIG_INT(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
    };
    /** quiet PE + round toward zero */
    static BS3CPUINSTR4_ROUNDSD_VALUES_T const s_aValuesZR[] =
    {
    /*
     * Normals.
     */
    /* 0*/{    FP64_0_1(0),     FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_0_1(0),     FP64_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_0_1(1),     FP64_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_0_1(1),     FP64_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_0_5_UP(0),  FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_0_5_UP(0),  FP64_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_0_9(0),     FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_0_9(1),     FP64_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_1(0),       FP64_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_1(1),       FP64_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_12_89_1(0), FP64_12_89_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_12_89_1(1), FP64_12_89_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_5(0), FP64_12_89_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_12_89_5(1), FP64_12_89_0(1), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_12_89_9(0), FP64_12_89_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_12_89_9(1), FP64_12_89_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    }, /* MXCSR overridden by instruction */
          {    FP64_2(0),       FP64_2(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
          {    FP64_2(1),       FP64_2(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_BIG_INT(0), FP64_BIG_INT(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST }, /* MXCSR overridden by instruction */
          {    FP64_BIG_INT(1), FP64_BIG_INT(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      }, /* MXCSR overridden by instruction */
    };
    /** quiet PE + rounding controlled by MXCSR */
    static BS3CPUINSTR4_ROUNDSD_VALUES_T const s_aValuesMX[] =
    {
    /*
     * Normals.
     */
    /* 0*/{    FP64_0_1(0),     FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_1(0),     FP64_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_0_1(1),     FP64_1(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_0_1(1),     FP64_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_5(0),     FP64_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_0_5(1),     FP64_1(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_5_DN(0),  FP64_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_0_5_UP(0),  FP64_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_0_5_UP(0),  FP64_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_0_9(0),     FP64_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_0_9(0),     FP64_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_9(1),     FP64_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_9(1),     FP64_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_1(0),       FP64_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_1(1),       FP64_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_12_89_1(0), FP64_12_89_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_12_89_1(0), FP64_12_90_0(0), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_12_89_1(1), FP64_12_90_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_12_89_1(1), FP64_12_89_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_12_89_5(0), FP64_12_90_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_12_89_5(0), FP64_12_89_0(0), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_12_89_5(1), FP64_12_90_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_12_89_5(1), FP64_12_89_0(1), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_12_89_9(0), FP64_12_89_0(0), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_12_89_9(0), FP64_12_90_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_12_89_9(1), FP64_12_90_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_12_89_9(1), FP64_12_90_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_2(0),       FP64_2(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_2(0),       FP64_2(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_2(1),       FP64_2(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_2(1),       FP64_2(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_BIG_INT(0), FP64_BIG_INT(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_BIG_INT(1), FP64_BIG_INT(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
    };
    /** raise PE + round toward nearest (even) */
    static BS3CPUINSTR4_ROUNDSD_VALUES_T const s_aValuesPE[] =
    {
    /*
     * Normals.
     */
    /* 0*/{    FP64_0_1(0),     FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_0_1(0),     FP64_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP64_0_1(1),     FP64_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_0_1(1),     FP64_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP64_0_5_DN(0),  FP64_0(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_0_9(0),     FP64_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_0_9(0),     FP64_1(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_0_9(1),     FP64_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_0_9(1),     FP64_1(1),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP64_1(0),       FP64_1(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN                   }, /* MXCSR overridden by instruction */
          {    FP64_1(1),       FP64_1(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST                },
          {    FP64_12_89_1(0), FP64_12_89_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_12_89_1(0), FP64_12_89_0(0), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP | X86_MXCSR_PE      }, /* MXCSR overridden by instruction */
          {    FP64_12_89_1(1), FP64_12_89_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_1(1), FP64_12_89_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_12_89_5(0), FP64_12_90_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_12_89_5(0), FP64_12_90_0(0), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_5(1), FP64_12_90_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_12_89_5(1), FP64_12_90_0(1), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_9(0), FP64_12_90_0(0), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_9(0), FP64_12_90_0(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_12_89_9(1), FP64_12_90_0(1), X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN | X86_MXCSR_PE    }, /* MXCSR overridden by instruction */
          {    FP64_12_89_9(1), FP64_12_90_0(1), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST | X86_MXCSR_PE },
          {    FP64_2(0),       FP64_2(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST                },
          {    FP64_2(0),       FP64_2(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP                     }, /* MXCSR overridden by instruction */
          {    FP64_2(1),       FP64_2(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST                },
          {    FP64_2(1),       FP64_2(1),       X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO                   }, /* MXCSR overridden by instruction */
          {    FP64_BIG_INT(0), FP64_BIG_INT(0), X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST                },
          {    FP64_BIG_INT(1), FP64_BIG_INT(1), X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP                     }, /* MXCSR overridden by instruction */
    };
    /** quiet PE + rounding controlled by MXCSR (reserved encoding) */
    static BS3CPUINSTR4_ROUNDSD_VALUES_T const s_aValuesNV[] =
    {
    /*
     * Normals.
     */
    /* 0*/{    FP64_0_1(0),     FP64_0(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_5(0),     FP64_0(0),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_0_5(0),     FP64_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_0_5(1),     FP64_1(1),       X86_MXCSR_RC_DOWN,    X86_MXCSR_RC_DOWN    },
          {    FP64_0_5(1),     FP64_0(1),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
          {    FP64_0_5_DN(0),  FP64_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_0_5_UP(0),  FP64_1(0),       X86_MXCSR_RC_UP,      X86_MXCSR_RC_UP      },
          {    FP64_12_89_5(0), FP64_12_89_0(0), X86_MXCSR_RC_ZERO,    X86_MXCSR_RC_ZERO    },
          {    FP64_2(0),       FP64_2(0),       X86_MXCSR_RC_NEAREST, X86_MXCSR_RC_NEAREST },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(roundsd_XMM1_XMM2_000h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesPE) },
        { BS3_INSTR4_ALL(roundsd_XMM1_XMM2_008h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(roundsd_XMM1_XMM2_009h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesNI) },
        { BS3_INSTR4_ALL(roundsd_XMM1_XMM2_00ah),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesPI) },
        { BS3_INSTR4_ALL(roundsd_XMM1_XMM2_00bh),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesZR) },
        { BS3_INSTR4_ALL(roundsd_XMM1_XMM2_00ch),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundsd_XMM1_XMM2_00dh),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundsd_XMM1_XMM2_00eh),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundsd_XMM1_XMM2_00fh),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(roundsd_XMM1_XMM2_0ffh),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesNV) },
        { BS3_INSTR4_ALL(roundsd_XMM1_FSxBX_008h),       255, RM_MEM, T_SSE4_1,  XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(roundsd_XMM8_XMM9_008h),        255, RM_REG, T_SSE4_1,  XMM8, XMM8, XMM9,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(roundsd_XMM8_FSxBX_008h),       255, RM_MEM, T_SSE4_1,  XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },

        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM1_XMM2_008h),  255, RM_REG, T_AVX_128, XMM1, XMM1, XMM2,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM1_FSxBX_008h), 255, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_XMM1_008h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM1,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_XMM3_000h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesPE) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_XMM3_008h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_XMM3_009h),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesNI) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_XMM3_00ah),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesPI) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_XMM3_00bh),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesZR) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_XMM3_00ch),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_XMM3_00dh),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_XMM3_00eh),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_XMM3_00fh),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesMX) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_XMM3_0ffh),  255, RM_REG, T_AVX_128, XMM1, XMM2, XMM3,  PASS_TEST_ARRAY(s_aValuesNV) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_FSxBX_008h), 255, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundsd_XMM8_XMM8_FSxBX_008h), 255, RM_MEM, T_AVX_128, XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundsd_XMM8_XMM9_XMM10_008h), 255, RM_REG, T_AVX_128, XMM8, XMM9, XMM10, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundsd_XMM8_XMM9_FSxBX_008h), 255, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValuesNE) },

        { BS3_INSTR4_ALL(roundsd_XMM1_XMM1_008h),        255, RM_REG, T_SSE4_1,  XMM1, XMM1, NOREG, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(roundsd_XMM8_XMM8_008h),        255, RM_REG, T_SSE4_1,  XMM8, XMM8, NOREG, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM1_XMM1_008h),  255, RM_REG, T_AVX_128, XMM1, XMM1, NOREG, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_ALL(vroundsd_XMM1_XMM2_XMM2_008h),  255, RM_REG, T_AVX_128, XMM1, XMM2, NOREG, PASS_TEST_ARRAY(s_aValuesNE) },
        { BS3_INSTR4_C64(vroundsd_XMM8_XMM8_XMM8_008h),  255, RM_REG, T_AVX_128, XMM8, XMM8, NOREG, PASS_TEST_ARRAY(s_aValuesNE) },
    };

    return bs3CpuInstr4_WorkerTestType1_P(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3), bs3CpuInstr4_WorkerTestType1_Provider_roundsd);
}


/*
 * CVTPI2PS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_cvtpi2ps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /*init dst */ { FP32_RAND_V1(0), FP32_RAND_V3(1), FP32_RAND_x6_V0 } },
            { /* src  mm */ { FP32_INT_C(0),   FP32_INT_C(0),   FP32_RAND_x6_V2 } },
            { /* =>  xmm */ { FP32_0(0),       FP32_0(0),       FP32_RAND_x6_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 1*/{ { /*init dst */ { FP32_NORM_V0(0),         FP32_NORM_V4(0),         FP32_RAND_x6_V3 } },
            { /* src  mm */ { FP32_INT_C(123456789),   FP32_INT_C(-123456789),  FP32_RAND_x6_V4 } },
            { /* =>  xmm */ { FP32_V(0,0x6b79a3,0x99), FP32_V(1,0x6b79a3,0x99), FP32_RAND_x6_V3 } },
                              /*123456792.0*/          /*-123456792.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*init dst */ { FP32_NORM_V1(0),         FP32_NORM_V7(0),         FP32_RAND_x6_V5 } },
            { /* src  mm */ { FP32_INT_C(-47),         FP32_INT_C(42),          FP32_RAND_x6_V1 } },
            { /* =>  xmm */ { FP32_V(1,0x3c0000,0x84), FP32_V(0,0x280000,0x84), FP32_RAND_x6_V5 } },
                              /*-47.0*/                /*42.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /*init dst */ { FP32_NORM_V0(0),     FP32_NORM_V4(0),      FP32_RAND_x6_V0 } },
            { /* src  mm */ { FP32_INT(INT32_MAX), FP32_INT(-INT32_MAX), FP32_RAND_x6_V5 } },
            { /* =>  xmm */ { FP32_V(0,0,0x9e),    FP32_V(1,0,0x9e),     FP32_RAND_x6_V0 } },
                              /*2147483648.0*/     /*-2147483648.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*init dst */ { FP32_NORM_V0(0),         FP32_NORM_V4(0),         FP32_RAND_x6_V7 } },
            { /* src  mm */ { FP32_INT_C(123456789),   FP32_INT_C(-123456789),  FP32_RAND_x6_V7 } },
            { /* =>  xmm */ { FP32_V(0,0x6b79a3,0x99), FP32_V(1,0x6b79a3,0x99), FP32_RAND_x6_V7 } },
                              /*123456792.0*/          /*-123456792.0*/
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*init dst */ { FP32_NORM_V0(0),         FP32_NORM_V4(0),         FP32_RAND_x6_V6 } },
            { /* src  mm */ { FP32_INT_C(123456789),   FP32_INT_C(-123456789),  FP32_RAND_x6_V4 } },
            { /* =>  xmm */ { FP32_V(0,0x6b79a2,0x99), FP32_V(1,0x6b79a3,0x99), FP32_RAND_x6_V6 } },
                              /*123456784.0*/          /*-123456792.0*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*init dst */ { FP32_NORM_V0(0),         FP32_NORM_V4(0),         FP32_RAND_x6_V2 } },
            { /* src  mm */ { FP32_INT_C(123456789),   FP32_INT_C(-123456789),  FP32_RAND_x6_V1 } },
            { /* =>  xmm */ { FP32_V(0,0x6b79a3,0x99), FP32_V(1,0x6b79a2,0x99), FP32_RAND_x6_V2 } },
                              /*123456792.0*/          /*-123456784.0*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /*init dst */ { FP32_NORM_V0(0),         FP32_NORM_V4(0),         FP32_RAND_x6_V0 } },
            { /* src  mm */ { FP32_INT_C(123456789),   FP32_INT_C(-123456789),  FP32_RAND_x6_V5 } },
            { /* =>  xmm */ { FP32_V(0,0x6b79a2,0x99), FP32_V(1,0x6b79a2,0x99), FP32_RAND_x6_V0 } },
                              /*123456784.0*/          /*-123456784.0*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
    /*
     * Not invalid, but unusual: Intel define the 'indefinite integer' as 10000...0b
     */
    /* 8*/{ { /*init dst */ { FP32_RAND_V1(0),  FP32_RAND_V3(1),  FP32_RAND_x6_V0 } },
            { /* src  mm */ { FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_RAND_x6_V2 } },
            { /* =>  xmm */ { FP32_V(1,0,0x9e), FP32_V(1,0,0x9e), FP32_RAND_x6_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    };
    /*
     * Infinity, Overflow, Underflow, Denormal, Invalid not possible.
     */

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtpi2ps_XMM1_MM1),   255,             RM_REG, T_SSE2, XMM1, MM1,   XMM1, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(cvtpi2ps_XMM1_FSxBX), BS3_XCPT_NOT_MF, RM_MEM, T_SSE2, XMM1, FSxBX, XMM1, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvtpi2ps_XMM8_MM1),   255,             RM_REG, T_SSE2, XMM8, MM1,   XMM8, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvtpi2ps_XMM8_FSxBX), BS3_XCPT_NOT_MF, RM_MEM, T_SSE2, XMM8, FSxBX, XMM8, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig23_5));
}


/*
 * CVTPS2PI.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_cvtps2pi(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_0(0),     FP32_0(1),     FP32_RAND_x6_V1 } },
            { /* =>   mm */ { FP32_INT_C(0), FP32_INT_C(0), FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_INF(1),    FP32_INF(0),    FP32_RAND_x6_V1 } },
            { /* =>   mm */ { FP32_INT_INDEF, FP32_INT_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_RAND_x6_V0 } },
            { /* =>   mm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f), FP32_V(1,0x712073,0x8f), FP32_RAND_x6_V2 } },
                              /*123456.9*/             /*-123456.9*/
            { /* =>   mm */ { FP32_INT_C(123457),      FP32_INT_C(-123457),     FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f), FP32_V(1,0x712073,0x8f), FP32_RAND_x6_V2 } },
                              /*123456.9*/             /*-123456.9*/
            { /* =>   mm */ { FP32_INT_C(123456),      FP32_INT_C(-123457),     FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f), FP32_V(1,0x712073,0x8f), FP32_RAND_x6_V2 } },
                              /*123456.9*/             /*-123456.9*/
            { /* =>   mm */ { FP32_INT_C(123457),      FP32_INT_C(-123456),     FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f), FP32_V(1,0x712073,0x8f), FP32_RAND_x6_V2 } },
                              /*123456.9*/             /*-123456.9*/
            { /* =>   mm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x666666,0x7e), FP32_V(0,0x666666,0x7e), FP32_RAND_x6_V2 } },
                              /*-0.9*/                 /*0.9*/
            { /* =>   mm */ { FP32_INT_C(-1),          FP32_INT_C(1),           FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x6_V2 } },
            { /* =>   mm */ { FP32_INT_C(-16777215),     FP32_INT_C(16777215),      FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /* 9*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_RAND_x6_V2 } },
            { /* =>   mm */ { FP32_INT_C(0),      FP32_INT_C(0),      FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_RAND_x6_V2 } },
            { /* =>   mm */ { FP32_INT_C(0),      FP32_INT_C(0),      FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*11*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_RAND_x6_V2 } },
            { /* =>   mm */ { FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*12*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_QNAN(0),   FP32_QNAN(1),   FP32_RAND_x6_V2 } },
            { /* =>   mm */ { FP32_INT_INDEF, FP32_INT_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_SNAN(1),   FP32_SNAN(0),   FP32_RAND_x6_V2 } },
            { /* =>   mm */ { FP32_INT_INDEF, FP32_INT_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };


    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtps2pi_MM1_XMM1),  255, RM_REG, T_SSE2, MM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(cvtps2pi_MM1_FSxBX), 255, RM_MEM, T_SSE2, MM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvtps2pi_MM1_XMM8),  255, RM_REG, T_SSE2, MM1, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig23_5));
}


/*
 * CVTTPS2PI.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_cvttps2pi(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_0(0),     FP32_0(1),     FP32_RAND_x6_V1 } },
            { /* =>   mm */ { FP32_INT_C(0), FP32_INT_C(0), FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_INF(1),    FP32_INF(0),    FP32_RAND_x6_V1 } },
            { /* =>   mm */ { FP32_INT_INDEF, FP32_INT_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_RAND_x6_V0 } },
            { /* =>   mm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f), FP32_V(1,0x712073,0x8f), FP32_RAND_x6_V2 } },
                              /*123456.9*/             /*-123456.9*/
            { /* =>   mm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f), FP32_V(1,0x712073,0x8f), FP32_RAND_x6_V2 } },
                              /*123456.9*/             /*-123456.9*/
            { /* =>   mm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f), FP32_V(1,0x712073,0x8f), FP32_RAND_x6_V2 } },
                              /*123456.9*/             /*-123456.9*/
            { /* =>   mm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f), FP32_V(1,0x712073,0x8f), FP32_RAND_x6_V2 } },
                              /*123456.9*/             /*-123456.9*/
            { /* =>   mm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x666666,0x7e), FP32_V(0,0x666666,0x7e), FP32_RAND_x6_V2 } },
                              /*-0.9*/                 /*0.9*/
            { /* =>   mm */ { FP32_INT_C(0),           FP32_INT_C(0),           FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x6_V2 } },
            { /* =>   mm */ { FP32_INT_C(-16777215),     FP32_INT_C(16777215),      FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /* 9*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_DENORM_MAX(0), FP32_DENORM_MIN(1), FP32_RAND_x6_V2 } },
            { /* =>   mm */ { FP32_INT_C(0),      FP32_INT_C(0),      FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_DENORM_MIN(0), FP32_DENORM_MAX(1), FP32_RAND_x6_V2 } },
            { /* =>   mm */ { FP32_INT_C(0),      FP32_INT_C(0),      FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*11*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_RAND_x6_V2 } },
            { /* =>   mm */ { FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*12*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_QNAN(0),   FP32_QNAN(1),   FP32_RAND_x6_V2 } },
            { /* =>   mm */ { FP32_INT_INDEF, FP32_INT_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_SNAN(1),   FP32_SNAN(0),   FP32_RAND_x6_V2 } },
            { /* =>   mm */ { FP32_INT_INDEF, FP32_INT_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };


    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvttps2pi_MM1_FSxBX), 255, RM_MEM, T_SSE2, MM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(cvttps2pi_MM1_XMM1),  255, RM_REG, T_SSE2, MM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvttps2pi_MM1_XMM8),  255, RM_REG, T_SSE2, MM1, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig23_5));
}


/*
 * CVTSI2SS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvtsi2ss(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues32[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* src r32 */ { FP32_INT_C(0),   FP32_RAND_x7_V0 } },
            { /* src xmm */ { FP32_RAND_V1(0), FP32_RAND_x7_V2 } },
            { /* =>  xmm */ { FP32_0(0),       FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 1*/{ { /* src r32 */ { FP32_INT_C(123456789),   FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0x6b79a3,0x99), FP32_RAND_x7_V3 } },
                              /*123456792.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP32_INT_C(-123456789),  FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0x6b79a3,0x99), FP32_RAND_x7_V3 } },
                              /*-123456792.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP32_INT_C(-47),         FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0x3c0000,0x84), FP32_RAND_x7_V3 } },
                              /*-47.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP32_INT(INT32_MAX), FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),     FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0,0x9e),    FP32_RAND_x7_V3 } },
                              /*2147483648.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP32_INT(-INT32_MAX), FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),      FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0,0x9e),     FP32_RAND_x7_V3 } },
                              /*-2147483648.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP32_INT_C(123456789),   FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0x6b79a3,0x99), FP32_RAND_x7_V3 } },
                              /*123456792.0*/
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP32_INT_C(123456789),   FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0x6b79a2,0x99), FP32_RAND_x7_V3 } },
                              /*123456784.0*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP32_INT_C(-123456789),  FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0x6b79a3,0x99), FP32_RAND_x7_V3 } },
                              /*-123456792.0*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP32_INT_C(123456789),   FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0x6b79a3,0x99), FP32_RAND_x7_V3 } },
                              /*123456792.0*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP32_INT_C(-123456789),  FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0x6b79a2,0x99), FP32_RAND_x7_V3 } },
                              /*-123456784.0*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP32_INT_C(123456789),   FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0x6b79a2,0x99), FP32_RAND_x7_V3 } },
                              /*123456784.0*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP32_INT_C(-123456789),  FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0x6b79a2,0x99), FP32_RAND_x7_V3 } },
                              /*-123456784.0*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
    /*
     * Not invalid, but unusual: Intel define the 'indefinite integer' as 10000...0b
     */
    /*13*/{ { /* src r32 */ { FP32_INT_INDEF,   FP32_RAND_x7_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),  FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0,0x9e), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    };

    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues64[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* src r64 */ { FP32_INT64_C(0), FP32_RAND_x6_V0 } },
            { /* src xmm */ { FP32_RAND_V1(0), FP32_RAND_x7_V2 } },
            { /* =>  xmm */ { FP32_0(0),       FP32_RAND_x7_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 1*/{ { /* src r64 */ { FP32_INT64_C(123456789), FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0x6b79a3,0x99), FP32_RAND_x7_V3 } },
                                         /*123456792.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP32_INT64_C(8526495043095935640)/*0x76543210FEDCBA98*/, FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),                                         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0x6ca864,0xbd),                                 FP32_RAND_x7_V3 } },
                                         /*8526494970100580352.0=0x7654320000000000*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP32_INT64_C(-8526495043095935640)/*-0x76543210FEDCBA98*/, FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),                                           FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0x6ca864,0xbd),                                   FP32_RAND_x7_V3 } },
                                         /*-8526494970100580352.0=-0x7654320000000000*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP32_INT64_C(-2), FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),  FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_2(1),        FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP32_INT64(INT64_MAX), FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),       FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0x0,0xbe),    FP32_RAND_x7_V3 } },
                              /*9223372036854775808.0 = INT64_MAX+1*/
              /*mxcsr:in */ X86_MXCSR_XCPT_MASK,
              /*128:out  */ X86_MXCSR_XCPT_MASK | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP32_INT64(-INT64_MAX), FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),        FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0x0,0xbe),     FP32_RAND_x7_V3 } },
                              /*-9223372036854775808.0 = -INT64_MAX-1*/
              /*mxcsr:in */ X86_MXCSR_XCPT_MASK,
              /*128:out  */ X86_MXCSR_XCPT_MASK | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP32_INT64_C(8526495043095935640)/*0x76543210FEDCBA98*/, FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),                                         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0x6ca864,0xbd),                                 FP32_RAND_x7_V3 } },
                                         /*8526494970100580352.0=0x7654320000000000*/
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP32_INT64_C(8526495043095935640)/*0x76543210FEDCBA98*/, FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),                                         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0x6ca864,0xbd),                                 FP32_RAND_x7_V3 } },
                                         /*8526494970100580352.0=0x7654320000000000*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP32_INT64_C(-8526495043095935640)/*-0x76543210FEDCBA98*/, FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),                                           FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0x6ca865,0xbd),                                   FP32_RAND_x7_V3 } },
                                         /*-8526495519856394240.0=-0x7654328000000000*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP32_INT64_C(8526495043095935640)/*0x76543210FEDCBA98*/, FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),                                         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0x6ca865,0xbd),                                 FP32_RAND_x7_V3 } },
                                         /*8526495519856394240.0=0x7654328000000000*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP32_INT64_C(-8526495043095935640)/*-0x76543210FEDCBA98*/, FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),                                           FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0x6ca864,0xbd),                                   FP32_RAND_x7_V3 } },
                                         /*-8526494970100580352.0=-0x7654320000000000*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP32_INT64_C(8526495043095935640)/*0x76543210FEDCBA98*/, FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),                                         FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(0,0x6ca864,0xbd),                                 FP32_RAND_x7_V3 } },
                                         /*8526494970100580352.0=0x7654320000000000*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP32_INT64_C(-8526495043095935640)/*-0x76543210FEDCBA98*/, FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),                                           FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0x6ca864,0xbd),                                   FP32_RAND_x7_V3 } },
                                         /*-8526494970100580352.0=-0x7654320000000000*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
    /*
     * Not invalid, but unusual: Intel define the 'indefinite integer' as 10000...0b
     */
    /*14*/{ { /* src r64 */ { FP32_INT64_INDEF, FP32_RAND_x6_V4 } },
            { /* src xmm */ { FP32_NORM_V0(0),  FP32_RAND_x7_V3 } },
            { /* =>  xmm */ { FP32_V(1,0,0xbe), FP32_RAND_x7_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    };
    /*
     * Infinity, Overflow, Underflow, Denormal, Invalid not possible.
     */

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtsi2ss_XMM1_EAX),           255,         RM_REG, T_SSE,     XMM1, XMM1, EAX,   PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(cvtsi2ss_XMM1_FSxBX_D),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(cvtsi2ss_XMM8_R8D),           255,         RM_REG, T_SSE,     XMM8, XMM8, R8D,   PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(cvtsi2ss_XMM8_FSxBX_D),       255,         RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(cvtsi2ss_XMM1_RAX),           255,         RM_REG, T_SSE,     XMM1, XMM1, RAX,   PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvtsi2ss_XMM1_FSxBX_Q),       255,         RM_MEM, T_SSE,     XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvtsi2ss_XMM8_R8),            255,         RM_REG, T_SSE,     XMM8, XMM8, R8,    PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvtsi2ss_XMM8_FSxBX_Q),       255,         RM_MEM, T_SSE,     XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_ALL(vcvtsi2ss_XMM1_XMM2_EAX),     255,         RM_REG, T_AVX_128, XMM1, XMM2, EAX,   PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(vcvtsi2ss_XMM1_XMM2_FSxBX_D), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(vcvtsi2ss_XMM8_XMM9_R8D),     255,         RM_REG, T_AVX_128, XMM8, XMM9, R8D,   PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(vcvtsi2ss_XMM8_XMM9_FSxBX_D), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_386(vcvtsi2ss_XMM1_XMM2_RAX),     BS3_XCPT_UD, RM_REG, T_AVX_128, XMM1, XMM2, RAX,   PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2ss_XMM1_XMM2_RAX),     255,         RM_REG, T_AVX_128, XMM1, XMM2, RAX,   PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_386(vcvtsi2ss_XMM1_XMM2_FSxBX_Q), BS3_XCPT_UD, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2ss_XMM1_XMM2_FSxBX_Q), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2, FSxBX, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2ss_XMM8_XMM9_R8),      255,         RM_REG, T_AVX_128, XMM8, XMM9, R8,    PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2ss_XMM8_XMM9_FSxBX_Q), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9, FSxBX, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_ALL(vcvtsi2ss_XMM1_XMM1_EAX),     255,         RM_REG, T_AVX_128, XMM1, XMM1, EAX,   PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(vcvtsi2ss_XMM1_XMM1_FSxBX_D), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(vcvtsi2ss_XMM8_XMM8_R8D),     255,         RM_REG, T_AVX_128, XMM8, XMM8, R8D,   PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(vcvtsi2ss_XMM8_XMM8_FSxBX_D), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_386(vcvtsi2ss_XMM1_XMM1_RAX),     BS3_XCPT_UD, RM_REG, T_AVX_128, XMM1, XMM1, RAX,   PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2ss_XMM1_XMM1_RAX),     255,         RM_REG, T_AVX_128, XMM1, XMM1, RAX,   PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_386(vcvtsi2ss_XMM1_XMM1_FSxBX_Q), BS3_XCPT_UD, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2ss_XMM1_XMM1_FSxBX_Q), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM1, FSxBX, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2ss_XMM8_XMM8_R8),      255,         RM_REG, T_AVX_128, XMM8, XMM8, R8,    PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2ss_XMM8_XMM8_FSxBX_Q), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM8, FSxBX, PASS_TEST_ARRAY(s_aValues64) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * CVTSS2SI.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvtss2si(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues32[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* clr r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_0(0),       FP32_RAND_x7_V1 } },
            { /* =>  r32 */ { FP32_INT_C(0),   FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_0(1),       FP32_RAND_x7_V1 } },
            { /* =>  r32 */ { FP32_INT_C(0),   FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 2*/{ { /* clr r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_INF(1),     FP32_RAND_x7_V1 } },
            { /* =>  r32 */ { FP32_INT_INDEF,  FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_INF(0),     FP32_RAND_x7_V1 } },
            { /* =>  r32 */ { FP32_INT_INDEF,  FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 4*/{ { /* clr r64 */ { FP32_INT64_C(0),         FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x712000,0x8f), FP32_RAND_x7_V0 } },
            { /* =>  r32 */ { FP32_INT_C(123456),      FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),         FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x712000,0x8f), FP32_RAND_x7_V0 } },
            { /* =>  r32 */ { FP32_INT_C(-123456),     FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                     FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(123457),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                      FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(-123457),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                     FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(123456),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                      FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(-123457),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                     FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(123457),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                      FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(-123456),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                     FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(123456),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                      FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(-123456),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                 FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(-1),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x666666,0x7e)/*0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(1),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                 FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(-1),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x666666,0x7e)/*0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(1),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),           FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_NORM_SAFE_INT_MAX(1), FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(-16777215),     FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),           FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(16777215),      FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*20*/{ { /* clr r64 */ { FP32_INT64_C(0),    FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(0),      FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),    FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(0),      FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*22*/{ { /* clr r64 */ { FP32_INT64_C(0),  FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_NORM_MAX(0), FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_INDEF,   FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),  FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_NORM_MAX(1), FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_INDEF,   FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*24*/{ { /* clr r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_QNAN(0),    FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_INDEF,  FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_SNAN(1),    FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_INDEF,  FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues64[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_0(0),       FP32_RAND_x7_V1 } },
            { /* =>  r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_0(1),       FP32_RAND_x7_V1 } },
            { /* =>  r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 2*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_INF(1),      FP32_RAND_x7_V1 } },
            { /* =>  r64 */ { FP32_INT64_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_INF(0),      FP32_RAND_x7_V1 } },
            { /* =>  r64 */ { FP32_INT64_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 4*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712000,0x8f), FP32_RAND_x7_V0 } },
            { /* =>  r64 */ { FP32_INT64_C(123456),    FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x712000,0x8f), FP32_RAND_x7_V0 } },
            { /* =>  r64 */ { FP32_INT64_C(-123456),   FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(123457),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-123457),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(123456),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-123457),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(123457),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-123456),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(123456),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-123456),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-1),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x666666,0x7e)/*0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(1),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-1),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x666666,0x7e)/*0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(1),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_NORM_SAFE_INT_MAX(1),   FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-16777215),     FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_NORM_SAFE_INT_MAX(0),   FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(16777215),      FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x79ccd8,0xbd)/*8999999652602314752.0,*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(8999999652602314752),                 FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x79ccd8,0xbd)/*-8999999652602314752.0,*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-8999999652602314752),                 FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x79ccd9,0xbd)/*9000000202358128640.0,*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(9000000202358128640),                 FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x79ccd9,0xbd)/*-9000000202358128640.0,*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-9000000202358128640),                 FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*24*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_DENORM_MAX(0),   FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(0),      FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_DENORM_MIN(1),   FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(0),      FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*26*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_NORM_MAX(0), FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_NORM_MAX(1), FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*28*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_QNAN(0),     FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_SNAN(1),     FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };


    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtss2si_EAX_XMM1),   255,         RM_REG, T_SSE,     EAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(cvtss2si_EAX_FSxBX),  255,         RM_MEM, T_SSE,     EAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(cvtss2si_R8D_XMM8),   255,         RM_REG, T_SSE,     R8D, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(cvtss2si_R8D_FSxBX),  255,         RM_MEM, T_SSE,     R8D, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_ALL(vcvtss2si_EAX_XMM1),  255,         RM_REG, T_AVX_128, EAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(vcvtss2si_EAX_FSxBX), 255,         RM_MEM, T_AVX_128, EAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(vcvtss2si_R8D_XMM8),  255,         RM_REG, T_AVX_128, R8D, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(vcvtss2si_R8D_FSxBX), 255,         RM_MEM, T_AVX_128, R8D, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(cvtss2si_RAX_XMM1),   255,         RM_REG, T_SSE,     RAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvtss2si_RAX_FSxBX),  255,         RM_MEM, T_SSE,     RAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_C64(cvtss2si_R8_XMM8),    255,         RM_REG, T_SSE,     R8,  XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvtss2si_R8_FSxBX),   255,         RM_MEM, T_SSE,     R8,  FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_386(vcvtss2si_RAX_XMM1),  BS3_XCPT_UD, RM_REG, T_AVX_128, RAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtss2si_RAX_XMM1),  255,         RM_REG, T_AVX_128, RAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_386(vcvtss2si_RAX_FSxBX), BS3_XCPT_UD, RM_MEM, T_AVX_128, RAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtss2si_RAX_FSxBX), 255,         RM_MEM, T_AVX_128, RAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_C64(vcvtss2si_R8_XMM8),   255,         RM_REG, T_AVX_128, R8,  XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtss2si_R8_FSxBX),  255,         RM_MEM, T_AVX_128, R8,  FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * CVTTSS2SI.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvttss2si(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues32[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* clr r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_0(0),       FP32_RAND_x7_V1 } },
            { /* =>  r32 */ { FP32_INT_C(0),   FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_0(1),       FP32_RAND_x7_V1 } },
            { /* =>  r32 */ { FP32_INT_C(0),   FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 2*/{ { /* clr r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_INF(1),     FP32_RAND_x7_V1 } },
            { /* =>  r32 */ { FP32_INT_INDEF,  FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_INF(0),     FP32_RAND_x7_V1 } },
            { /* =>  r32 */ { FP32_INT_INDEF,  FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 4*/{ { /* clr r64 */ { FP32_INT64_C(0),         FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x712000,0x8f), FP32_RAND_x7_V0 } },
            { /* =>  r32 */ { FP32_INT_C(123456),      FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),         FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x712000,0x8f), FP32_RAND_x7_V0 } },
            { /* =>  r32 */ { FP32_INT_C(-123456),     FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                     FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(123456),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                      FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(-123456),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                     FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(123456),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                      FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(-123456),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                     FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(123456),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                      FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(-123456),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                     FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(123456),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                      FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(-123456),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                 FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(0),                   FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x666666,0x7e)/*0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(0),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                 FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(0),                   FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),                FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_V(0,0x666666,0x7e)/*0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(0),                  FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),           FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_NORM_SAFE_INT_MAX(1), FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(-16777215),     FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),           FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_NORM_SAFE_INT_MAX(0), FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(16777215),      FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*20*/{ { /* clr r64 */ { FP32_INT64_C(0),    FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_DENORM_MAX(0), FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(0),      FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),    FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_DENORM_MIN(1), FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_C(0),      FP32_x7_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*22*/{ { /* clr r64 */ { FP32_INT64_C(0),  FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_NORM_MAX(0), FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_INDEF,   FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0),  FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_NORM_MAX(1), FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_INDEF,   FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*24*/{ { /* clr r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_QNAN(0),    FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_INDEF,  FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
            { /* src xmm */ { FP32_SNAN(1),    FP32_RAND_x7_V2 } },
            { /* =>  r32 */ { FP32_INT_INDEF,  FP32_x7_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };
    static BS3CPUINSTR4_TEST1_VALUES_SS_T const s_aValues64[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_0(0),       FP32_RAND_x7_V1 } },
            { /* =>  r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_0(1),       FP32_RAND_x7_V1 } },
            { /* =>  r64 */ { FP32_INT64_C(0), FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 2*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_INF(1),      FP32_RAND_x7_V1 } },
            { /* =>  r64 */ { FP32_INT64_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_INF(0),      FP32_RAND_x7_V1 } },
            { /* =>  r64 */ { FP32_INT64_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 4*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712000,0x8f), FP32_RAND_x7_V0 } },
            { /* =>  r64 */ { FP32_INT64_C(123456),    FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x712000,0x8f), FP32_RAND_x7_V0 } },
            { /* =>  r64 */ { FP32_INT64_C(-123456),   FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(123456),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-123456),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(123456),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-123456),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(123456),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-123456),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(123456),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-123456),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(0),                 FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x666666,0x7e)/*0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(0),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(0),                 FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x666666,0x7e)/*0.9*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(0),                FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_NORM_SAFE_INT_MAX(1),   FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-16777215),     FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_NORM_SAFE_INT_MAX(0),   FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(16777215),      FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x79ccd8,0xbd)/*8999999652602314752.0,*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(8999999652602314752),                 FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x79ccd8,0xbd)/*-8999999652602314752.0,*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-8999999652602314752),                 FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(0,0x79ccd9,0xbd)/*9000000202358128640.0,*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(9000000202358128640),                 FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_V(1,0x79ccd9,0xbd)/*-9000000202358128640.0,*/, FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(-9000000202358128640),                 FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*24*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_DENORM_MAX(0),   FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(0),      FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_DENORM_MIN(1),   FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_C(0),      FP32_x6_UNUSED  } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*26*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_NORM_MAX(0), FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_NORM_MAX(1), FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*28*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_QNAN(0),     FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src xmm */ { FP32_SNAN(1),     FP32_RAND_x7_V2 } },
            { /* =>  r64 */ { FP32_INT64_INDEF, FP32_x6_UNUSED  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };


    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvttss2si_EAX_XMM1),   255,         RM_REG, T_SSE,     EAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(cvttss2si_EAX_FSxBX),  255,         RM_MEM, T_SSE,     EAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(cvttss2si_R8D_XMM8),   255,         RM_REG, T_SSE,     R8D, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(cvttss2si_R8D_FSxBX),  255,         RM_MEM, T_SSE,     R8D, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_ALL(vcvttss2si_EAX_XMM1),  255,         RM_REG, T_AVX_128, EAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(vcvttss2si_EAX_FSxBX), 255,         RM_MEM, T_AVX_128, EAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(vcvttss2si_R8D_XMM8),  255,         RM_REG, T_AVX_128, R8D, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(vcvttss2si_R8D_FSxBX), 255,         RM_MEM, T_AVX_128, R8D, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(cvttss2si_RAX_XMM1),   255,         RM_REG, T_SSE,     RAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvttss2si_RAX_FSxBX),  255,         RM_MEM, T_SSE,     RAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_C64(cvttss2si_R8_XMM8),    255,         RM_REG, T_SSE,     R8,  XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvttss2si_R8_FSxBX),   255,         RM_MEM, T_SSE,     R8,  FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_386(vcvttss2si_RAX_XMM1),  BS3_XCPT_UD, RM_REG, T_AVX_128, RAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvttss2si_RAX_XMM1),  255,         RM_REG, T_AVX_128, RAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_386(vcvttss2si_RAX_FSxBX), BS3_XCPT_UD, RM_MEM, T_AVX_128, RAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvttss2si_RAX_FSxBX), 255,         RM_MEM, T_AVX_128, RAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_C64(vcvttss2si_R8_XMM8),   255,         RM_REG, T_AVX_128, R8,  XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvttss2si_R8_FSxBX),  255,         RM_MEM, T_AVX_128, R8,  FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * CVTPI2PD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_cvtpi2pd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src  mm */ { FP64_INT32_C(0, 0)        } },
            { /* =>  xmm */ { FP64_0(0),      FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Normals.
     */
    /* 1*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src  mm */ { FP64_INT32_C(123456789,          -123456789)                     } },
            { /* =>  xmm */ { FP64_V(0,0xd6f3454000000,0x419), FP64_V(1,0xd6f3454000000,0x419) } },
                              /*123456789.0*/                  /*-123456789.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src  mm */ { FP64_INT32_C(-47,                42)                             } },
            { /* =>  xmm */ { FP64_V(1,0x7800000000000,0x404), FP64_V(0,0x5000000000000,0x404) } },
                              /*-47.0*/                        /*42.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src  mm */ { FP64_INT32(INT32_MAX,            -INT32_MAX)                     } },
            { /* =>  xmm */ { FP64_V(0,0xfffffffc00000,0x41d), FP64_V(1,0xfffffffc00000,0x41d) } },
                              /*2147483648.0*/                 /*-2147483648.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src  mm */ { FP64_INT32_C(123456789,          -123456789)                     } },
            { /* =>  xmm */ { FP64_V(0,0xd6f3454000000,0x419), FP64_V(1,0xd6f3454000000,0x419) } },
                              /*123456789.0*/                  /*-123456789.0*/
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src  mm */ { FP64_INT32_C(123456789,          -123456789)                     } },
            { /* =>  xmm */ { FP64_V(0,0xd6f3454000000,0x419), FP64_V(1,0xd6f3454000000,0x419) } },
                              /*123456789.0*/                  /*-123456789.0*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src  mm */ { FP64_INT32_C(123456789,          -123456789)                     } },
            { /* =>  xmm */ { FP64_V(0,0xd6f3454000000,0x419), FP64_V(1,0xd6f3454000000,0x419) } },
                              /*123456789.0*/                  /*-123456789.0*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src  mm */ { FP64_INT32_C(123456789,          -123456789)                     } },
            { /* =>  xmm */ { FP64_V(0,0xd6f3454000000,0x419), FP64_V(1,0xd6f3454000000,0x419) } },
                              /*123456789.0*/                  /*-123456789.0*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
    /*
     * Not invalid, but unusual: Intel define the 'indefinite integer' as 10000...0b
     */
    /* 9*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src  mm */ { FP64_INT32_INDEF(    -47)                            } },
            { /* =>  xmm */ { FP64_V(1,0x0,0x41e), FP64_V(1,0x7800000000000,0x404) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Precision, Infinity, Overflow, Underflow, Denormal, Invalid not possible.
     */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtpi2pd_XMM1_MM1),   255, RM_REG, T_SSE2, XMM1, MM1,   NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(cvtpi2pd_XMM1_FSxBX), 255, RM_MEM, T_SSE2, XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvtpi2pd_XMM8_MM1),   255, RM_REG, T_SSE2, XMM8, MM1,   NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvtpi2pd_XMM8_FSxBX), 255, RM_MEM, T_SSE2, XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig23_6));
}


/*
 * CVTPD2PI.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_cvtpd2pi(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_0(0),      FP64_0(1) } },
            { /* =>   mm */ { FP64_INT32_C(0, 0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INF(1), FP64_INF(0) } },
            { /* =>   mm */ { FP64_INT32_INDEFx2       } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240000000000,0x40f), FP64_V(1,0xe240000000000,0x40f) } },
            { /* =>   mm */ { FP64_INT32_C(123456,             -123456)                        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f) } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>   mm */ { FP64_INT32_C(123457,             -123457)                        } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f) } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>   mm */ { FP64_INT32_C(123456,             -123457)                        } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f) } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>   mm */ { FP64_INT32_C(123457,             -123456)                        } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f) } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>   mm */ { FP64_INT32_C(123456,             -123456)                        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*-0.9*/                         /*0.9*/
            { /* =>   mm */ { FP64_INT32_C(-1,                 1)                              } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /* 8*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(1) } },
            { /* =>   mm */ { FP64_INT32_C(0,     0)                 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(1) } },
            { /* =>   mm */ { FP64_INT32_C(0,     0)                 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*10*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /* =>   mm */ { FP64_INT32_INDEFx2                 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(0) } },
            { /* =>   mm */ { FP64_INT32(INT32_INDEF_C,  INT32_INDEF_C)            } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*12*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_QNAN(0), FP64_QNAN(1)   } },
            { /* =>   mm */ { FP64_INT32_INDEFx2           } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_SNAN(1), FP64_SNAN(0)   } },
            { /* =>   mm */ { FP64_INT32_INDEFx2           } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };


    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtpd2pi_MM1_XMM1),  255, RM_REG, T_SSE2, MM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(cvtpd2pi_MM1_FSxBX), 255, RM_MEM, T_SSE2, MM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvtpd2pi_MM1_XMM8),  255, RM_REG, T_SSE2, MM1, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig23_4));
}


/*
 * CVTTPD2PI.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_cvttpd2pi(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_0(0),      FP64_0(1) } },
            { /* =>   mm */ { FP64_INT32_C(0, 0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INF(1), FP64_INF(0) } },
            { /* =>   mm */ { FP64_INT32_INDEFx2       } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240000000000,0x40f), FP64_V(1,0xe240000000000,0x40f) } },
            { /* =>   mm */ { FP64_INT32_C(123456,             -123456)                        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f) } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>   mm */ { FP64_INT32_C(123456,             -123456)                        } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f) } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>   mm */ { FP64_INT32_C(123456,             -123456)                        } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f) } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>   mm */ { FP64_INT32_C(123456,             -123456)                        } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f) } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>   mm */ { FP64_INT32_C(123456,             -123456)                        } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*-0.9*/                         /*0.9*/
            { /* =>   mm */ { FP64_INT32_C(0,                  0)                              } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /* 8*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(1) } },
            { /* =>   mm */ { FP64_INT32_C(0,     0)                 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(1) } },
            { /* =>   mm */ { FP64_INT32_C(0,     0)                 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*10*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1) } },
            { /* =>   mm */ { FP64_INT32_INDEFx2                 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(0) } },
            { /* =>   mm */ { FP64_INT32(INT32_INDEF_C,  INT32_INDEF_C)            } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*12*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_QNAN(0), FP64_QNAN(1) } },
            { /* =>   mm */ { FP64_INT32_INDEFx2         } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_SNAN(1), FP64_SNAN(0) } },
            { /* =>   mm */ { FP64_INT32_INDEFx2         } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };


    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvttpd2pi_MM1_XMM1),  255, RM_REG, T_SSE2, MM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(cvttpd2pi_MM1_FSxBX), 255, RM_MEM, T_SSE2, MM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvttpd2pi_MM1_XMM8),  255, RM_REG, T_SSE2, MM1, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig23_4));
}


/*
 * CVTSI2SD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvtsi2sd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues32[] =
    {
    /* 0*/{ { /* src r32 */ { FP64_INT32_C(0,     12345)          } },
            { /* src xmm */ { FP64_RAND_V0(0),    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_0(0),          FP64_RAND_x3_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 1*/{ { /* src r32 */ { FP64_INT32_C(123456789,          12345)          } },
            { /* src xmm */ { FP64_RAND_V1(0),                 FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0xd6f3454000000,0x419), FP64_RAND_x3_V2 } },
                              /*123456789.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP64_INT32_C(-123456789,         12345)          } },
            { /* src xmm */ { FP64_RAND_V2(0),                 FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0xd6f3454000000,0x419), FP64_RAND_x3_V2 } },
                              /*-123456789.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP64_INT32_C(-47,                12345)          } },
            { /* src xmm */ { FP64_RAND_V3(0),                 FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0x7800000000000,0x404), FP64_RAND_x3_V2 } },
                              /*-47.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP64_INT32(INT32_MAX,            12345)          } },
            { /* src xmm */ { FP64_RAND_V3(1),                 FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0xfffffffc00000,0x41d), FP64_RAND_x3_V2 } },
                              /*2147483647.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP64_INT32(-INT32_MAX,           12345)          } },
            { /* src xmm */ { FP64_RAND_V2(1),                 FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0xfffffffc00000,0x41d), FP64_RAND_x3_V2 } },
                              /*-2147483647.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP64_INT32_C(123456789,          12345)          } },
            { /* src xmm */ { FP64_RAND_V1(1),                 FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0xd6f3454000000,0x419), FP64_RAND_x3_V2 } },
                              /*123456789.0*/
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP64_INT32_C(123456789,          12345)          } },
            { /* src xmm */ { FP64_RAND_V0(1),                 FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0xd6f3454000000,0x419), FP64_RAND_x3_V2 } },
                              /*123456789.0*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP64_INT32_C(-123456789,         12345)          } },
            { /* src xmm */ { FP64_QNAN(0),                    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0xd6f3454000000,0x419), FP64_RAND_x3_V2 } },
                              /*-123456789.0*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP64_INT32_C(123456789,          12345)          } },
            { /* src xmm */ { FP64_QNAN(1),                    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0xd6f3454000000,0x419), FP64_RAND_x3_V2 } },
                              /*123456789.0*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP64_INT32_C(-123456789,         12345)          } },
            { /* src xmm */ { FP64_SNAN(0),                    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0xd6f3454000000,0x419), FP64_RAND_x3_V2 } },
                              /*-123456789.0*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP64_INT32_C(123456789,          12345)          } },
            { /* src xmm */ { FP64_SNAN(1),                    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0xd6f3454000000,0x419), FP64_RAND_x3_V2 } },
                              /*123456789.0*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /* src r32 */ { FP64_INT32_C(-123456789,         12345)          } },
            { /* src xmm */ { FP64_INF(0),                     FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0xd6f3454000000,0x419), FP64_RAND_x3_V2 } },
                              /*-123456789.0*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
    /*
     * Not invalid, but unusual: Intel define the 'indefinite integer' as 10000...0b
     */
    /*13*/{ { /* src r32 */ { FP64_INT32_INDEF(0) } },
            { /* src xmm */ { FP64_2(1),           FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0x0,0x41e), FP64_RAND_x3_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    };

    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues64[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* src r64 */ { FP64_INT_C(0)                    } },
            { /* src xmm */ { FP64_NORM_V2(1), FP64_RAND_x3_V3 } },
            { /* =>  xmm */ { FP64_0(0),       FP64_RAND_x3_V3 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 1*/{ { /* src r64 */ { FP64_INT_C(123456789)                            } },
            { /* src xmm */ { FP64_QNAN(0),                    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0xd6f3454000000,0x419), FP64_RAND_x3_V2 } },
                              /*123456789.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP64_INT_C(8526495043095935640)/*0x76543210FEDCBA98*/ } },
            { /* src xmm */ { FP64_QNAN(0),                         FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0xd950c843fb72f,0x43d),      FP64_RAND_x3_V2 } },
                                       /*8526495043095936000.0=0x76543210FEDCBC00*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP64_INT_C(-8526495043095935640)/*-0x76543210FEDCBA98*/ } },
            { /* src xmm */ { FP64_QNAN(0),                           FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0xd950c843fb72f,0x43d),        FP64_RAND_x3_V2 } },
                                       /*-8526495043095936000.0=-0x76543210FEDCBC00*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP64_INT_C(-2)                     } },
            { /* src xmm */ { FP64_QNAN(0),      FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0,0x400), FP64_RAND_x3_V2 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP64_INT(INT64_MAX)                  } },
            { /* src xmm */ { FP64_QNAN(0),        FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0x0,0x43e), FP64_RAND_x3_V2 } },
                              /*9223372036854775808.0 = INT64_MAX+1*/
              /*mxcsr:in */ X86_MXCSR_XCPT_MASK,
              /*128:out  */ X86_MXCSR_XCPT_MASK | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP64_INT(-INT64_MAX)                 } },
            { /* src xmm */ { FP64_QNAN(0),        FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0x0,0x43e), FP64_RAND_x3_V2 } },
                              /*-9223372036854775808.0 = -INT64_MAX-1*/
              /*mxcsr:in */ X86_MXCSR_XCPT_MASK,
              /*128:out  */ X86_MXCSR_XCPT_MASK | X86_MXCSR_PE,
              /*256:out  */ -1 },

          { { /* src r64 */ { FP64_INT_C(8526495043095935640)/*0x76543210FEDCBA98*/ } },
            { /* src xmm */ { FP64_QNAN(0),                    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0xd950c843fb72f,0x43d),      FP64_RAND_x3_V2 } },
                                       /*8526495043095936000.0=0x76543210FEDCBC00*/
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP64_INT_C(8526495043095935640)/*0x76543210FEDCBA98*/ } },
            { /* src xmm */ { FP64_QNAN(0),                    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0xd950c843fb72e,0x43d),      FP64_RAND_x3_V2 } },
                                       /*8526495043095934976.0=0x76543210FEDCB800*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP64_INT_C(-8526495043095935640)/*-0x76543210FEDCBA98*/ } },
            { /* src xmm */ { FP64_QNAN(0),                    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0xd950c843fb72f,0x43d),        FP64_RAND_x3_V2 } },
                                       /*-8526495043095936000.0=-0x76543210FEDCBC00*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP64_INT_C(8526495043095935640)/*0x76543210FEDCBA98*/ } },
            { /* src xmm */ { FP64_QNAN(0),                    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0xd950c843fb72f,0x43d),      FP64_RAND_x3_V2 } },
                                       /*8526495043095936000.0=0x76543210FEDCBC00*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP64_INT_C(-8526495043095935640)/*-0x76543210FEDCBA98*/ } },
            { /* src xmm */ { FP64_QNAN(0),                    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0xd950c843fb72e,0x43d),        FP64_RAND_x3_V2 } },
                                       /*-8526495043095934976.0=-0x76543210FEDCB800*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP64_INT_C(8526495043095935640)/*0x76543210FEDCBA98*/ } },
            { /* src xmm */ { FP64_QNAN(0),                    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(0,0xd950c843fb72e,0x43d),      FP64_RAND_x3_V2 } },
                                       /*8526495043095934976.0=0x76543210FEDCB800*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src r64 */ { FP64_INT_C(-8526495043095935640)/*-0x76543210FEDCBA98*/ } },
            { /* src xmm */ { FP64_QNAN(0),                    FP64_RAND_x3_V2 } },
            { /* =>  xmm */ { FP64_V(1,0xd950c843fb72e,0x43d),        FP64_RAND_x3_V2 } },
                                       /*-8526495043095934976.0=-0x76543210FEDCB800*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
    };
    /*
     * Infinity, Overflow, Underflow, Denormal, Invalid not possible.
     */

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtsi2sd_XMM1_EAX),           255,         RM_REG, T_SSE2,    XMM1, XMM1,  EAX,   PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(cvtsi2sd_XMM1_FSxBX_D),       255,         RM_MEM, T_SSE2,    XMM1, XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(cvtsi2sd_XMM8_R8D),           255,         RM_REG, T_SSE2,    XMM8, XMM8,  R8D,   PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(cvtsi2sd_XMM8_FSxBX_D),       255,         RM_MEM, T_SSE2,    XMM8, XMM8,  FSxBX, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(cvtsi2sd_XMM1_RAX),           255,         RM_REG, T_SSE2,    XMM1, XMM1,  RAX,   PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvtsi2sd_XMM1_FSxBX_Q),       255,         RM_MEM, T_SSE2,    XMM1, XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvtsi2sd_XMM8_R8),            255,         RM_REG, T_SSE2,    XMM8, XMM8,  R8,    PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvtsi2sd_XMM8_FSxBX_Q),       255,         RM_MEM, T_SSE2,    XMM8, XMM8,  FSxBX, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_ALL(vcvtsi2sd_XMM1_XMM2_EAX),     255,         RM_REG, T_AVX_128, XMM1, XMM2,  EAX,   PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(vcvtsi2sd_XMM1_XMM2_FSxBX_D), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2,  FSxBX, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(vcvtsi2sd_XMM8_XMM9_R8D),     255,         RM_REG, T_AVX_128, XMM8, XMM9,  R8D,   PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(vcvtsi2sd_XMM8_XMM9_FSxBX_D), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9,  FSxBX, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_386(vcvtsi2sd_XMM1_XMM2_RAX),     BS3_XCPT_UD, RM_REG, T_AVX_128, XMM1, XMM1,  RAX,   PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2sd_XMM1_XMM2_RAX),     255,         RM_REG, T_AVX_128, XMM1, XMM2,  RAX,   PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_386(vcvtsi2sd_XMM1_XMM2_FSxBX_Q), BS3_XCPT_UD, RM_MEM, T_AVX_128, XMM1, XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2sd_XMM1_XMM2_FSxBX_Q), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM2,  FSxBX, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2sd_XMM8_XMM9_R8),      255,         RM_REG, T_AVX_128, XMM8, XMM9,  R8,    PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2sd_XMM8_XMM9_FSxBX_Q), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM9,  FSxBX, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_ALL(vcvtsi2sd_XMM1_XMM1_EAX),     255,         RM_REG, T_AVX_128, XMM1, XMM1,  EAX,   PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(vcvtsi2sd_XMM1_XMM1_FSxBX_D), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(vcvtsi2sd_XMM8_XMM8_R8D),     255,         RM_REG, T_AVX_128, XMM8, XMM8,  R8D,   PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(vcvtsi2sd_XMM8_XMM8_FSxBX_D), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM8,  FSxBX, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_386(vcvtsi2sd_XMM1_XMM1_RAX),     BS3_XCPT_UD, RM_REG, T_AVX_128, XMM1, XMM1,  RAX,   PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2sd_XMM1_XMM1_RAX),     255,         RM_REG, T_AVX_128, XMM1, XMM1,  RAX,   PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_386(vcvtsi2sd_XMM1_XMM1_FSxBX_Q), BS3_XCPT_UD, RM_MEM, T_AVX_128, XMM1, XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2sd_XMM1_XMM1_FSxBX_Q), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2sd_XMM8_XMM8_R8),      255,         RM_REG, T_AVX_128, XMM8, XMM8,  R8,    PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsi2sd_XMM8_XMM8_FSxBX_Q), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, XMM8,  FSxBX, PASS_TEST_ARRAY(s_aValues64) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * CVTSD2SI.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvtsd2si(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues32[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_0(0),       FP64_RAND_x3_V1 } },
            { /* =>  r32 */ { FP64_INT32_C(0, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_0(1),       FP64_RAND_x3_V1 } },
            { /* =>  r32 */ { FP64_INT32_C(0, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 2*/{ { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_INF(1), FP64_RAND_x3_V1 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_INF(0), FP64_RAND_x3_V1 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 4*/{ { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xe240000000000,0x40f)/*123456.0*/ } },
            { /* =>  r32 */ { FP64_INT32_C(123456, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xe240000000000,0x40f)/*-123456.0*/ } },
            { /* =>  r32 */ { FP64_INT32_C(-123456, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(123457, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(-123457, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(123456, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(-123457, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(123457, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(-123456, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(123456, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(-123456, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe)/*-0.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(-1, 0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xccccccccccccd,0x3fe)/*0.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(1, 0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe)/*-0.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(-1, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xccccccccccccd,0x3fe)/*0.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(1, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*18*/{ { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_DENORM_MAX(0), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_C(0, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_DENORM_MIN(1), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_C(0, 0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*20*/{ { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(1), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(0), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_NORM_MAX(0), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_NORM_MAX(1), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*24*/{ { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_QNAN(0), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_SNAN(1), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues64[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_0(0)       } },
            { /* =>  r64 */ { FP64_INT_C(0)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_0(1)       } },
            { /* =>  r64 */ { FP64_INT_C(0)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 2*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INF(1)     } },
            { /* =>  r64 */ { FP64_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INF(0)     } },
            { /* =>  r64 */ { FP64_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 4*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240000000000,0x40f)/*123456.0*/ } },
            { /* =>  r64 */ { FP64_INT_C(123456) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xe240000000000,0x40f)/*-123456.0*/ } },
            { /* =>  r64 */ { FP64_INT_C(-123456) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(123457) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(-123457) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(123456) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(-123457) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(123457) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(-123456) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(123456) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(-123456) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe)/*-0.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(-1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xccccccccccccd,0x3fe)/*0.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe)/*-0.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(-1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xccccccccccccd,0x3fe)/*0.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(1) } },
            { /* =>  r64 */ { FP64_INT_C(-9007199254740991) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(0) } },
            { /* =>  r64 */ { FP64_INT_C(9007199254740991) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xf399b00000000,0x43d)/*8999999652602314752.0*/ } },
            { /* =>  r64 */ { FP64_INT_C(8999999652602314752) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xf399b00000000,0x43d)/*-8999999652602314752.0*/ } },
            { /* =>  r64 */ { FP64_INT_C(-8999999652602314752) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xf399b00000001,0x43d)/*8999999652602315776.0*/ } },
            { /* =>  r64 */ { FP64_INT_C(8999999652602315776) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xf399b00000001,0x43d)/*-8999999652602315776.0*/ } },
            { /* =>  r64 */ { FP64_INT_C(-8999999652602315776) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*24*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_DENORM_MAX(0) } },
            { /* =>  r64 */ { FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_DENORM_MIN(1) } },
            { /* =>  r64 */ { FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*26*/{ { /* unused  */ { FP64_ROW_UNUSED  } },
            { /* src xmm */ { FP64_NORM_MAX(0) } },
            { /* =>  r64 */ { FP64_INT_INDEF   } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED  } },
            { /* src xmm */ { FP64_NORM_MAX(1) } },
            { /* =>  r64 */ { FP64_INT_INDEF   } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*28*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_QNAN(0)    } },
            { /* =>  r64 */ { FP64_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_SNAN(1)    } },
            { /* =>  r64 */ { FP64_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };


    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtsd2si_EAX_XMM1),   255,         RM_REG, T_SSE2,    EAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(cvtsd2si_EAX_FSxBX),  255,         RM_MEM, T_SSE2,    EAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(cvtsd2si_R8D_XMM8),   255,         RM_REG, T_SSE2,    R8D, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(cvtsd2si_R8D_FSxBX),  255,         RM_MEM, T_SSE2,    R8D, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_ALL(vcvtsd2si_EAX_XMM1),  255,         RM_REG, T_AVX_128, EAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(vcvtsd2si_EAX_FSxBX), 255,         RM_MEM, T_AVX_128, EAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(vcvtsd2si_R8D_XMM8),  255,         RM_REG, T_AVX_128, R8D, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(vcvtsd2si_R8D_FSxBX), 255,         RM_MEM, T_AVX_128, R8D, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(cvtsd2si_RAX_XMM1),   255,         RM_REG, T_SSE2,    RAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvtsd2si_RAX_FSxBX),  255,         RM_MEM, T_SSE2,    RAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_C64(cvtsd2si_R8_XMM8),    255,         RM_REG, T_SSE2,    R8,  XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvtsd2si_R8_FSxBX),   255,         RM_MEM, T_SSE2,    R8,  FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_386(vcvtsd2si_RAX_XMM1),  BS3_XCPT_UD, RM_REG, T_AVX_128, RAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsd2si_RAX_XMM1),  255,         RM_REG, T_AVX_128, RAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_386(vcvtsd2si_RAX_FSxBX), BS3_XCPT_UD, RM_MEM, T_AVX_128, RAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsd2si_RAX_FSxBX), 255,         RM_MEM, T_AVX_128, RAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_C64(vcvtsd2si_R8_XMM8),   255,         RM_REG, T_AVX_128, R8,  XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvtsd2si_R8_FSxBX),  255,         RM_MEM, T_AVX_128, R8,  FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * CVTTSD2SI.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvttsd2si(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues32[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_0(0),       FP64_RAND_x3_V1 } },
            { /* =>  r32 */ { FP64_INT32_C(0, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_0(1),       FP64_RAND_x3_V1 } },
            { /* =>  r32 */ { FP64_INT32_C(0, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 2*/{ { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_INF(1), FP64_RAND_x3_V1 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_INF(0), FP64_RAND_x3_V1 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 4*/{ { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xe240000000000,0x40f)/*123456.0*/ } },
            { /* =>  r32 */ { FP64_INT32_C(123456, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xe240000000000,0x40f)/*-123456.0*/ } },
            { /* =>  r32 */ { FP64_INT32_C(-123456, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(123456, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(-123456, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(123456, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(-123456, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(123456, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(-123456, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(123456, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(-123456, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe)/*-0.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(0, 0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xccccccccccccd,0x3fe)/*0.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(0, 0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe)/*-0.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(0, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_V(0,0xccccccccccccd,0x3fe)/*0.9*/ } },
            { /* =>  r32 */ { FP64_INT32_C(0, 0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*18*/{ { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_DENORM_MAX(0), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_C(0, 0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_DENORM_MIN(1), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_C(0, 0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*20*/{ { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(1), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(0), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_NORM_MAX(0), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_NORM_MAX(1), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*24*/{ { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_QNAN(0), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* clr r64 */ { FP64_INT_C(0) } },
            { /* src xmm */ { FP64_SNAN(1), FP64_RAND_x3_V2 } },
            { /* =>  r32 */ { FP64_INT32_INDEF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };
    static BS3CPUINSTR4_TEST1_VALUES_SD_T const s_aValues64[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_0(0) } },
            { /* =>  r64 */ { FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_0(1) } },
            { /* =>  r64 */ { FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 2*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INF(1)     } },
            { /* =>  r64 */ { FP64_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INF(0)     } },
            { /* =>  r64 */ { FP64_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 4*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240000000000,0x40f)/*123456.0*/ } },
            { /* =>  r64 */ { FP64_INT_C(123456) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xe240000000000,0x40f)/*-123456.0*/ } },
            { /* =>  r64 */ { FP64_INT_C(-123456) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(123456) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(-123456) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(123456) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(-123456) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(123456) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(-123456) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(123456) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(-123456) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe)/*-0.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xccccccccccccd,0x3fe)/*0.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe)/*-0.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xccccccccccccd,0x3fe)/*0.9*/ } },
            { /* =>  r64 */ { FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(1) } },
            { /* =>  r64 */ { FP64_INT_C(-9007199254740991) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(0) } },
            { /* =>  r64 */ { FP64_INT_C(9007199254740991) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xf399b00000000,0x43d)/*8999999652602314752.0*/ } },
            { /* =>  r64 */ { FP64_INT_C(8999999652602314752) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xf399b00000000,0x43d)/*-8999999652602314752.0*/ } },
            { /* =>  r64 */ { FP64_INT_C(-8999999652602314752) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xf399b00000001,0x43d)/*8999999652602315776.0*/ } },
            { /* =>  r64 */ { FP64_INT_C(8999999652602315776) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xf399b00000001,0x43d)/*-8999999652602315776.0*/ } },
            { /* =>  r64 */ { FP64_INT_C(-8999999652602315776) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*24*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_DENORM_MAX(0) } },
            { /* =>  r64 */ { FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_DENORM_MIN(1) } },
            { /* =>  r64 */ { FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*26*/{ { /* unused  */ { FP64_ROW_UNUSED  } },
            { /* src xmm */ { FP64_NORM_MAX(0) } },
            { /* =>  r64 */ { FP64_INT_INDEF   } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED  } },
            { /* src xmm */ { FP64_NORM_MAX(1) } },
            { /* =>  r64 */ { FP64_INT_INDEF   } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*28*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_QNAN(0)    } },
            { /* =>  r64 */ { FP64_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_SNAN(1)    } },
            { /* =>  r64 */ { FP64_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };


    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvttsd2si_EAX_XMM1),   255,         RM_REG, T_SSE2,    EAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(cvttsd2si_EAX_FSxBX),  255,         RM_MEM, T_SSE2,    EAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(cvttsd2si_R8D_XMM8),   255,         RM_REG, T_SSE2,    R8D, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(cvttsd2si_R8D_FSxBX),  255,         RM_MEM, T_SSE2,    R8D, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_ALL(vcvttsd2si_EAX_XMM1),  255,         RM_REG, T_AVX_128, EAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_ALL(vcvttsd2si_EAX_FSxBX), 255,         RM_MEM, T_AVX_128, EAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(vcvttsd2si_R8D_XMM8),  255,         RM_REG, T_AVX_128, R8D, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues32) },
        { BS3_INSTR4_C64(vcvttsd2si_R8D_FSxBX), 255,         RM_MEM, T_AVX_128, R8D, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues32) },

        { BS3_INSTR4_C64(cvttsd2si_RAX_XMM1),   255,         RM_REG, T_SSE2,    RAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvttsd2si_RAX_FSxBX),  255,         RM_MEM, T_SSE2,    RAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_C64(cvttsd2si_R8_XMM8),    255,         RM_REG, T_SSE2,    R8,  XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(cvttsd2si_R8_FSxBX),   255,         RM_MEM, T_SSE2,    R8,  FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_386(vcvttsd2si_RAX_XMM1),  BS3_XCPT_UD, RM_REG, T_AVX_128, RAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvttsd2si_RAX_XMM1),  255,         RM_REG, T_AVX_128, RAX, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_386(vcvttsd2si_RAX_FSxBX), BS3_XCPT_UD, RM_MEM, T_AVX_128, RAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvttsd2si_RAX_FSxBX), 255,         RM_MEM, T_AVX_128, RAX, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },

        { BS3_INSTR4_C64(vcvttsd2si_R8_XMM8),   255,         RM_REG, T_AVX_128, R8,  XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues64) },
        { BS3_INSTR4_C64(vcvttsd2si_R8_FSxBX),  255,         RM_MEM, T_AVX_128, R8,  FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues64) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * CVTDQ2PS.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvtdq2ps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0) } },
            { /* =>  ymm */ { FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0),   FP32_0(0)   } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals & Precision.
     */
    /* 1*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_INT_C(-16777215),   FP32_INT_C(16777215),    FP32_INT_C(123457),      FP32_INT_C(-123457),     FP32_INT_C(-1), FP32_INT_C(1) } },
            { /* =>  ymm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_V(1,0x7fffff,0x96), FP32_V(0,0x7fffff,0x96), FP32_V(0,0x712080,0x8f), FP32_V(1,0x712080,0x8f), FP32_1(1),      FP32_1(0)     } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_INT_C(-2), FP32_INT_C(2), FP32_INT(INT32_MAX), FP32_INT(-INT32_MAX), FP32_INT_C(123456789),   FP32_INT_C(-123456789),  FP32_INT_C(-47),         FP32_INT_C(42)          } },
            { /* =>  ymm */ { FP32_2(1),      FP32_2(0),     FP32_V(0,0,0x9e),    FP32_V(1,0,0x9e),     FP32_V(0,0x6b79a3,0x99), FP32_V(1,0x6b79a3,0x99), FP32_V(1,0x3c0000,0x84), FP32_V(0,0x280000,0x84) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_INT_C(-2), FP32_INT_C(2), FP32_INT(INT32_MAX), FP32_INT(-INT32_MAX), FP32_INT_C(123456789),   FP32_INT_C(-123456789),  FP32_INT_C(-47),         FP32_INT_C(42)          } },
            { /* =>  ymm */ { FP32_2(1),      FP32_2(0),     FP32_V(0,0,0x9e),    FP32_V(1,0,0x9e),     FP32_V(0,0x6b79a3,0x99), FP32_V(1,0x6b79a3,0x99), FP32_V(1,0x3c0000,0x84), FP32_V(0,0x280000,0x84) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_INT_C(-2), FP32_INT_C(2), FP32_INT(INT32_MAX), FP32_INT(-INT32_MAX),    FP32_INT_C(123456789),   FP32_INT_C(-123456789),  FP32_INT_C(-47),         FP32_INT_C(42)          } },
            { /* =>  ymm */ { FP32_2(1),      FP32_2(0),     FP32_V(0,0,0x9e),    FP32_V(1,0x7fffff,0x9d), FP32_V(0,0x6b79a3,0x99), FP32_V(1,0x6b79a2,0x99), FP32_V(1,0x3c0000,0x84), FP32_V(0,0x280000,0x84) } },
                                                                    /*2147483648.0*/     /*-2147483520.0*/          /*123456792.0*/          /*-123456784.0*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_INT_C(-2), FP32_INT_C(2), FP32_INT(INT32_MAX),     FP32_INT(-INT32_MAX), FP32_INT_C(123456789),   FP32_INT_C(-123456789),  FP32_INT_C(-47),         FP32_INT_C(42)          } },
            { /* =>  ymm */ { FP32_2(1),      FP32_2(0),     FP32_V(0,0x7fffff,0x9d), FP32_V(1,0,0x9e),     FP32_V(0,0x6b79a2,0x99), FP32_V(1,0x6b79a3,0x99), FP32_V(1,0x3c0000,0x84), FP32_V(0,0x280000,0x84) } },
                                                                    /*2147483520.0*/         /*-2147483648.0*/       /*123456784.0*/          /*-123456792.0*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_INT_C(-2), FP32_INT_C(2), FP32_INT(INT32_MAX),     FP32_INT(-INT32_MAX),    FP32_INT_C(123456789),   FP32_INT_C(-123456789),  FP32_INT_C(-47),         FP32_INT_C(42)          } },
            { /* =>  ymm */ { FP32_2(1),      FP32_2(0),     FP32_V(0,0x7fffff,0x9d), FP32_V(1,0x7fffff,0x9d), FP32_V(0,0x6b79a2,0x99), FP32_V(1,0x6b79a2,0x99), FP32_V(1,0x3c0000,0x84), FP32_V(0,0x280000,0x84) } },
                                                                    /*2147483520.0*/         /*-2147483520.0*/       /*123456784.0*/          /*-123456784.0*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
    /*
     * Not invalid, but unusual: Intel define the 'indefinite integer' as 10000...0b
     */
    /* 7*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_INT_INDEF   } },
            { /* =>  ymm */ { FP32_V(1,0,0x9e), FP32_V(1,0,0x9e), FP32_V(1,0,0x9e), FP32_V(1,0,0x9e), FP32_V(1,0,0x9e), FP32_V(1,0,0x9e), FP32_V(1,0,0x9e), FP32_V(1,0,0x9e) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity, Overflow, Underflow, Denormal, Invalid not possible.
     */
    };


    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtdq2ps_XMM1_XMM2),   255,         RM_REG, T_SSE2,    XMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(cvtdq2ps_XMM1_FSxBX),  X86_XCPT_AC, RM_MEM, T_SSE2,    XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vcvtdq2ps_XMM1_XMM2),  255,         RM_REG, T_AVX_128, XMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtdq2ps_XMM1_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vcvtdq2ps_YMM1_YMM2),  255,         RM_REG, T_AVX_256, YMM1, YMM2,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtdq2ps_YMM1_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_256, YMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(cvtdq2ps_XMM1_XMM1),   255,         RM_REG, T_SSE2,    XMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtdq2ps_XMM1_XMM1),  255,         RM_REG, T_AVX_128, XMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtdq2ps_YMM1_YMM1),  255,         RM_REG, T_AVX_256, YMM1, YMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(cvtdq2ps_XMM8_XMM9),   255,         RM_REG, T_SSE2,    XMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvtdq2ps_XMM8_FSxBX),  X86_XCPT_AC, RM_MEM, T_SSE2,    XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vcvtdq2ps_XMM8_XMM9),  255,         RM_REG, T_AVX_128, XMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtdq2ps_XMM8_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vcvtdq2ps_YMM8_YMM9),  255,         RM_REG, T_AVX_256, YMM8, YMM9,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtdq2ps_YMM8_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_256, YMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(cvtdq2ps_XMM8_XMM8),   255,         RM_REG, T_SSE2,    XMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtdq2ps_XMM8_XMM8),  255,         RM_REG, T_AVX_128, XMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtdq2ps_YMM8_YMM8),  255,         RM_REG, T_AVX_256, YMM8, YMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * CVTPS2DQ.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvtps2dq(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_0(0),   FP32_0(1),   FP32_0(0),   FP32_0(1),   FP32_0(0)   } },
            { /* =>  ymm */ { FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_INF(0),    FP32_INF(1),    FP32_INF(1),    FP32_INF(0),    FP32_INF(1),    FP32_INF(0),    FP32_INF(1),    FP32_INF(0)    } },
            { /* =>  ymm */ { FP32_INT_INDEF, FP32_INT_INDEF, FP32_INT_INDEF, FP32_INT_INDEF, FP32_INT_INDEF, FP32_INT_INDEF, FP32_INT_INDEF, FP32_INT_INDEF } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_V(0,0x666666,0x7e)/*0.9*/ } },
            { /* =>  ymm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_INT_C(-16777215),     FP32_INT_C(16777215),      FP32_INT_C(123457),                  FP32_INT_C(-123457),                  FP32_INT_C(-1),                  FP32_INT_C(1)                  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_V(0,0x666666,0x7e)/*0.9*/ } },
            { /* =>  ymm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_INT_C(-16777215),     FP32_INT_C(16777215),      FP32_INT_C(123456),                  FP32_INT_C(-123457),                  FP32_INT_C(-1),                  FP32_INT_C(0)                  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_V(0,0x666666,0x7e)/*0.9*/ } },
            { /* =>  ymm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_INT_C(-16777215),     FP32_INT_C(16777215),      FP32_INT_C(123457),                  FP32_INT_C(-123456),                  FP32_INT_C(0),                   FP32_INT_C(1)                  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_V(0,0x666666,0x7e)/*0.9*/ } },
            { /* =>  ymm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_INT_C(-16777215),     FP32_INT_C(16777215),      FP32_INT_C(123456),                  FP32_INT_C(-123456),                  FP32_INT_C(0),                   FP32_INT_C(0)                  } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_V(0,0x666666,0x7e)/*0.9*/ } },
            { /* =>  ymm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_INT_C(-16777215),     FP32_INT_C(16777215),      FP32_INT_C(123457),                  FP32_INT_C(-123457),                  FP32_INT_C(-1),                  FP32_INT_C(1)                  } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_PE },
    /*
     * Denormals.
     */
    /* 7*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_V0(1), FP32_DENORM_V1(0), FP32_DENORM_V2(1), FP32_DENORM_V3(0) } },
            { /* =>  ymm */ { FP32_INT(0),        FP32_INT(0),        FP32_INT(0),        FP32_INT(0),        FP32_INT(0),       FP32_INT(0),       FP32_INT(0),       FP32_INT(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_V0(1), FP32_DENORM_V1(0), FP32_DENORM_V2(1), FP32_DENORM_V3(0) } },
            { /* =>  ymm */ { FP32_INT(0),        FP32_INT(0),        FP32_INT(0),        FP32_INT(0),        FP32_INT(0),       FP32_INT(0),       FP32_INT(0),       FP32_INT(0)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
    /*
     * Overflow (Underflow not possible).
     */
    /* 9*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_RAND_V1(1), FP32_NORM_V5(0), FP32_RAND_V7(1), FP32_RAND_V2(0), FP32_NORM_V3(1), FP32_NORM_V3(0) } },
            { /* =>  ymm */ { FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
    /*
     * Invalids.
     */
    /*10*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_QNAN_MAX(0), FP32_QNAN_MAX(1), FP32_QNAN_V1(1), FP32_QNAN_V5(0), FP32_QNAN_V7(1), FP32_QNAN_V2(0), FP32_QNAN_V3(1), FP32_QNAN_V3(0) } },
            { /* =>  ymm */ { FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_SNAN_MAX(0), FP32_SNAN_MAX(1), FP32_SNAN_V1(1), FP32_SNAN_V5(0), FP32_SNAN_V7(1), FP32_SNAN_V2(0), FP32_SNAN_V3(1), FP32_SNAN_V3(0) } },
            { /* =>  ymm */ { FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
    };


    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtps2dq_XMM1_XMM2),   255,         RM_REG, T_SSE2,    XMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(cvtps2dq_XMM1_FSxBX),  X86_XCPT_AC, RM_MEM, T_SSE2,    XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vcvtps2dq_XMM1_XMM2),  255,         RM_REG, T_AVX_128, XMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtps2dq_XMM1_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vcvtps2dq_YMM1_YMM2),  255,         RM_REG, T_AVX_256, YMM1, YMM2,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtps2dq_YMM1_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_256, YMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(cvtps2dq_XMM1_XMM1),   255,         RM_REG, T_SSE2,    XMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtps2dq_XMM1_XMM1),  255,         RM_REG, T_AVX_128, XMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtps2dq_YMM1_YMM1),  255,         RM_REG, T_AVX_256, YMM1, YMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(cvtps2dq_XMM8_XMM9),   255,         RM_REG, T_SSE2,    XMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvtps2dq_XMM8_FSxBX),  X86_XCPT_AC, RM_MEM, T_SSE2,    XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vcvtps2dq_XMM8_XMM9),  255,         RM_REG, T_AVX_128, XMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtps2dq_XMM8_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vcvtps2dq_YMM8_YMM9),  255,         RM_REG, T_AVX_256, YMM8, YMM9,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtps2dq_YMM8_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_256, YMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(cvtps2dq_XMM8_XMM8),   255,         RM_REG, T_SSE2,    XMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtps2dq_XMM8_XMM8),  255,         RM_REG, T_AVX_128, XMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtps2dq_YMM8_YMM8),  255,         RM_REG, T_AVX_256, YMM8, YMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * CVTTPS2DQ.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvttps2dq(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_0(0),   FP32_0(1),   FP32_0(1),   FP32_0(0),   FP32_0(1),   FP32_0(0),   FP32_0(1),   FP32_0(0)   } },
            { /* =>  ymm */ { FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0), FP32_INT(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_INF(0),    FP32_INF(1),    FP32_INF(1),    FP32_INF(0),    FP32_INF(1),    FP32_INF(0),    FP32_INF(1),    FP32_INF(0)    } },
            { /* =>  ymm */ { FP32_INT_INDEF, FP32_INT_INDEF, FP32_INT_INDEF, FP32_INT_INDEF, FP32_INT_INDEF, FP32_INT_INDEF, FP32_INT_INDEF, FP32_INT_INDEF } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_V(0,0x666666,0x7e)/*0.9*/ } },
            { /* =>  ymm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_INT_C(-16777215),     FP32_INT_C(16777215),      FP32_INT_C(123456),                  FP32_INT_C(-123456),                  FP32_INT_C(0),                   FP32_INT_C(0)                  } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_V(0,0x666666,0x7e)/*0.9*/ } },
            { /* =>  ymm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_INT_C(-16777215),     FP32_INT_C(16777215),      FP32_INT_C(123456),                  FP32_INT_C(-123456),                  FP32_INT_C(0),                   FP32_INT_C(0)                  } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN | X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_V(0,0x666666,0x7e)/*0.9*/ } },
            { /* =>  ymm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_INT_C(-16777215),     FP32_INT_C(16777215),      FP32_INT_C(123456),                  FP32_INT_C(-123456),                  FP32_INT_C(0),                   FP32_INT_C(0)                  } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP | X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_V(0,0x666666,0x7e)/*0.9*/ } },
            { /* =>  ymm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_INT_C(-16777215),     FP32_INT_C(16777215),      FP32_INT_C(123456),                  FP32_INT_C(-123456),                  FP32_INT_C(0),                   FP32_INT_C(0)                  } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO | X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_V(0,0x712000,0x8f), FP32_V(1,0x712000,0x8f), FP32_NORM_SAFE_INT_MAX(1), FP32_NORM_SAFE_INT_MAX(0), FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_V(0,0x666666,0x7e)/*0.9*/ } },
            { /* =>  ymm */ { FP32_INT_C(123456),      FP32_INT_C(-123456),     FP32_INT_C(-16777215),     FP32_INT_C(16777215),      FP32_INT_C(123456),                  FP32_INT_C(-123456),                  FP32_INT_C(0),                   FP32_INT_C(0)                  } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ | X86_MXCSR_PE },
    /*
     * Denormals.
     */
    /* 7*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_V0(1), FP32_DENORM_V1(0), FP32_DENORM_V2(1), FP32_DENORM_V3(0) } },
            { /* =>  ymm */ { FP32_INT(0),        FP32_INT(0),        FP32_INT(0),        FP32_INT(0),        FP32_INT(0),       FP32_INT(0),       FP32_INT(0),       FP32_INT(0)       } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_PE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0), FP32_DENORM_MIN(1), FP32_DENORM_V0(1), FP32_DENORM_V1(0), FP32_DENORM_V2(1), FP32_DENORM_V3(0) } },
            { /* =>  ymm */ { FP32_INT(0),        FP32_INT(0),        FP32_INT(0),        FP32_INT(0),        FP32_INT(0),       FP32_INT(0),       FP32_INT(0),       FP32_INT(0)       } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
    /*
     * Overflow (Underflow not possible).
     */
    /* 9*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_NORM_MAX(0), FP32_NORM_MAX(1), FP32_RAND_V1(1), FP32_NORM_V5(0), FP32_RAND_V7(1), FP32_RAND_V2(0), FP32_NORM_V3(1), FP32_NORM_V3(0) } },
            { /* =>  ymm */ { FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
    /*
     * Invalids.
     */
    /*10*/{ { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_QNAN_MAX(0), FP32_QNAN_MAX(1), FP32_QNAN_V1(1), FP32_QNAN_V5(0), FP32_QNAN_V7(1), FP32_QNAN_V2(0), FP32_QNAN_V3(1), FP32_QNAN_V3(0) } },
            { /* =>  ymm */ { FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
          { { /* unused  */ { FP32_ROW_UNUSED } },
            { /* src ymm */ { FP32_SNAN_MAX(0), FP32_SNAN_MAX(1), FP32_SNAN_V1(1), FP32_SNAN_V5(0), FP32_SNAN_V7(1), FP32_SNAN_V2(0), FP32_SNAN_V3(1), FP32_SNAN_V3(0) } },
            { /* =>  ymm */ { FP32_INT_INDEF,   FP32_INT_INDEF,   FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF,  FP32_INT_INDEF  } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
    };


    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvttps2dq_XMM1_XMM2),   255,         RM_REG, T_SSE2,    XMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(cvttps2dq_XMM1_FSxBX),  X86_XCPT_AC, RM_MEM, T_SSE2,    XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vcvttps2dq_XMM1_XMM2),  255,         RM_REG, T_AVX_128, XMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvttps2dq_XMM1_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vcvttps2dq_YMM1_YMM2),  255,         RM_REG, T_AVX_256, YMM1, YMM2,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvttps2dq_YMM1_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_256, YMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(cvttps2dq_XMM1_XMM1),   255,         RM_REG, T_SSE2,    XMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvttps2dq_XMM1_XMM1),  255,         RM_REG, T_AVX_128, XMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvttps2dq_YMM1_YMM1),  255,         RM_REG, T_AVX_256, YMM1, YMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(cvttps2dq_XMM8_XMM9),   255,         RM_REG, T_SSE2,    XMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvttps2dq_XMM8_FSxBX),  X86_XCPT_AC, RM_MEM, T_SSE2,    XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vcvttps2dq_XMM8_XMM9),  255,         RM_REG, T_AVX_128, XMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvttps2dq_XMM8_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vcvttps2dq_YMM8_YMM9),  255,         RM_REG, T_AVX_256, YMM8, YMM9,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvttps2dq_YMM8_FSxBX), X86_XCPT_AC, RM_MEM, T_AVX_256, YMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(cvttps2dq_XMM8_XMM8),   255,         RM_REG, T_SSE2,    XMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvttps2dq_XMM8_XMM8),  255,         RM_REG, T_AVX_128, XMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvttps2dq_YMM8_YMM8),  255,         RM_REG, T_AVX_256, YMM8, YMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * CVTDQ2PD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvtdq2pd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INT32_C(0, 0),        FP64_INT32_C(0, 0)        } },
            { /* =>  ymm */ { FP64_0(0),      FP64_0(0), FP64_0(0),      FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals.
     */
    /* 1*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INT32_C(123456789,          -123456789),                     FP64_INT32_C(-47,                42)                             } },
            { /* =>  ymm */ { FP64_V(0,0xd6f3454000000,0x419), FP64_V(1,0xd6f3454000000,0x419), FP64_V(1,0x7800000000000,0x404), FP64_V(0,0x5000000000000,0x404) } },
                              /*123456789.0*/                  /*-123456789.0*/                 /*-47.0*/                        /*42.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INT32(INT32_MAX,            -2),       FP64_INT32_C(-1, -0)       } },
            { /* =>  ymm */ { FP64_V(0,0xfffffffc00000,0x41d), FP64_2(1), FP64_1(1),       FP64_0(0) } },
                              /*2147483648.0*/
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INT32(INT32_MAX,            2),        FP64_INT32_C(1, 0)        } },
            { /* =>  ymm */ { FP64_V(0,0xfffffffc00000,0x41d), FP64_2(0), FP64_1(0),      FP64_0(0) } },
                              /*2147483648.0*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INT32(INT32_MAX,            -INT32_MAX),                     FP64_INT32_C(123456789,          -123456789)                     } },
            { /* =>  ymm */ { FP64_V(0,0xfffffffc00000,0x41d), FP64_V(1,0xfffffffc00000,0x41d), FP64_V(0,0xd6f3454000000,0x419), FP64_V(1,0xd6f3454000000,0x419) } },
                              /*2147483648.0*/                 /*-2147483648.0*/                /*123456789.0*/                  /*-123456789.0*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INT32(INT32_MAX,            -INT32_MAX),                     FP64_INT32_C(123456789,          -123456789)                     } },
            { /* =>  ymm */ { FP64_V(0,0xfffffffc00000,0x41d), FP64_V(1,0xfffffffc00000,0x41d), FP64_V(0,0xd6f3454000000,0x419), FP64_V(1,0xd6f3454000000,0x419) } },
                              /*2147483648.0*/                 /*-2147483648.0*/                /*123456789.0*/                  /*-123456789.0*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
    /*
     * Not invalid, but unusual: Intel define the 'indefinite integer' as 10000...0b
     */
    /* 6*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INT32_INDEF(    -47),                            FP64_INT32_INDEF(    -47)                            } },
            { /* =>  ymm */ { FP64_V(1,0x0,0x41e), FP64_V(1,0x7800000000000,0x404), FP64_V(1,0x0,0x41e), FP64_V(1,0x7800000000000,0x404) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Precision, Infinity, Overflow, Underflow, Denormal, Invalid not possible.
     */
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtdq2pd_XMM1_XMM2),   255,             RM_REG,    T_SSE2,    XMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValues) },
#ifdef TODO_CVTDQ2PD_M64_IEM /** @todo THIS FAILS ON IEM: unexpected #GP */
        { BS3_INSTR4_ALL(cvtdq2pd_XMM1_FSxBX),  X86_XCPT_AC,     RM_MEM,    T_SSE2,    XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },
#endif /* TODO_CVTDQ2PD_M64_IEM */

        { BS3_INSTR4_ALL(vcvtdq2pd_XMM1_XMM2),  255,             RM_REG,    T_AVX_128, XMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtdq2pd_XMM1_FSxBX), X86_XCPT_AC,     RM_MEM,    T_AVX_128, XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vcvtdq2pd_YMM1_XMM2),  255,             RM_REG,    T_AVX_256, YMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtdq2pd_YMM1_FSxBX), BS3_XCPT_NOT_AC, RM_MEM128, T_AVX_256, YMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(cvtdq2pd_XMM1_XMM1),   255,             RM_REG,    T_SSE2,    XMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtdq2pd_XMM1_XMM1),  255,             RM_REG,    T_AVX_128, XMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtdq2pd_YMM1_XMM1),  255,             RM_REG,    T_AVX_256, YMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(cvtdq2pd_XMM8_XMM9),   255,             RM_REG,    T_SSE2,    XMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValues) },
#ifdef TODO_CVTDQ2PD_M64_IEM /** @todo THIS FAILS ON IEM: unexpected #GP */
        { BS3_INSTR4_C64(cvtdq2pd_XMM8_FSxBX),  X86_XCPT_AC,     RM_MEM,    T_SSE2,    XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },
#endif /* TODO_CVTDQ2PD_M64_IEM */

        { BS3_INSTR4_C64(vcvtdq2pd_XMM8_XMM9),  255,             RM_REG,    T_AVX_128, XMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtdq2pd_XMM8_FSxBX), X86_XCPT_AC,     RM_MEM,    T_AVX_128, XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vcvtdq2pd_YMM8_XMM9),  255,             RM_REG,    T_AVX_256, YMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtdq2pd_YMM8_FSxBX), BS3_XCPT_NOT_AC, RM_MEM128, T_AVX_128, YMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(cvtdq2pd_XMM8_XMM8),   255,             RM_REG,    T_SSE2,    XMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtdq2pd_XMM8_XMM8),  255,             RM_REG,    T_AVX_128, XMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtdq2pd_YMM8_XMM8),  255,             RM_REG,    T_AVX_256, YMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig5));
}


/*
 * CVTPD2DQ.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvtpd2dq(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesX[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_0(0), FP64_0(0)               } },
            { /* =>  xmm */ { FP64_INT32_C(0, 0),  FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INF(1), FP64_INF(0)               } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,      FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240000000000,0x40f), FP64_V(1,0xe240000000000,0x40f)               } },
                              /*123456*/                       /*-123456*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                       FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)               } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>  xmm */ { FP64_INT32_C(123457,             -123457),                       FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe)               } },
                              /*-0.9*/                         /*0.9*/
            { /* =>  xmm */ { FP64_INT32_C(-1,                 1),                             FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },

          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)               } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123457),                       FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)               } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>  xmm */ { FP64_INT32_C(123457,             -123456),                       FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)               } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                       FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /* 8*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(1)               } },
            { /* =>  xmm */ { FP64_INT32_C(0,     0),                FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(1)               } },
            { /* =>  xmm */ { FP64_INT32_C(0,     0),                FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*10*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1)               } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,                FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(0)               } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,                                  FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*12*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_QNAN(0), FP64_QNAN(1)               } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,        FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_SNAN(1), FP64_SNAN(0)               } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,        FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesY[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_0(0),      FP64_0(0), FP64_0(0),      FP64_0(0) } },
            { /* =>  xmm */ { FP64_INT32_C(0, 0),        FP64_INT32_C(0, 0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_INF(1), FP64_INF(0), FP64_INF(0), FP64_INF(1) } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,       FP64_INT32_INDEFx2       } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_V(0,0xe240000000000,0x40f), FP64_V(1,0xe240000000000,0x40f), FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f) } },
                              /*123456*/                       /*-123456*/                      /*123456.9*/                     /*-123456.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                        FP64_INT32_C(123457,             -123457)                        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f), FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* =>  xmm */ { FP64_INT32_C(123457,             -123457),                        FP64_INT32_C(-1,                 1)                              } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_FZ },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f), FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123457),                        FP64_INT32_C(-1,                 0)                              } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f), FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* =>  xmm */ { FP64_INT32_C(123457,             -123456),                        FP64_INT32_C(0,                  1)                              } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f), FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                        FP64_INT32_C(0,                  0)                              } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO },
    /*
     * Denormals.
     */
    /* 7*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(1) } },
            { /* =>  xmm */ { FP64_INT32_C(0,     0),                 FP64_INT32_C(0,     0)                 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_PE },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(1) } },
            { /* =>  xmm */ { FP64_INT32_C(0,     0),                 FP64_INT32_C(0,     0)                 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
    /*
     * Overflow (Underflow not possible).
     */
    /* 9*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(0) } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,                 FP64_INT32_INDEFx2                                   } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
    /*
     * Invalids.
     */
    /*10*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_QNAN(0), FP64_QNAN(1), FP64_SNAN(1), FP64_SNAN(0) } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,         FP64_INT32_INDEFx2         } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtpd2dq_XMM1_XMM2),     255,         RM_REG, T_SSE2,    XMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_ALL(cvtpd2dq_XMM1_FSxBX),    X86_XCPT_AC, RM_MEM, T_SSE2,    XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValuesX) },

        { BS3_INSTR4_ALL(vcvtpd2dq_XMM1_XMM2),    255,         RM_REG, T_AVX_128, XMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_ALL(vcvtpd2dq_XMM1_FSxBX),   X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValuesX) },

        { BS3_INSTR4_ALL(vcvtpd2dq_XMM1_YMM2),    255,         RM_REG, T_AVX_256, XMM1, YMM2,  NOREG, PASS_TEST_ARRAY(s_aValuesY) },
        { BS3_INSTR4_ALL(vcvtpd2dq_XMM1_FSxBX_Y), X86_XCPT_AC, RM_MEM, T_AVX_256, XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValuesY) },

        { BS3_INSTR4_ALL(cvtpd2dq_XMM1_XMM1),     255,         RM_REG, T_SSE2,    XMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_ALL(vcvtpd2dq_XMM1_XMM1),    255,         RM_REG, T_AVX_128, XMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_ALL(vcvtpd2dq_XMM1_YMM1),    255,         RM_REG, T_AVX_256, XMM1, YMM1,  NOREG, PASS_TEST_ARRAY(s_aValuesY) },

        { BS3_INSTR4_C64(cvtpd2dq_XMM8_XMM9),     255,         RM_REG, T_SSE2,    XMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_C64(cvtpd2dq_XMM8_FSxBX),    X86_XCPT_AC, RM_MEM, T_SSE2,    XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValuesX) },

        { BS3_INSTR4_C64(vcvtpd2dq_XMM8_XMM9),    255,         RM_REG, T_AVX_128, XMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_C64(vcvtpd2dq_XMM8_FSxBX),   X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValuesX) },

        { BS3_INSTR4_C64(vcvtpd2dq_XMM8_YMM9),    255,         RM_REG, T_AVX_256, XMM8, YMM9,  NOREG, PASS_TEST_ARRAY(s_aValuesY) },
        { BS3_INSTR4_C64(vcvtpd2dq_XMM8_FSxBX_Y), X86_XCPT_AC, RM_MEM, T_AVX_256, XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValuesY) },

        { BS3_INSTR4_C64(cvtpd2dq_XMM8_XMM8),     255,         RM_REG, T_SSE2,    XMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_C64(vcvtpd2dq_XMM8_XMM8),    255,         RM_REG, T_AVX_128, XMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_C64(vcvtpd2dq_XMM8_YMM8),    255,         RM_REG, T_AVX_256, XMM8, YMM8,  NOREG, PASS_TEST_ARRAY(s_aValuesY) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * CVTTPD2DQ.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvttpd2dq(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesX[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_0(0), FP64_0(0)               } },
            { /* =>  xmm */ { FP64_INT32_C(0, 0),  FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_INF(1), FP64_INF(0)               } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,      FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240000000000,0x40f), FP64_V(1,0xe240000000000,0x40f)               } },
                              /*123456*/                       /*-123456*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                       FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)               } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                       FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe)               } },
                              /*-0.9*/                         /*0.9*/
            { /* =>  xmm */ { FP64_INT32_C(0,                  0),                             FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },

          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)               } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                       FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)               } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                       FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)               } },
                              /*123456.9*/                     /*-123456.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                       FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /* 8*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(1)               } },
            { /* =>  xmm */ { FP64_INT32_C(0,     0),                FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(1)               } },
            { /* =>  xmm */ { FP64_INT32_C(0,     0),                FP64_INT_C(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow (Underflow not possible).
     */
    /*10*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1)               } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,                FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(0)               } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,                                  FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*12*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_QNAN(0), FP64_QNAN(1)               } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,        FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src xmm */ { FP64_SNAN(1), FP64_SNAN(0)               } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,        FP64_INT_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };
    static BS3CPUINSTR4_TEST1_VALUES_PD_T const s_aValuesY[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_0(0),      FP64_0(0), FP64_0(0),      FP64_0(0) } },
            { /* =>  xmm */ { FP64_INT32_C(0, 0),        FP64_INT32_C(0, 0)        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_INF(1), FP64_INF(0), FP64_INF(0), FP64_INF(1) } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,       FP64_INT32_INDEFx2       } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_V(0,0xe240000000000,0x40f), FP64_V(1,0xe240000000000,0x40f), FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f) } },
                              /*123456*/                       /*-123456*/                      /*123456.9*/                     /*-123456.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                        FP64_INT32_C(123456,             -123456)                        } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_PE },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f), FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                        FP64_INT32_C(0,                  0)                              } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_FZ },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f), FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                        FP64_INT32_C(0,                  0)                              } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f), FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                        FP64_INT32_C(0,                  0)                              } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f), FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* =>  xmm */ { FP64_INT32_C(123456,             -123456),                        FP64_INT32_C(0,                  0)                              } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO },
    /*
     * Denormals.
     */
    /* 7*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(1) } },
            { /* =>  xmm */ { FP64_INT32_C(0,     0),                 FP64_INT32_C(0,     0)                 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ X86_MXCSR_PE },
          { { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(1) } },
            { /* =>  xmm */ { FP64_INT32_C(0,     0),                 FP64_INT32_C(0,     0)                 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
    /*
     * Overflow (Underflow not possible).
     */
    /* 9*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(0) } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,                 FP64_INT32_INDEFx2                                   } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
    /*
     * Invalids.
     */
    /*10*/{ { /* unused  */ { FP64_ROW_UNUSED } },
            { /* src ymm */ { FP64_QNAN(0), FP64_QNAN(1), FP64_SNAN(1), FP64_SNAN(0) } },
            { /* =>  xmm */ { FP64_INT32_INDEFx2,         FP64_INT32_INDEFx2         } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ X86_MXCSR_IE },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvttpd2dq_XMM1_XMM2),     255,         RM_REG, T_SSE2,    XMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_ALL(cvttpd2dq_XMM1_FSxBX),    X86_XCPT_AC, RM_MEM, T_SSE2,    XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValuesX) },

        { BS3_INSTR4_ALL(vcvttpd2dq_XMM1_XMM2),    255,         RM_REG, T_AVX_128, XMM1, XMM2,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_ALL(vcvttpd2dq_XMM1_FSxBX),   X86_XCPT_AC, RM_MEM, T_AVX_128, XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValuesX) },

        { BS3_INSTR4_ALL(vcvttpd2dq_XMM1_YMM2),    255,         RM_REG, T_AVX_256, XMM1, YMM2,  NOREG, PASS_TEST_ARRAY(s_aValuesY) },
        { BS3_INSTR4_ALL(vcvttpd2dq_XMM1_FSxBX_Y), X86_XCPT_AC, RM_MEM, T_AVX_256, XMM1, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValuesY) },

        { BS3_INSTR4_ALL(cvttpd2dq_XMM1_XMM1),     255,         RM_REG, T_SSE2,    XMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_ALL(vcvttpd2dq_XMM1_XMM1),    255,         RM_REG, T_AVX_128, XMM1, XMM1,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_ALL(vcvttpd2dq_XMM1_YMM1),    255,         RM_REG, T_AVX_256, XMM1, YMM1,  NOREG, PASS_TEST_ARRAY(s_aValuesY) },

        { BS3_INSTR4_C64(cvttpd2dq_XMM8_XMM9),     255,         RM_REG, T_SSE2,    XMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_C64(cvttpd2dq_XMM8_FSxBX),    X86_XCPT_AC, RM_MEM, T_SSE2,    XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValuesX) },

        { BS3_INSTR4_C64(vcvttpd2dq_XMM8_XMM9),    255,         RM_REG, T_AVX_128, XMM8, XMM9,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_C64(vcvttpd2dq_XMM8_FSxBX),   X86_XCPT_AC, RM_MEM, T_AVX_128, XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValuesX) },

        { BS3_INSTR4_C64(vcvttpd2dq_XMM8_YMM9),    255,         RM_REG, T_AVX_256, XMM8, YMM9,  NOREG, PASS_TEST_ARRAY(s_aValuesY) },
        { BS3_INSTR4_C64(vcvttpd2dq_XMM8_FSxBX_Y), X86_XCPT_AC, RM_MEM, T_AVX_256, XMM8, FSxBX, NOREG, PASS_TEST_ARRAY(s_aValuesY) },

        { BS3_INSTR4_C64(cvttpd2dq_XMM8_XMM8),     255,         RM_REG, T_SSE2,    XMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_C64(vcvttpd2dq_XMM8_XMM8),    255,         RM_REG, T_AVX_128, XMM8, XMM8,  NOREG, PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_C64(vcvttpd2dq_XMM8_YMM8),    255,         RM_REG, T_AVX_256, YMM8, YMM8,  NOREG, PASS_TEST_ARRAY(s_aValuesY) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * CVTPD2PS.
 */
/** @todo 'BS3_MXCSR_PE_FUZZY' in this test function indicates IEM outages */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvtpd2ps(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD2PS_T const s_aValuesX[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* src xmm */ { FP64_0(0), FP64_0(1)                  } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_0(0), FP32_0(1), FP32_INT64_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* src xmm */ { FP64_INF(1), FP64_INF(0)                  } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_INF(1), FP32_INF(0), FP32_INT64_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* src xmm */ { FP64_V(0,0xe240000000000,0x40f), FP64_V(1,0xe240000000000,0x40f)                 } },
                              /*123456*/                       /*-123456*/
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_V(0,0x712000,0x8f),         FP32_V(1,0x712000,0x8f),        FP32_INT64_C(0) } },
                              /*123456*/                       /*-123456*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)                 } },
                              /*123456.9*/                     /*-123456.9*/
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712073,0x8f),        FP32_INT64_C(0) } },
                              /*123456.9*/                     /*-123456.9*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)                 } },
                              /*123456.9*/                     /*-123456.9*/
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712073,0x8f),        FP32_INT64_C(0) } },
                              /*123456.9*/                     /*-123456.9*/
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe)                 } },
                              /*-0.9*/                         /*0.9*/
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_V(1,0x666666,0x7e),         FP32_V(0,0x666666,0x7e),        FP32_INT64_C(0) } },
                              /*-0.9*/                         /*0.9*/
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)                 } },
                              /*123456.9*/                     /*-123456.9*/
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712074,0x8f),        FP32_INT64_C(0) } },
                              /*123456.9*/                     /*-123456.9[DOWN]*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)                 } },
                              /*123456.9*/                     /*-123456.9*/
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_V(0,0x712074,0x8f),         FP32_V(1,0x712073,0x8f),        FP32_INT64_C(0) } },
                              /*123456.9[UP]*/                 /*-123456.9*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f)                 } },
                              /*123456.9*/                     /*-123456.9*/
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712073,0x8f),        FP32_INT64_C(0) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(0)                 } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_V(1,0x0,0xb4),        FP32_V(0,0x0,0xb4),       FP32_INT64_C(0) } },
                              /*-9007199254740992.0*/     /*9007199254740992.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
    /*
     * Denormals & Underflow.
     */
    /*10*/{ { /* src xmm */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(1)                 } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_0(0),          FP32_0(1),         FP32_INT64_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(1)                 } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_0(0),          FP32_0(1),         FP32_INT64_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(1)                 } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_0(0),          FP32_0(1),         FP32_INT64_C(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_DENORM_MIN(0), FP64_DENORM_MAX(1)                 } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_0(0),          FP32_0(1),         FP32_INT64_C(0) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow.
     */
    /*14*/{ { /* src xmm */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1)                 } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_INF(0),      FP32_INF(1),     FP32_INT64_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*15*/{ { /* src xmm */ { FP64_QNAN(0), FP64_QNAN(1)                  } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_QNAN(0), FP32_QNAN(1), FP32_INT64_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_SNAN(1), FP64_SNAN(0) } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>xmm|0 */ { FP32_QNAN(1), FP32_QNAN(0), FP32_INT64_C(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };
    static BS3CPUINSTR4_TEST1_VALUES_PD2PS_T const s_aValuesY[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* src ymm */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* src ymm */ { FP64_INF(1), FP64_INF(0), FP64_INF(0), FP64_INF(1) } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_INF(1), FP32_INF(0), FP32_INF(0), FP32_INF(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ -1,
              /*256:out  */ 0 },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* src ymm */ { FP64_V(0,0xe240000000000,0x40f), FP64_V(1,0xe240000000000,0x40f), FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f) } },
                              /*123456*/                       /*-123456*/                      /*123456.9*/                     /*-123456.9*/
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_V(0,0x712000,0x8f),         FP32_V(1,0x712000,0x8f),         FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712073,0x8f)         } },
                              /*123456*/                       /*-123456*/                      /*123456.9*/                     /*-123456.9*/
              /*mxcsr:in */ 0,
              /*128:out  */ -1,
              /*256:out  */ X86_MXCSR_PE },
          { { /* src ymm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f), FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712073,0x8f),         FP32_V(1,0x666666,0x7e),         FP32_V(0,0x666666,0x7e)         } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ -1,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_FZ },
          { { /* src ymm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f), FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712074,0x8f),         FP32_V(1,0x666667,0x7e),         FP32_V(0,0x666666,0x7e)         } },
                              /*123456.9*/                     /*-123456.9[DOWN]*/              /*-0.9[DOWN]*/                   /*0.9*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ -1,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN },
          { { /* src ymm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f), FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_V(0,0x712074,0x8f),         FP32_V(1,0x712073,0x8f),         FP32_V(1,0x666666,0x7e),         FP32_V(0,0x666667,0x7e)         } },
                              /*123456.9[UP]*/                 /*-123456.9*/                    /*-0.9*/                         /*0.9[UP]*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ -1,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP },
          { { /* src ymm */ { FP64_V(0,0xe240e66666666,0x40f), FP64_V(1,0xe240e66666666,0x40f), FP64_V(1,0xccccccccccccd,0x3fe), FP64_V(0,0xccccccccccccd,0x3fe) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712073,0x8f),         FP32_V(1,0x666666,0x7e),         FP32_V(0,0x666666,0x7e)         } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ -1,
              /*256:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO },
    /*
     * Denormals & Underflow.
     */
    /* 7*/{ { /* src ymm */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(1) } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_0(0),          FP32_0(1),          FP32_0(0),          FP32_0(1)          } },
              /*mxcsr:in */ 0,
              /*128:out  */ -1,
              /*256:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_PE_FUZZY },
          { { /* src ymm */ { FP64_DENORM_MAX(0), FP64_DENORM_MIN(1), FP64_DENORM_MIN(0), FP64_DENORM_MAX(1) } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_0(0),          FP32_0(1),          FP32_0(0),          FP32_0(1)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ -1,
              /*256:out  */ X86_MXCSR_DAZ },
    /*
     * Overflow.
     */
    /* 9*/{ { /* src ymm */ { FP64_NORM_MAX(0), FP64_NORM_MAX(1), FP64_NORM_SAFE_INT_MAX(1), FP64_NORM_SAFE_INT_MAX(0) } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_INF(0),      FP32_INF(1),      FP32_V(1,0x0,0xb4),        FP32_V(0,0x0,0xb4)        } },
                                                                  /*-9007199254740992.0*/    /*9007199254740992.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ -1,
              /*256:out  */ X86_MXCSR_OE | X86_MXCSR_PE },
    /*
     * Invalids.
     */
    /*10*/{ { /* src ymm */ { FP64_QNAN(0), FP64_QNAN(1), FP64_SNAN(1), FP64_SNAN(0) } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_QNAN(0), FP32_QNAN(1), FP32_QNAN(1), FP32_QNAN(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ -1,
              /*256:out  */ X86_MXCSR_IE },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtpd2ps_XMM1_XMM2),     255, RM_REG, T_SSE2,    XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_ALL(cvtpd2ps_XMM1_FSxBX),    255, RM_MEM, T_SSE2,    XMM1, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesX) },

        { BS3_INSTR4_ALL(vcvtpd2ps_XMM1_XMM2),    255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_ALL(vcvtpd2ps_XMM1_FSxBX_O), 255, RM_MEM, T_AVX_128, XMM1, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesX) },

        { BS3_INSTR4_ALL(vcvtpd2ps_XMM1_YMM2),    255, RM_REG, T_AVX_256, XMM1, NOREG, YMM2,  PASS_TEST_ARRAY(s_aValuesY) },
        { BS3_INSTR4_ALL(vcvtpd2ps_XMM1_FSxBX_Y), 255, RM_MEM, T_AVX_256, XMM1, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesY) },

        { BS3_INSTR4_ALL(cvtpd2ps_XMM1_XMM1),     255, RM_REG, T_SSE2,    XMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_ALL(vcvtpd2ps_XMM1_XMM1),    255, RM_REG, T_AVX_128, XMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_ALL(vcvtpd2ps_XMM1_YMM1),    255, RM_REG, T_AVX_256, XMM1, NOREG, YMM1,  PASS_TEST_ARRAY(s_aValuesY) },

        { BS3_INSTR4_C64(cvtpd2ps_XMM8_XMM9),     255, RM_REG, T_SSE2,    XMM8, NOREG, XMM9,  PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_C64(cvtpd2ps_XMM8_FSxBX),    255, RM_MEM, T_SSE2,    XMM8, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesX) },

        { BS3_INSTR4_C64(vcvtpd2ps_XMM8_XMM9),    255, RM_REG, T_AVX_128, XMM8, NOREG, XMM9,  PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_C64(vcvtpd2ps_XMM8_FSxBX_O), 255, RM_MEM, T_AVX_128, XMM8, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesX) },

        { BS3_INSTR4_C64(vcvtpd2ps_XMM8_YMM9),    255, RM_REG, T_AVX_256, XMM8, NOREG, YMM9,  PASS_TEST_ARRAY(s_aValuesY) },
        { BS3_INSTR4_C64(vcvtpd2ps_XMM8_FSxBX_Y), 255, RM_MEM, T_AVX_256, XMM8, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValuesY) },

        { BS3_INSTR4_C64(cvtpd2ps_XMM8_XMM8),     255, RM_REG, T_SSE2,    XMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_C64(vcvtpd2ps_XMM8_XMM8),    255, RM_REG, T_AVX_128, XMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValuesX) },
        { BS3_INSTR4_C64(vcvtpd2ps_XMM8_YMM8),    255, RM_REG, T_AVX_256, XMM8, NOREG, YMM8,  PASS_TEST_ARRAY(s_aValuesY) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig2));
}


/*
 * CVTPS2PD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvtps2pd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS2PD_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* src xmm */ { FP32_0(0), FP32_0(1), FP32_0(1), FP32_0(0) } },
            { /* unused  */ { FP64_ROW_UNUSED } },
            { /* =>  ymm */ { FP64_0(0), FP64_0(1), FP64_0(1), FP64_0(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* src xmm */ { FP32_INF(0), FP32_INF(1), FP32_INF(1), FP32_INF(0) } },
            { /* unused  */ { FP64_ROW_UNUSED } },
            { /* =>  ymm */ { FP64_INF(0), FP64_INF(1), FP64_INF(1), FP64_INF(0) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
    /*
     * Normals & Precision.
     */
    /* 2*/{ { /* src xmm */ { FP32_V(0,0x712000,0x8f),         FP32_V(1,0x712000,0x8f),         FP32_NORM_SAFE_INT_MAX(1),       FP32_NORM_SAFE_INT_MAX(0)       } },
                              /*123456.0*/                     /*-123456.0*/                    /*-16777215.0*/                  /*16777215.0*/
            { /* unused  */ { FP64_ROW_UNUSED } },
            { /* =>  ymm */ { FP64_V(0,0xe240000000000,0x40f), FP64_V(1,0xe240000000000,0x40f), FP64_V(1,0xfffffe0000000,0x416), FP64_V(0,0xfffffe0000000,0x416) } },
                              /*123456.0*/                     /*-123456.0*/                    /*-16777215.0*/                  /*16777215.0*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /* src xmm */ { FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712073,0x8f),         FP32_V(1,0x666666,0x7e),         FP32_V(0,0x666666,0x7e) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* unused  */ { FP64_ROW_UNUSED } },
            { /* =>  ymm */ { FP64_V(0,0xe240e60000000,0x40f), FP64_V(1,0xe240e60000000,0x40f), FP64_V(1,0xcccccc0000000,0x3fe), FP64_V(0,0xcccccc0000000,0x3fe) } },
                              /*123456.9~*/                    /*-123456.9~*/                   /*-0.9~*/                        /*0.9~*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ 0 },
          { { /* src xmm */ { FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712073,0x8f),         FP32_V(1,0x666666,0x7e),         FP32_V(0,0x666666,0x7e) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* unused  */ { FP64_ROW_UNUSED } },
            { /* =>  ymm */ { FP64_V(0,0xe240e60000000,0x40f), FP64_V(1,0xe240e60000000,0x40f), FP64_V(1,0xcccccc0000000,0x3fe), FP64_V(0,0xcccccc0000000,0x3fe) } },
                              /*123456.9~*/                    /*-123456.9~*/                   /*-0.9~*/                        /*0.9~*/
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ X86_MXCSR_RC_DOWN },
          { { /* src xmm */ { FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712073,0x8f),         FP32_V(1,0x666666,0x7e),         FP32_V(0,0x666666,0x7e) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* unused  */ { FP64_ROW_UNUSED } },
            { /* =>  ymm */ { FP64_V(0,0xe240e60000000,0x40f), FP64_V(1,0xe240e60000000,0x40f), FP64_V(1,0xcccccc0000000,0x3fe), FP64_V(0,0xcccccc0000000,0x3fe) } },
                              /*123456.9~*/                    /*-123456.9~*/                   /*-0.9~*/                        /*0.9~*/
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ X86_MXCSR_RC_UP },
          { { /* src xmm */ { FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712073,0x8f),         FP32_V(1,0x666666,0x7e),         FP32_V(0,0x666666,0x7e) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* unused  */ { FP64_ROW_UNUSED } },
            { /* =>  ymm */ { FP64_V(0,0xe240e60000000,0x40f), FP64_V(1,0xe240e60000000,0x40f), FP64_V(1,0xcccccc0000000,0x3fe), FP64_V(0,0xcccccc0000000,0x3fe) } },
                              /*123456.9~*/                    /*-123456.9~*/                   /*-0.9~*/                        /*0.9~*/
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ X86_MXCSR_RC_ZERO },
          { { /* src xmm */ { FP32_V(0,0x712073,0x8f),         FP32_V(1,0x712073,0x8f),         FP32_V(1,0x666666,0x7e),         FP32_V(0,0x666666,0x7e) } },
                              /*123456.9*/                     /*-123456.9*/                    /*-0.9*/                         /*0.9*/
            { /* unused  */ { FP64_ROW_UNUSED } },
            { /* =>  ymm */ { FP64_V(0,0xe240e60000000,0x40f), FP64_V(1,0xe240e60000000,0x40f), FP64_V(1,0xcccccc0000000,0x3fe), FP64_V(0,0xcccccc0000000,0x3fe) } },
                              /*123456.9~*/                    /*-123456.9~*/                   /*-0.9~*/                        /*0.9~*/
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ },
    /*
     * Denormals.
     */
    /* 8*/{ { /* src xmm */ { FP32_DENORM_MAX(0),              FP32_DENORM_MAX(1),              FP32_DENORM_MIN(0),  FP32_DENORM_MIN(1)  } },
            { /* unused  */ { FP64_ROW_UNUSED } },
            { /* =>  ymm */ { FP64_V(0,0xfffffc0000000,0x380), FP64_V(1,0xfffffc0000000,0x380), FP64_V(0,0x0,0x36a), FP64_V(1,0x0,0x36a) } },
                              /*tiny*/                         /*-tiny*/                        /*tinier*/           /*-tinier*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ X86_MXCSR_DE },
          { { /* src xmm */ { FP32_DENORM_MAX(0), FP32_DENORM_MAX(1), FP32_DENORM_MIN(0),  FP32_DENORM_MIN(1) } },
            { /* unused  */ { FP64_ROW_UNUSED } },
            { /* =>  ymm */ { FP64_0(0),          FP64_0(1),          FP64_0(0),           FP64_0(1)          } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ X86_MXCSR_DAZ },
    /*
     * Invalids.
     */
    /*10*/{ { /* src xmm */ { FP32_QNAN(0), FP32_QNAN(1), FP32_SNAN(0),               FP32_SNAN(1)               } },
            { /* unused  */ { FP64_ROW_UNUSED } },
            { /* =>  ymm */ { FP64_QNAN(0), FP64_QNAN(1), FP64_QNAN_V(0, 0x20000000), FP64_QNAN_V(1, 0x20000000) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
    /*
     * Overflow, Underflow not possible.
     */
    };


    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtps2pd_XMM1_XMM2),   255,             RM_REG, T_SSE2,    XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(cvtps2pd_XMM1_FSxBX),  255,             RM_MEM, T_SSE2,    XMM1, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(cvtps2pd_XMM8_XMM9),   255,             RM_REG, T_SSE2,    XMM8, NOREG, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvtps2pd_XMM8_FSxBX),  255,             RM_MEM, T_SSE2,    XMM8, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vcvtps2pd_XMM1_XMM2),  255,             RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtps2pd_XMM1_FSxBX), 255,             RM_MEM, T_AVX_128, XMM1, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vcvtps2pd_XMM8_XMM9),  255,             RM_REG, T_AVX_128, XMM8, NOREG, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtps2pd_XMM8_FSxBX), 255,             RM_MEM, T_AVX_128, XMM8, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vcvtps2pd_YMM1_XMM2),  255,             RM_REG, T_AVX_256, YMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtps2pd_YMM1_FSxBX), BS3_XCPT_NOT_AC, RM_MEM, T_AVX_256, YMM1, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vcvtps2pd_YMM8_XMM9),  255,             RM_REG, T_AVX_256, YMM8, NOREG, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtps2pd_YMM8_FSxBX), BS3_XCPT_NOT_AC, RM_MEM, T_AVX_256, YMM8, NOREG, FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(cvtps2pd_XMM1_XMM1),   255,             RM_REG, T_SSE2,    XMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvtps2pd_XMM8_XMM8),   255,             RM_REG, T_SSE2,    XMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtps2pd_XMM1_XMM1),  255,             RM_REG, T_AVX_128, XMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtps2pd_XMM8_XMM8),  255,             RM_REG, T_AVX_128, XMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtps2pd_YMM1_XMM1),  255,             RM_REG, T_AVX_256, YMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtps2pd_YMM8_XMM8),  255,             RM_REG, T_AVX_256, YMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * CVTSD2SS.
 */
/** @todo 'BS3_MXCSR_PE_FUZZY' in this test function indicates IEM outages */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvtsd2ss(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PD2PS_T const s_aValues[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* src xmm */ { FP64_0(0)                  } },
            { /* mrg xmm */ { FP32_2(1), FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_0(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* src xmm */ { FP64_INF(1)                  } },
            { /* mrg xmm */ { FP32_2(1),   FP32_RAND_x7_V1 } },
            { /* =>  xmm */ { FP32_INF(1), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_INF(0)                  } },
            { /* mrg xmm */ { FP32_2(1),   FP32_RAND_x7_V1 } },
            { /* =>  xmm */ { FP32_INF(0), FP32_RAND_x7_V1 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 3*/{ { /* src xmm */ { FP64_V(0,0xe240000000000,0x40f)/*123456*/          } },
            { /* mrg xmm */ { FP32_2(1),                         FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_V(0,0x712000,0x8f)/*123456*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(1,0xe240000000000,0x40f)/*-123456*/          } },
            { /* mrg xmm */ { FP32_2(1),                          FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_V(1,0x712000,0x8f)/*-123456*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/          } },
            { /* mrg xmm */ { FP32_2(1),                           FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/          } },
            { /* mrg xmm */ { FP32_2(1),                            FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(1,0xccccccccccccd,0x3fe)/*-0.9*/          } },
            { /* mrg xmm */ { FP32_2(1),                       FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_V(1,0x666666,0x7e)/*-0.9*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(0,0xccccccccccccd,0x3fe)/*0.9*/          } },
            { /* mrg xmm */ { FP32_2(1),                      FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_V(0,0x666666,0x7e)/*0.9*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_FZ,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_FZ,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(1,0xe240e66666666,0x40f)/*-123456.9*/                } },
            { /* mrg xmm */ { FP32_2(1),                                  FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_V(1,0x712074,0x8f)/*-123456.9[DOWN]*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/              } },
            { /* mrg xmm */ { FP32_2(1),                               FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_V(0,0x712074,0x8f)/*123456.9[UP]*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_V(0,0xe240e66666666,0x40f)/*123456.9*/ } },
            { /* mrg xmm */ { FP32_2(1),                  FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_V(0,0x712073,0x8f),    FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_PE | X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(1)                                  } },
            { /* mrg xmm */ { FP32_2(1),                                 FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_V(1,0x0,0xb4)/*-9007199254740992.0*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_NORM_SAFE_INT_MAX(0)                                 } },
            { /* mrg xmm */ { FP32_2(1),                                FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_V(0,0x0,0xb4)/*9007199254740992.0*/, FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_PE,
              /*256:out  */ -1 },
    /*
     * Denormals & Underflow.
     */
    /*14*/{ { /* src xmm */ { FP64_DENORM_MAX(0)                 } },
            { /* mrg xmm */ { FP32_2(1),         FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_0(0),         FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_DENORM_MIN(1)                 } },
            { /* mrg xmm */ { FP32_2(1),         FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_0(1),         FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_DENORM_MIN(1)                 } },
            { /* mrg xmm */ { FP32_2(1),         FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_0(1),         FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_UM,
              /*128:out  */ X86_MXCSR_UM | X86_MXCSR_DE | X86_MXCSR_PE | X86_MXCSR_UE | BS3_MXCSR_UM_FIXED,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_DENORM_MIN(0)                 } },
            { /* mrg xmm */ { FP32_2(1),         FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_0(0),         FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_DENORM_MAX(1)                 } },
            { /* mrg xmm */ { FP32_2(1),         FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_0(1),         FP32_RAND_x7_V0 } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Overflow.
     */
    /*19*/{ { /* src xmm */ { FP64_NORM_MAX(0)                 } },
            { /* mrg xmm */ { FP32_2(1),       FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_INF(0),     FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_NORM_MAX(1)                 } },
            { /* mrg xmm */ { FP32_2(1),       FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_INF(1),     FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_OE | X86_MXCSR_PE | BS3_MXCSR_PE_FUZZY,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*21*/{ { /* src xmm */ { FP64_QNAN(0)                  } },
            { /* mrg xmm */ { FP32_2(1),    FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_QNAN(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_QNAN(1)                  } },
            { /* mrg xmm */ { FP32_2(1),    FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_QNAN(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_SNAN(1)                  } },
            { /* mrg xmm */ { FP32_2(1),    FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_QNAN(1), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP64_SNAN(0)                  } },
            { /* mrg xmm */ { FP32_2(1),    FP32_RAND_x7_V0 } },
            { /* =>  xmm */ { FP32_QNAN(0), FP32_RAND_x7_V0 } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_IE,
              /*256:out  */ -1 },
    };
    /* Sanity-check subset for 'same register' instruction variants */
    /* The conversion self-overlaps, destroying part of the FP64 input value */
    static BS3CPUINSTR4_TEST1_VALUES_PD2PS_T const s_aValuesSR[] =
    {
    /*
     * Zero.
     */
    /* 0*/{ { /* src xmm */ { FP64_0(0),                            FP64_INT32_C(123, 456)          } },
            { /* unused  */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_0(0), FP32_INT(0),               FP32_INT(123),    FP32_INT(456) } },
                                         /*top half of FP64_0(0)!*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* src xmm */ { FP64_INF(1),                              FP64_INT32_C(123, 456)          } },
            { /* mrg xmm */ { FP32_ROW_UNUSED } },
            { /* =>  xmm */ { FP32_INF(1), FP32_INT(0xfff00000),        FP32_INT(123),    FP32_INT(456) } },
                                           /*top half of FP64_INF(1)!*/
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtsd2ss_XMM1_XMM2),        255, RM_REG, T_SSE2,    XMM1, XMM1,  XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(cvtsd2ss_XMM1_FSxBX),       255, RM_MEM, T_SSE2,    XMM1, XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(cvtsd2ss_XMM8_XMM9),        255, RM_REG, T_SSE2,    XMM8, XMM8,  XMM9,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(cvtsd2ss_XMM8_FSxBX),       255, RM_MEM, T_SSE2,    XMM8, XMM8,  FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(vcvtsd2ss_XMM1_XMM2_XMM3),  255, RM_REG, T_AVX_128, XMM1, XMM2,  XMM3,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vcvtsd2ss_XMM1_XMM2_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM2,  FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_C64(vcvtsd2ss_XMM8_XMM9_XMM10), 255, RM_REG, T_AVX_128, XMM8, XMM9,  XMM10, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vcvtsd2ss_XMM8_XMM9_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM9,  FSxBX, PASS_TEST_ARRAY(s_aValues)   },

        { BS3_INSTR4_ALL(cvtsd2ss_XMM1_XMM1),        255, RM_REG, T_SSE2,    XMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(cvtsd2ss_XMM8_XMM8),        255, RM_REG, T_SSE2,    XMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vcvtsd2ss_XMM1_XMM1_XMM1),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vcvtsd2ss_XMM1_XMM1_XMM2),  255, RM_REG, T_AVX_128, XMM1, XMM1,  XMM2,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vcvtsd2ss_XMM1_XMM2_XMM1),  255, RM_REG, T_AVX_128, XMM1, XMM2,  XMM1,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_ALL(vcvtsd2ss_XMM1_XMM2_XMM2),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_ALL(vcvtsd2ss_XMM1_XMM1_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vcvtsd2ss_XMM8_XMM8_XMM8),  255, RM_REG, T_AVX_128, XMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vcvtsd2ss_XMM8_XMM8_XMM9),  255, RM_REG, T_AVX_128, XMM8, XMM8,  XMM9,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vcvtsd2ss_XMM8_XMM9_XMM8),  255, RM_REG, T_AVX_128, XMM8, XMM9,  XMM8,  PASS_TEST_ARRAY(s_aValues)   },
        { BS3_INSTR4_C64(vcvtsd2ss_XMM8_XMM9_XMM9),  255, RM_REG, T_AVX_128, XMM8, NOREG, XMM9,  PASS_TEST_ARRAY(s_aValuesSR) },
        { BS3_INSTR4_C64(vcvtsd2ss_XMM8_XMM8_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM8,  FSxBX, PASS_TEST_ARRAY(s_aValues)   },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/*
 * CVTSS2SD.
 */
BS3_DECL_FAR(uint8_t) bs3CpuInstr4_v_cvtss2sd(uint8_t bMode)
{
    static BS3CPUINSTR4_TEST1_VALUES_PS2PD_T const s_aValues[] =
    {
/** A 32-bit 0, then 'FP64_RAND_V0(1)' rendered in a form that can be absorbed by FP32 */
#define FP64_RAND_V0_32 FP32_0(0), FP32_INT64_C(0xf77ab07eb7bcebce)
    /*
     * Zero.
     */
    /* 0*/{ { /* src xmm */ { FP32_0(0), FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1), FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_0(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Infinity.
     */
    /* 1*/{ { /* src xmm */ { FP32_INF(0), FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),   FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_INF(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_INF(1), FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),   FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_INF(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Normals & Precision.
     */
    /* 3*/{ { /* src xmm */ { FP32_V(0,0x712000,0x8f)/*123456.0*/,         FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                                   FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(0,0xe240000000000,0x40f)/*123456.0*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_V(1,0x712000,0x8f)/*-123456.0*/,         FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                                    FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(1,0xe240000000000,0x40f)/*-123456.0*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_V(0,0x712073,0x8f)/*123456.9*/,          FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                                    FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(0,0xe240e60000000,0x40f)/*123456.9~*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/,          FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                                     FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(1,0xe240e60000000,0x40f)/*-123456.9~*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_V(0,0x666666,0x7e)/*0.9*/,         FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                              FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(0,0xcccccc0000000,0x3fe)/*0.9*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_V(1,0x666666,0x7e)/*-0.9*/,         FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                               FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(1,0xcccccc0000000,0x3fe)/*-0.9*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/,          FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                                     FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(1,0xe240e60000000,0x40f)/*-123456.9~*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_DOWN,
              /*128:out  */ X86_MXCSR_RC_DOWN,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/,          FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                                     FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(1,0xe240e60000000,0x40f)/*-123456.9~*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_UP,
              /*128:out  */ X86_MXCSR_RC_UP,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/,          FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                                     FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(1,0xe240e60000000,0x40f)/*-123456.9~*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_RC_ZERO,
              /*128:out  */ X86_MXCSR_RC_ZERO,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_V(1,0x712073,0x8f)/*-123456.9*/,          FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                                     FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(1,0xe240e60000000,0x40f)/*-123456.9~*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_FZ | X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_NORM_SAFE_INT_MAX(1),                      FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                                      FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(1,0xfffffe0000000,0x416)/*-16777215.0*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_NORM_SAFE_INT_MAX(0),                     FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                                     FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(0,0xfffffe0000000,0x416)/*16777215.0*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ -1 },
    /*
     * Denormals.
     */
    /*15*/{ { /* src xmm */ { FP32_DENORM_MAX(0),              FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                       FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(0,0xfffffc0000000,0x380), FP64_RAND_V0(1) } },
                              /*tiny*/
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_DENORM_MIN(1),          FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),                   FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_V(1,0x0,0x36a)/*tiny*/, FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ X86_MXCSR_DE,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_DENORM_MAX(1), FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),          FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_0(1),          FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
          { { /* src xmm */ { FP32_DENORM_MIN(0), FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),          FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_0(0),          FP64_RAND_V0(1) } },
              /*mxcsr:in */ X86_MXCSR_DAZ,
              /*128:out  */ X86_MXCSR_DAZ,
              /*256:out  */ -1 },
    /*
     * Invalids.
     */
    /*19*/{ { /* src xmm */ { FP32_QNAN(0), FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),    FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_QNAN(0), FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
          { { /* src xmm */ { FP32_QNAN(1), FP64_RAND_V0_32 } },
            { /* mrg xmm */ { FP64_2(1),    FP64_RAND_V0(1) } },
            { /* =>  xmm */ { FP64_QNAN(1), FP64_RAND_V0(1) } },
              /*mxcsr:in */ 0,
              /*128:out  */ 0,
              /*256:out  */ X86_MXCSR_IE },
    /*
     * Overflow, Underflow not possible.
     */
#undef FP64_RAND_V0_32
    };

    static BS3CPUINSTR4_TEST1_T const s_aTests[] =
    {
        { BS3_INSTR4_ALL(cvtss2sd_XMM1_XMM2),        255, RM_REG, T_SSE2,    XMM1, XMM1,  XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(cvtss2sd_XMM1_FSxBX),       255, RM_MEM, T_SSE2,    XMM1, XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(cvtss2sd_XMM8_XMM9),        255, RM_REG, T_SSE2,    XMM8, XMM8,  XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvtss2sd_XMM8_FSxBX),       255, RM_MEM, T_SSE2,    XMM8, XMM8,  FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(vcvtss2sd_XMM1_XMM2_XMM3),  255, RM_REG, T_AVX_128, XMM1, XMM2,  XMM3,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtss2sd_XMM1_XMM2_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM2,  FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_C64(vcvtss2sd_XMM8_XMM9_XMM10), 255, RM_REG, T_AVX_128, XMM8, XMM9,  XMM10, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtss2sd_XMM8_XMM9_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM9,  FSxBX, PASS_TEST_ARRAY(s_aValues) },

        { BS3_INSTR4_ALL(cvtss2sd_XMM1_XMM1),        255, RM_REG, T_SSE2,    XMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(cvtss2sd_XMM8_XMM8),        255, RM_REG, T_SSE2,    XMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtss2sd_XMM1_XMM1_XMM1),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtss2sd_XMM1_XMM1_XMM2),  255, RM_REG, T_AVX_128, XMM1, XMM1,  XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtss2sd_XMM1_XMM2_XMM1),  255, RM_REG, T_AVX_128, XMM1, XMM2,  XMM1,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtss2sd_XMM1_XMM2_XMM2),  255, RM_REG, T_AVX_128, XMM1, NOREG, XMM2,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_ALL(vcvtss2sd_XMM1_XMM1_FSxBX), 255, RM_MEM, T_AVX_128, XMM1, XMM1,  FSxBX, PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtss2sd_XMM8_XMM8_XMM8),  255, RM_REG, T_AVX_128, XMM8, NOREG, XMM8,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtss2sd_XMM8_XMM8_XMM9),  255, RM_REG, T_AVX_128, XMM8, XMM8,  XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtss2sd_XMM8_XMM9_XMM8),  255, RM_REG, T_AVX_128, XMM8, XMM9,  XMM8,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtss2sd_XMM8_XMM9_XMM9),  255, RM_REG, T_AVX_128, XMM8, NOREG, XMM9,  PASS_TEST_ARRAY(s_aValues) },
        { BS3_INSTR4_C64(vcvtss2sd_XMM8_XMM8_FSxBX), 255, RM_MEM, T_AVX_128, XMM8, XMM8,  FSxBX, PASS_TEST_ARRAY(s_aValues) },
    };

    return bs3CpuInstr4_WorkerTestType1(bMode, PASS_ARRAY(s_aTests), PASS_ARRAY(g_aXcptConfig3));
}


/**
 * The 32-bit protected mode main function.
 *
 * The tests a driven by 32-bit test drivers, even for real-mode tests (though
 * we'll switch between PE32 and RM for each test step we perform).  Given that
 * we test SSE and AVX here, we don't need to worry about 286 or 8086.
 *
 * Some extra steps needs to be taken to properly handle extended state in LM64
 * (Bs3ExtCtxRestoreEx & Bs3ExtCtxSaveEx) and when testing real mode
 * (Bs3RegCtxSaveForMode & Bs3TrapSetJmpAndRestoreWithExtCtxAndRm).
 */
BS3_DECL(void) Main_pe32()
{
    static const BS3TESTMODEBYONEENTRY g_aTests[] =
    {
#if 1 /*ndef DEBUG_bird*/
# define ALL_TESTS
#endif
#if defined(ALL_TESTS)
        { "[v]addps",       bs3CpuInstr4_v_addps,     0 },
        { "[v]addpd",       bs3CpuInstr4_v_addpd,     0 },
        { "[v]addss",       bs3CpuInstr4_v_addss,     0 },
        { "[v]addsd",       bs3CpuInstr4_v_addsd,     0 },
        { "[v]haddps",      bs3CpuInstr4_v_haddps,    0 },
        { "[v]haddpd",      bs3CpuInstr4_v_haddpd,    0 },
        { "[v]subps",       bs3CpuInstr4_v_subps,     0 },
        { "[v]subpd",       bs3CpuInstr4_v_subpd,     0 },
        { "[v]subss",       bs3CpuInstr4_v_subss,     0 },
        { "[v]subsd",       bs3CpuInstr4_v_subsd,     0 },
        { "[v]hsubps",      bs3CpuInstr4_v_hsubps,    0 },
        { "[v]hsubpd",      bs3CpuInstr4_v_hsubpd,    0 },
        { "[v]mulps",       bs3CpuInstr4_v_mulps,     0 },
        { "[v]mulpd",       bs3CpuInstr4_v_mulpd,     0 },
        { "[v]mulss",       bs3CpuInstr4_v_mulss,     0 },
        { "[v]mulsd",       bs3CpuInstr4_v_mulsd,     0 },
        { "[v]divps",       bs3CpuInstr4_v_divps,     0 },
        { "[v]divpd",       bs3CpuInstr4_v_divpd,     0 },
        { "[v]divss",       bs3CpuInstr4_v_divss,     0 },
        { "[v]divsd",       bs3CpuInstr4_v_divsd,     0 },
        { "[v]addsubps",    bs3CpuInstr4_v_addsubps,  0 },
        { "[v]addsubpd",    bs3CpuInstr4_v_addsubpd,  0 },
        { "[v]maxps",       bs3CpuInstr4_v_maxps,     0 },
        { "[v]maxpd",       bs3CpuInstr4_v_maxpd,     0 },
        { "[v]maxss",       bs3CpuInstr4_v_maxss,     0 },
        { "[v]maxsd",       bs3CpuInstr4_v_maxsd,     0 },
        { "[v]minps",       bs3CpuInstr4_v_minps,     0 },
        { "[v]minpd",       bs3CpuInstr4_v_minpd,     0 },
        { "[v]minss",       bs3CpuInstr4_v_minss,     0 },
        { "[v]minsd",       bs3CpuInstr4_v_minsd,     0 },
        { "[v]rcpps",       bs3CpuInstr4_v_rcpps,     0 },
        { "[v]rcpss",       bs3CpuInstr4_v_rcpss,     0 },
        { "[v]sqrtps",      bs3CpuInstr4_v_sqrtps,    0 },
        { "[v]sqrtpd",      bs3CpuInstr4_v_sqrtpd,    0 },
        { "[v]sqrtss",      bs3CpuInstr4_v_sqrtss,    0 },
        { "[v]sqrtsd",      bs3CpuInstr4_v_sqrtsd,    0 },
        { "[v]rsqrtps",     bs3CpuInstr4_v_rsqrtps,   0 },
        { "[v]rsqrtss",     bs3CpuInstr4_v_rsqrtss,   0 },
        { "[v]dpps",        bs3CpuInstr4_v_dpps,      0 },
        { "[v]dppd",        bs3CpuInstr4_v_dppd,      0 },
        { "[v]roundps",     bs3CpuInstr4_v_roundps,   0 },
        { "[v]roundpd",     bs3CpuInstr4_v_roundpd,   0 },
        { "[v]roundss",     bs3CpuInstr4_v_roundss,   0 },
        { "[v]roundsd",     bs3CpuInstr4_v_roundsd,   0 },
        { "cvtpi2ps",       bs3CpuInstr4_cvtpi2ps,    0 },
        { "cvtps2pi",       bs3CpuInstr4_cvtps2pi,    0 },
        { "cvttps2pi",      bs3CpuInstr4_cvttps2pi,   0 },
        { "[v]cvtsi2ss",    bs3CpuInstr4_v_cvtsi2ss,  0 },
        { "[v]cvtss2si",    bs3CpuInstr4_v_cvtss2si,  0 },
        { "[v]cvttss2si",   bs3CpuInstr4_v_cvttss2si, 0 },
        { "cvtpi2pd",       bs3CpuInstr4_cvtpi2pd,    0 },
        { "cvtpd2pi",       bs3CpuInstr4_cvtpd2pi,    0 },
        { "cvttpd2pi",      bs3CpuInstr4_cvttpd2pi,   0 },
        { "[v]cvtsi2sd",    bs3CpuInstr4_v_cvtsi2sd,  0 },
        { "[v]cvtsd2si",    bs3CpuInstr4_v_cvtsd2si,  0 },
        { "[v]cvttsd2si",   bs3CpuInstr4_v_cvttsd2si, 0 },
        { "[v]cvtdq2ps",    bs3CpuInstr4_v_cvtdq2ps,  0 },
        { "[v]cvtps2dq",    bs3CpuInstr4_v_cvtps2dq,  0 },
        { "[v]cvttps2dq",   bs3CpuInstr4_v_cvttps2dq, 0 },
        { "[v]cvtdq2pd",    bs3CpuInstr4_v_cvtdq2pd,  0 },
        { "[v]cvtpd2dq",    bs3CpuInstr4_v_cvtpd2dq,  0 },
        { "[v]cvttpd2dq",   bs3CpuInstr4_v_cvttpd2dq, 0 },
        { "[v]cvtpd2ps",    bs3CpuInstr4_v_cvtpd2ps,  0 },
        { "[v]cvtps2pd",    bs3CpuInstr4_v_cvtps2pd,  0 },
        { "[v]cvtsd2ss",    bs3CpuInstr4_v_cvtsd2ss,  0 },
        { "[v]cvtss2sd",    bs3CpuInstr4_v_cvtss2sd,  0 },
#endif
    };
    Bs3TestInit("bs3-cpu-instr-4");

    /*
     * Initialize globals.
     */
    if (g_uBs3CpuDetected & BS3CPU_F_CPUID)
    {
        uint32_t fEbx, fEcx, fEdx;
        ASMCpuIdExSlow(1, 0, 0, 0, NULL, NULL, &fEcx, &fEdx);
        g_afTypeSupports[T_MMX]         = RT_BOOL(fEdx & X86_CPUID_FEATURE_EDX_MMX);
        g_afTypeSupports[T_MMX_SSE]     = RT_BOOL(fEdx & X86_CPUID_FEATURE_EDX_SSE);
        g_afTypeSupports[T_MMX_SSE2]    = RT_BOOL(fEdx & X86_CPUID_FEATURE_EDX_SSE2);
        g_afTypeSupports[T_MMX_SSSE3]   = RT_BOOL(fEdx & X86_CPUID_FEATURE_ECX_SSSE3);
        g_afTypeSupports[T_SSE]         = RT_BOOL(fEdx & X86_CPUID_FEATURE_EDX_SSE);
        g_afTypeSupports[T_SSE2]        = RT_BOOL(fEdx & X86_CPUID_FEATURE_EDX_SSE2);
        g_afTypeSupports[T_SSE3]        = RT_BOOL(fEcx & X86_CPUID_FEATURE_ECX_SSE3);
        g_afTypeSupports[T_SSSE3]       = RT_BOOL(fEcx & X86_CPUID_FEATURE_ECX_SSSE3);
        g_afTypeSupports[T_SSE4_1]      = RT_BOOL(fEcx & X86_CPUID_FEATURE_ECX_SSE4_1);
        g_afTypeSupports[T_SSE4_2]      = RT_BOOL(fEcx & X86_CPUID_FEATURE_ECX_SSE4_2);
        g_afTypeSupports[T_PCLMUL]      = RT_BOOL(fEcx & X86_CPUID_FEATURE_ECX_PCLMUL);
        g_afTypeSupports[T_AVX_128]     = RT_BOOL(fEcx & X86_CPUID_FEATURE_ECX_AVX);
        g_afTypeSupports[T_AVX_256]     = RT_BOOL(fEcx & X86_CPUID_FEATURE_ECX_AVX);
        g_afTypeSupports[T_AVX_PCLMUL]  =    RT_BOOL(fEcx & X86_CPUID_FEATURE_ECX_PCLMUL)
                                          && RT_BOOL(fEcx & X86_CPUID_FEATURE_ECX_AVX);

        if (ASMCpuId_EAX(0) >= 7)
        {
            ASMCpuIdExSlow(7, 0, 0, 0, NULL, &fEbx, NULL, NULL);
            g_afTypeSupports[T_AVX2_128] = RT_BOOL(fEbx & X86_CPUID_STEXT_FEATURE_EBX_AVX2);
            g_afTypeSupports[T_AVX2_256] = RT_BOOL(fEbx & X86_CPUID_STEXT_FEATURE_EBX_AVX2);
            g_afTypeSupports[T_SHA]      = RT_BOOL(fEbx & X86_CPUID_STEXT_FEATURE_EBX_SHA);
        }

        if (g_uBs3CpuDetected & BS3CPU_F_CPUID_EXT_LEAVES)
        {
            ASMCpuIdExSlow(UINT32_C(0x80000001), 0, 0, 0, NULL, NULL, &fEcx, &fEdx);
            g_afTypeSupports[T_AXMMX]   = RT_BOOL(fEcx & X86_CPUID_AMD_FEATURE_EDX_AXMMX);
            g_afTypeSupports[T_SSE4A]   = RT_BOOL(fEcx & X86_CPUID_AMD_FEATURE_ECX_SSE4A);
            g_fAmdMisalignedSse         = RT_BOOL(fEcx & X86_CPUID_AMD_FEATURE_ECX_MISALNSSE);
        }
        g_afTypeSupports[T_AXMMX_OR_SSE] = g_afTypeSupports[T_AXMMX] || g_afTypeSupports[T_SSE];

        /*
         * Figure out FPU save/restore method and support for DAZ bit.
         */
        {
            /** @todo Add bs3kit API to just get the ext ctx method without needing to
             *        alloc/free a context. Replicating the logic in the bs3kit here, though
             *        doable, runs a risk of not updating this when the other logic is
             *        changed. */
            uint64_t       fFlags;
            uint16_t const cbExtCtx = Bs3ExtCtxGetSize(&fFlags);
            PBS3EXTCTX     pExtCtx  = Bs3MemAlloc(BS3MEMKIND_TILED, cbExtCtx);
            if (pExtCtx)
            {
                Bs3ExtCtxInit(pExtCtx, cbExtCtx, fFlags);
                g_enmExtCtxMethod = pExtCtx->enmMethod;
                if (   (   (g_enmExtCtxMethod == BS3EXTCTXMETHOD_XSAVE
                        && (pExtCtx->Ctx.x.x87.MXCSR_MASK & X86_MXCSR_DAZ)))
                    || (   (g_enmExtCtxMethod == BS3EXTCTXMETHOD_FXSAVE)
                        && (pExtCtx->Ctx.x87.MXCSR_MASK & X86_MXCSR_DAZ)))
                    g_fMxCsrDazSupported = true;
            }
            else
                Bs3TestFailedF("Failed to allocate %u bytes for extended CPU context (tiled addressable)\n", cbExtCtx);
        }

        /*
         * Allocate a buffer for testing.
         */
        g_cbBuf = X86_PAGE_SIZE * 4;
        g_pbBuf = (uint8_t BS3_FAR *)Bs3MemAlloc(BS3MEMKIND_REAL, g_cbBuf);
        if (g_pbBuf)
        {
            g_pbBufAliasAlloc = (uint8_t BS3_FAR *)Bs3MemAlloc(BS3MEMKIND_TILED, g_cbBuf);
            if (g_pbBufAliasAlloc)
            {
                /*
                 * Poke the PRNG to print the seed before other output.
                 */
                (void)bs3CpuInstrX_SimpleRand();
                /*
                 * Do the tests.
                 */
                Bs3TestDoModesByOne_pe32(g_aTests, RT_ELEMENTS(g_aTests), BS3TESTMODEBYONEENTRY_F_REAL_MODE_READY);
                bs3CpuInstrX_ShowTallies(true);
            }
            else
                Bs3TestFailed("Failed to allocate 16K alias buffer (tiled addressable)");
        }
        else
            Bs3TestFailed("Failed to allocate 16K buffer (real mode addressable)");
    }

    Bs3TestTerm();
}
