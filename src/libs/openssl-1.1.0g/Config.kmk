# $Id: Config.kmk 118412 2017-10-17 14:26:02Z bird $
## @file
# OpenSSL kBuild Configuration file.
#

#
# Copyright (C) 2006-2017 Oracle Corporation
#
# Oracle Corporation confidential
# All rights reserved
#

# Include the top-level configure file.
ifndef VBOX_ROOT_CONFIG_KMK_INCLUDED
 include $(PATH_ROOT)/Config.kmk
endif

# Enable open ssl testcases.
if defined(VBOX_WITH_TESTCASES) \
 && !defined(VBOX_ONLY_ADDITIONS) \
 && !defined(VBOX_ONLY_DOCS) \
 && !defined(VBOX_ONLY_EXTPACKS) \
 && !defined(VBOX_ONLY_SDK) \
 && !defined(VBOX_ONLY_VALIDATIONKIT)
VBOX_WITH_OPENSSL_TESTCASES = 1
endif

# Figure out openssl perl asm style for the target
VBOX_CRYPTO_ASM_SCHEME := portme
if1of ($(KBUILD_TARGET), linux solaris)
  VBOX_CRYPTO_ASM_SCHEME := elf
else ifeq ($(KBUILD_TARGET), darwin)
  VBOX_CRYPTO_ASM_SCHEME := macosx
else ifeq ($(KBUILD_TARGET), win)
  VBOX_CRYPTO_ASM_SCHEME := nasm
endif

# Can't use relative paths when dealing with sub-makefiles.
VBOX_PATH_OPENSSL        := $(PATH_ROOT)/src/libs/openssl-1.1.0g
VBOX_PATH_CRYPTO         := $(VBOX_PATH_OPENSSL)/crypto
VBOX_PATH_CRYPTO_GENASM  := $(VBOX_PATH_CRYPTO)/genasm-$(VBOX_CRYPTO_ASM_SCHEME)
VBOX_PATH_CRYPTO_AES     := $(VBOX_PATH_CRYPTO)/aes
VBOX_PATH_CRYPTO_SHA     := $(VBOX_PATH_CRYPTO)/sha
VBOX_PATH_CRYPTO_MODES   := $(VBOX_PATH_CRYPTO)/modes
VBOX_INST_CRYPTO_HEADERS := obj/$(if-expr "$(CURSUBDIR)" == ".",,$(CURSUBDIR)/)crypto-1.1.0-headers/include/openssl/
VBOX_PATH_CRYPTO_HEADERS := $(abspath $(PATH_OUT))/$(patsubst %/,%,$(VBOX_INST_CRYPTO_HEADERS))

# Enable asm implementation of crypto (for now selectively, needs testing)
if1of ($(KBUILD_TARGET), linux darwin solaris win)
 VBOX_WITH_CRYPTO_ASM = 1
endif

#
# A target for installer the header files into a include directory
# for the build. We have to put this in the Config.kmk because it
# is required when running make from a sub directory too.
#
INSTALLS += crypto-headers
crypto-headers_INST    = $(VBOX_INST_CRYPTO_HEADERS)
crypto-headers_MODE    = a+r,u+w
crypto-headers_DEFPATH = $(VBOX_PATH_OPENSSL)
crypto-headers_SOURCES = \
	include/openssl/aes.h=>aes.h \
	include/openssl/asn1.h=>asn1.h \
	include/openssl/asn1t.h=>asn1t.h \
	include/openssl/asn1_mac.h=>asn1_mac.h \
	include/openssl/async.h=>async.h \
	include/openssl/bio.h=>bio.h \
	include/openssl/blowfish.h=>blowfish.h \
	include/openssl/bn.h=>bn.h \
	include/openssl/buffer.h=>buffer.h \
	include/openssl/camellia.h=>camellia.h \
	include/openssl/cast.h=>cast.h \
	include/openssl/cmac.h=>cmac.h \
	include/openssl/cms.h=>cms.h \
	include/openssl/comp.h=>comp.h \
	include/openssl/conf.h=>conf.h \
	include/openssl/conf_api.h=>conf_api.h \
	include/openssl/crypto.h=>crypto.h \
	include/openssl/ct.h=>ct.h \
	include/openssl/des.h=>des.h \
	include/openssl/dh.h=>dh.h \
	include/openssl/dsa.h=>dsa.h \
	include/openssl/dtls1.h=>dtls1.h \
	include/openssl/ebcdic.h=>ebcdic.h \
	include/openssl/ec.h=>ec.h \
	include/openssl/ecdh.h=>ecdh.h \
	include/openssl/ecdsa.h=>ecdsa.h \
	include/openssl/engine.h=>engine.h \
	include/openssl/err.h=>err.h \
	include/openssl/evp.h=>evp.h \
	include/openssl/e_os2.h=>e_os2.h \
	include/openssl/hmac.h=>hmac.h \
	include/openssl/idea.h=>idea.h \
	include/openssl/lhash.h=>lhash.h \
	include/openssl/md2.h=>md2.h \
	include/openssl/md4.h=>md4.h \
	include/openssl/md5.h=>md5.h \
	include/openssl/mdc2.h=>mdc2.h \
	include/openssl/modes.h=>modes.h \
	include/openssl/objects.h=>objects.h \
	include/openssl/obj_mac.h=>obj_mac.h \
	include/openssl/ocsp.h=>ocsp.h \
	openssl-mangling.h=>openssl-mangling.h \
	include/openssl/opensslconf.h=>opensslconf.h \
	include/openssl/opensslv.h=>opensslv.h \
	include/openssl/ossl_typ.h=>ossl_typ.h \
	include/openssl/pem.h=>pem.h \
	include/openssl/pem2.h=>pem2.h \
	include/openssl/pkcs12.h=>pkcs12.h \
	include/openssl/pkcs7.h=>pkcs7.h \
	include/openssl/rand.h=>rand.h \
	include/openssl/rc2.h=>rc2.h \
	include/openssl/rc4.h=>rc4.h \
	include/openssl/ripemd.h=>ripemd.h \
	include/openssl/rsa.h=>rsa.h \
	include/openssl/safestack.h=>safestack.h \
	include/openssl/seed.h=>seed.h \
	include/openssl/sha.h=>sha.h \
	include/openssl/srp.h=>srp.h \
	include/openssl/srtp.h=>srtp.h \
	include/openssl/ssl.h=>ssl.h \
	include/openssl/ssl2.h=>ssl2.h \
	include/openssl/ssl3.h=>ssl3.h \
	include/openssl/stack.h=>stack.h \
	include/openssl/symhacks.h=>symhacks.h \
	include/openssl/tls1.h=>tls1.h \
	include/openssl/ts.h=>ts.h \
	include/openssl/txt_db.h=>txt_db.h \
	include/openssl/ui.h=>ui.h \
	include/openssl/x509.h=>x509.h \
	include/openssl/x509v3.h=>x509v3.h \
	include/openssl/x509_vfy.h=>x509_vfy.h



#
# The templates used for the crypo lib and all its sublibraries.
#
TEMPLATE_LIBCRYPTO = Template for the OpenSSL crypto library.
TEMPLATE_LIBCRYPTO_EXTENDS = VBoxR3RuntimeDllNonPedantic
ifneq ($(KBUILD_TARGET), win)
 ## @todo correct inheritance here to make it use all the VBOXR3NP settings instead of overriding all of them.
 TEMPLATE_LIBCRYPTO_ASTOOL          = $(TEMPLATE_VBoxR3RuntimeDllNonPedantic_TOOL)
 TEMPLATE_LIBCRYPTO_ASFLAGS         = -include $(VBOX_PATH_OPENSSL)/openssl-mangling.h
 TEMPLATE_LIBCRYPTO_ASFLAGS.x86     = -m32
 TEMPLATE_LIBCRYPTO_ASFLAGS.amd64   = -m64
 TEMPLATE_LIBCRYPTO_ASDEFS          = $(NO_SUCH_VARIABLE)
 TEMPLATE_LIBCRYPTO_ASDEFS.darwin   = OPENSSL_MANGLE_ASM
endif
TEMPLATE_LIBCRYPTO_DEFS = \
	$(TEMPLATE_VBoxR3RuntimeDllNonPedantic_DEFS) \
	VBOX_SUFF_DLL=$(VBOX_SUFF_DLL) \
	OPENSSL_USE_NODELETE \
	OPENSSL_NO_CAST \
	OPENSSL_NO_CAMELLIA \
	OPENSSL_NO_COMP \
	OPENSSL_NO_ERR \
	OPENSSL_NO_DES \
	OPENSSL_NO_EC \
	OPENSSL_NO_ECDH \
	OPENSSL_NO_ECDSA \
	OPENSSL_NO_ENGINE \
	OPENSSL_NO_IDEA \
	OPENSSL_NO_RC2 \
	OPENSSL_NO_RIPEMD \
	OPENSSL_NO_MDC2 \
	OPENSSL_NO_MD4 \
	OPENSSL_NO_SHA0 \
	OPENSSL_NO_SSL3 \
	OPENSSL_NO_WHIRLPOOL \
	OPENSSL_NO_DSO \
	OPENSSL_NO_KRB5 \
	OPENSSL_NO_POLY1305
#	OPENSSL_THREADS

# enable for running with valgrind
# TEMPLATE_LIBCRYPTO_DEFS += PURIFY

ifdef VBOX_WITH_CRYPTO_ASM
TEMPLATE_LIBCRYPTO_DEFS += \
	AES_ASM \
	SHA1_ASM \
	SHA256_ASM \
	SHA512_ASM
endif
if1of ($(KBUILD_TARGET), linux solaris)
TEMPLATE_LIBCRYPTO_DEFS += \
	_REENTRANT
endif
ifeq ($(sort $(filter -fPIC,$(TEMPLATE_VBoxR3RuntimeDllNonPedantic_CFLAGS))),-fPIC)
TEMPLATE_LIBCRYPTO_DEFS += \
	OPENSSL_PIC
endif
TEMPLATE_LIBCRYPTO_DEFS.amd64 += \
	MD32_REG_T=int
ifeq ($(KBUILD_TARGET),win)
TEMPLATE_LIBCRYPTO_DEFS += \
	OPENSSL_SYSNAME_WIN32
# Exclude WinCrypt.h, causes trouble all over the place
TEMPLATE_LIBCRYPTO_DEFS += \
	NOCRYPT
endif
if1of ($(KBUILD_TARGET_ARCH), x86 amd64)
TEMPLATE_LIBCRYPTO_DEFS += \
        L_ENDIAN
else
TEMPLATE_LIBCRYPTO_DEFS += \
        B_ENDIAN
endif
TEMPLATE_LIBCRYPTO_CFLAGS = $(filter-out $(VBOX_GCC_fvisibility-hidden),$(TEMPLATE_VBoxR3RuntimeDllNonPedantic_CFLAGS))
TEMPLATE_LIBCRYPTO_CFLAGS.win  = $(TEMPLATE_VBoxR3RuntimeDllNonPedantic_CFLAGS.win)
TEMPLATE_LIBCRYPTO_CFLAGS.win += -wd4305 # asn1_lib.c(455) : warning C4305: 'type cast' : truncation from 'const unsigned char *' to 'unsigned long'
TEMPLATE_LIBCRYPTO_CFLAGS.win += -wd4306 # tasn_new.c(338) : warning C4306: 'type cast' : conversion from 'int' to 'ASN1_VALUE *' of greater size
TEMPLATE_LIBCRYPTO_CFLAGS.win += -wd4701 # tasn_dec.c(840) : warning C4701: potentially uninitialized local variable 'buf' used
TEMPLATE_LIBCRYPTO_CFLAGS.win += -wd4101 # bn_asm.c(619) : warning C4101: 'bh' : unreferenced local variable
TEMPLATE_LIBCRYPTO_CFLAGS.win += -wd4206 # e_camellia.c(120) : warning C4206: nonstandard extension used : translation unit is empty
TEMPLATE_LIBCRYPTO_CFLAGS.win += -wd4232 # warning C4232: nonstandard extension used : 'malloc_func' : address of dllimport 'malloc' is not stati c, identity not guaranteed
TEMPLATE_LIBCRYPTO_CFLAGS.win += -wd4210 # cryptlib.c(679) : warning C4210: nonstandard extension used : function given file scope
TEMPLATE_LIBCRYPTO_CFLAGS.win += -wd4146 # x_long.c(79) : warning C4146: unary minus operator applied to unsigned type, result still unsigned
TEMPLATE_LIBCRYPTO_CFLAGS.win += -wd4130 # b_addr.c(750) : warning C4130: '==' : logical operation on address of string constant
TEMPLATE_LIBCRYPTO_CFLAGS.win += -wd4090 # ssl_lib.c(229) : warning C4090: 'function' : different 'const' qualifiers
TEMPLATE_LIBCRYPTO_CFLAGS.win += -wd4310 # bss_acpt.c(223) : warning C4310: cast truncates constant value [(int)INVALID_SOCKET]
if1of ($(VBOX_VCC_TOOL_STEM), VCC120)
 TEMPLATE_LIBCRYPTO_CFLAGS.win += -wd4005 # sdk\v7.1\include\sal_supp.h(57) : warning C4005: '__useHeader' : macro redefinition
endif

TEMPLATE_LIBCRYPTO_INCS := \
	$(VBOX_PATH_OPENSSL) \
	$(VBOX_PATH_OPENSSL)/include \
	$(VBOX_PATH_CRYPTO)/include \
	$(patsubst %/openssl,%,$(VBOX_PATH_CRYPTO_HEADERS))

#TEMPLATE_LIBCRYPTO_INTERMEDIATES = $($(crypto-headers)_1_STAGE_TARGET)
TEMPLATE_LIBCRYPTO_INTERMEDIATES := \
	$(foreach f,$(crypto-headers_SOURCES),$(VBOX_PATH_CRYPTO_HEADERS)/$(lastword $(subst =>, ,$(f))))

# Same as LIBCRYPTO except that we don't install these libraries.
TEMPLATE_SUBLIBCRYPTO = Template for the OpenSSL crypto sub-libraries.
TEMPLATE_SUBLIBCRYPTO_EXTENDS = LIBCRYPTO
TEMPLATE_SUBLIBCRYPTO_INSTTYPE = none

# Somewhat similar to LIBCRYPTO.
TEMPLATE_LIBCRYPTOTST = Template for the OpenSSL crypto testcases.
TEMPLATE_LIBCRYPTOTST_EXTENDS = VBOXR3TSTEXE
TEMPLATE_LIBCRYPTOTST_DEFS    = $(TEMPLATE_VBOXR3TSTEXE_DEFS) $(filter-out $(TEMPLATE_VBoxR3RuntimeDllNonPedantic_DEFS),$(TEMPLATE_LIBCRYPTO_DEFS))
TEMPLATE_LIBCRYPTOTST_INCS    = $(TEMPLATE_LIBCRYPTO_INCS) $(TEMPLATE_VBOXR3TSTEXE_INCS)
ifeq ($(KBUILD_TARGET),win)
TEMPLATE_LIBCRYPTOTST_CFLAGS  = $(filter-out $(VBOX_VCC_WERR), $(TEMPLATE_VBOXR3TSTEXE_CXXFLAGS)) $(VBOX_VCC_NON_PEDANTIC)
else
TEMPLATE_LIBCRYPTOTST_CFLAGS  = $(filter-out $(VBOX_GCC_PEDANTIC_C), $(TEMPLATE_VBOXR3TSTEXE_CFLAGS)) $(VBOX_GCC_NON_PEDANTIC_C)
endif
TEMPLATE_LIBCRYPTOTST_LIBS    = $(PATH_STAGE_LIB)/VBox-libcrypto$(VBOX_SUFF_LIB) $(TEMPLATE_VBOXR3TSTEXE_LIBS)

#
# 32-bit version of LIBCRYPTO and SUBLIBCRYPTO.
#
TEMPLATE_VBoxLibCrypto-x86 = 32-bit template for the OpenSSL crypto library.
TEMPLATE_VBoxLibCrypto-x86_EXTENDS = LIBCRYPTO
TEMPLATE_VBoxLibCrypto-x86_BLD_TRG_ARCH = x86
TEMPLATE_VBoxLibCrypto-x86_DEFS = $(filter-out HC_ARCH_BITS%,$(TEMPLATE_LIBCRYPTO_DEFS)) HC_ARCH_BITS=32 ARCH_BITS=32

TEMPLATE_VBoxSubLibCrypto-x86 = 32-bit template for the OpenSSL crypto sub-library.
TEMPLATE_VBoxSubLibCrypto-x86_EXTENDS = VBoxLibCrypto-x86
TEMPLATE_VBoxSubLibCrypto-x86_INSTTYPE = none

ifdef VBOX_WITH_32_ON_64_MAIN_API # 32-bit edition.
 define VBOX_OPENSSL_X86
  $(eval LIBRARIES += $(1)-x86)
  $(1)-x86_TEMPLATE := VBoxSubLibCrypto-x86
  $(1)-x86_EXTENDS  := $(1)
 endef
else
 define VBOX_OPENSSL_X86
 endef
endif

