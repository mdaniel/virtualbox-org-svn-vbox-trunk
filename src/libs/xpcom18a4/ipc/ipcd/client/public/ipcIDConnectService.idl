/* vim:set ts=2 sw=2 et cindent: */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla IPC.
 *
 * The Initial Developer of the Original Code is IBM Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Darin Fisher <darin@meer.net>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/**
 * This service provides methods similar to nsIComponentManager and
 * nsIServiceManager.  A ClientID parameter specifies the remote process
 * in which the object should live.
 *
 * ipcIService can be used to determine the ClientID of a remote process.
 *
 * It is assumed that both processes have access to the same typelibs.
 */
[scriptable, uuid(fe07ed16-2710-4a1e-a4e2-81302b62bf0e)]
interface ipcIDConnectService : nsISupports
{
  void createInstance(
    in unsigned long aClientID,
    in nsCIDRef aClass,
    in nsIIDRef aIID,
    [iid_is(aIID),retval] out nsQIResult result
  );

  void createInstanceByContractID(
    in unsigned long aClientID,
    in string aContractID,
    in nsIIDRef aIID,
    [iid_is(aIID),retval] out nsQIResult result
  );

  void getService(
    in unsigned long aClientID,
    in nsCIDRef aClass,
    in nsIIDRef aIID,
    [iid_is(aIID),retval] out nsQIResult result
  );

  void getServiceByContractID(
    in unsigned long aClientID,
    in string aContractID,
    in nsIIDRef aIID,
    [iid_is(aIID),retval] out nsQIResult result
  );
};
